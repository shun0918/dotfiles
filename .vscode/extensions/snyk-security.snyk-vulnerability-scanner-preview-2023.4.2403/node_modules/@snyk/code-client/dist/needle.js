"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeRequest = void 0;
/* eslint-disable camelcase */
const http_1 = __importDefault(require("http"));
const needle_1 = __importDefault(require("needle"));
const querystring = __importStar(require("querystring"));
const https_1 = __importDefault(require("https"));
const url_1 = require("url");
const emitter_1 = require("./emitter");
const constants_1 = require("./constants");
const sleep = (duration) => new Promise(resolve => setTimeout(resolve, duration));
const TIMEOUT_DEFAULT = 600000;
const agentOptions = {
    keepAlive: true,
    keepAliveMsecs: 1000,
    maxSockets: 256,
    maxFreeSockets: 256,
    freeSocketTimeout: 60000,
    socketActiveTTL: 1000 * 60 * 10,
    rejectUnauthorized: !global.ignoreUnknownCA,
};
async function makeRequest(payload, attempts = constants_1.MAX_RETRY_ATTEMPTS) {
    let data;
    if (!payload.isJson && payload.body) {
        data = payload.body;
    }
    else {
        data = JSON.stringify(payload.body);
    }
    const parsedUrl = new url_1.URL(payload.url);
    const agent = parsedUrl.protocol === 'http:' ? new http_1.default.Agent(agentOptions) : new https_1.default.Agent(agentOptions);
    const method = (payload.method || 'get').toLowerCase();
    let { url } = payload;
    if (payload.qs) {
        // Parse the URL and append the search part - this will take care of adding the '/?' part if it's missing
        const urlObject = new url_1.URL(url);
        urlObject.search = querystring.stringify(payload.qs);
        url = urlObject.toString();
        delete payload.qs;
    }
    const options = {
        headers: payload.headers,
        open_timeout: TIMEOUT_DEFAULT,
        response_timeout: payload.timeout || TIMEOUT_DEFAULT,
        read_timeout: payload.timeout || TIMEOUT_DEFAULT,
        family: payload.family,
        json: payload.isJson || true,
        compressed: true,
        follow_max: 5,
        rejectUnauthorized: !global.ignoreUnknownCA,
        agent,
    };
    emitter_1.emitter.apiRequestLog(`=> HTTP ${method === null || method === void 0 ? void 0 : method.toUpperCase()} ${url} ${data !== null && data !== void 0 ? data : ''}`.slice(0, 399));
    do {
        let errorCode;
        let error;
        let response;
        try {
            response = await (0, needle_1.default)(method, url, data, options);
            emitter_1.emitter.apiRequestLog(`<= Response: ${response.statusCode} ${JSON.stringify(response.body)}`);
            const success = !!(response.statusCode && response.statusCode >= 200 && response.statusCode < 300);
            if (success)
                return { success, body: response.body };
            errorCode = response.statusCode;
        }
        catch (err) {
            error = err; // do not swallow the error, pass further to the caller instead
            errorCode = constants_1.NETWORK_ERRORS[err.code || err.errno];
            emitter_1.emitter.apiRequestLog(`Requested url --> ${url} | error --> ${err}`);
        }
        errorCode = errorCode !== null && errorCode !== void 0 ? errorCode : constants_1.ErrorCodes.serviceUnavailable;
        // Try to avoid breaking requests due to temporary network errors
        if (attempts > 1 &&
            [
                constants_1.ErrorCodes.serviceUnavailable,
                constants_1.ErrorCodes.badGateway,
                constants_1.ErrorCodes.connectionRefused,
                constants_1.ErrorCodes.timeout,
                constants_1.ErrorCodes.dnsNotFound,
                constants_1.ErrorCodes.serverError,
            ].includes(errorCode)) {
            attempts--;
            await sleep(constants_1.REQUEST_RETRY_DELAY);
        }
        else {
            attempts = 0;
            return { success: false, errorCode, error };
        }
    } while (attempts > 0);
    return { success: false, errorCode: constants_1.ErrorCodes.serviceUnavailable, error: undefined };
}
exports.makeRequest = makeRequest;
//# sourceMappingURL=needle.js.map