"use strict";
/* eslint-disable no-unused-vars, class-methods-use-this, max-classes-per-file */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Itly = exports.Loggers = exports.Plugin = exports.Validation = void 0;
var Validation;
(function (Validation) {
    Validation[Validation["Disabled"] = 0] = "Disabled";
    Validation[Validation["TrackOnInvalid"] = 1] = "TrackOnInvalid";
    Validation[Validation["ErrorOnInvalid"] = 2] = "ErrorOnInvalid";
    Validation[Validation["SkipOnInvalid"] = 3] = "SkipOnInvalid";
})(Validation = exports.Validation || (exports.Validation = {}));
var Plugin = /** @class */ (function () {
    function Plugin(id) {
        this.id = id;
        this.id = id;
    }
    Plugin.prototype.load = function (options) { };
    // validation methods
    Plugin.prototype.validate = function (event) {
        return {
            valid: true,
        };
    };
    Plugin.prototype.alias = function (userId, previousId, options) { };
    Plugin.prototype.identify = function (userId, properties, options) { };
    Plugin.prototype.postIdentify = function (userId, properties, validationResponses) { };
    Plugin.prototype.group = function (userId, groupId, properties, options) { };
    Plugin.prototype.postGroup = function (userId, groupId, properties, validationResponses) { };
    Plugin.prototype.page = function (userId, category, name, properties, options) { };
    Plugin.prototype.postPage = function (userId, category, name, properties, validationResponses) { };
    Plugin.prototype.track = function (userId, event, options) { };
    Plugin.prototype.postTrack = function (userId, event, validationResponses) { };
    Plugin.prototype.reset = function () { };
    Plugin.prototype.flush = function () {
        return Promise.resolve();
    };
    return Plugin;
}());
exports.Plugin = Plugin;
exports.Loggers = Object.freeze({
    None: {
        debug: function (message) { },
        info: function (message) { },
        warn: function (message) { },
        error: function (message) { },
    },
    Console: {
        // eslint-disable-next-line no-console
        debug: function (message) { console.debug(message); },
        // eslint-disable-next-line no-console
        info: function (message) { console.info(message); },
        // eslint-disable-next-line no-console
        warn: function (message) { console.warn(message); },
        // eslint-disable-next-line no-console
        error: function (message) { console.error(message); },
    },
});
var DEFAULT_DEV_OPTIONS = {
    environment: 'development',
    plugins: [],
    validation: Validation.ErrorOnInvalid,
    disabled: false,
    logger: exports.Loggers.None,
};
var DEFAULT_PROD_OPTIONS = __assign(__assign({}, DEFAULT_DEV_OPTIONS), { environment: 'production', validation: Validation.TrackOnInvalid });
var Itly = /** @class */ (function () {
    function Itly() {
        this.options = undefined;
        this.plugins = DEFAULT_DEV_OPTIONS.plugins;
        this.validation = DEFAULT_DEV_OPTIONS.validation;
        this.logger = exports.Loggers.None;
        this.context = undefined;
    }
    /**
     * Initialize the Itly SDK. Call once when your application starts.
     * @param loadOptions Configuration options to initialize the Itly SDK with.
     */
    Itly.prototype.load = function (loadOptions) {
        var _this = this;
        if (loadOptions === void 0) { loadOptions = {}; }
        if (this.options) {
            throw new Error('Itly is already initialized.');
        }
        var context = loadOptions.context, options = __rest(loadOptions, ["context"]);
        this.options = __assign(__assign({}, ((options === null || options === void 0 ? void 0 : options.environment) === 'production' ? DEFAULT_PROD_OPTIONS : DEFAULT_DEV_OPTIONS)), options);
        if (!this.isInitializedAndEnabled()) {
            return;
        }
        this.logger = this.options.logger || this.logger;
        this.plugins = this.options.plugins;
        this.validation = this.options.validation;
        this.context = context;
        // invoke load() on every plugin
        this.runOnAllPlugins('load', function (p) { return p.load({
            environment: _this.options.environment,
            logger: _this.logger,
        }); });
    };
    /**
     * Alias a user ID to another user ID.
     * @param userId The user's new ID.
     * @param previousId The user's previous ID.
     * @param options Options for this alias call.
     */
    Itly.prototype.alias = function (userId, previousId, options) {
        if (!this.isInitializedAndEnabled()) {
            return;
        }
        this.runOnAllPlugins('alias', function (p) { return p.alias(userId, previousId, options === null || options === void 0 ? void 0 : options[p.id]); });
    };
    /**
     * Identify a user and set or update that user's properties.
     * @param userId The user's ID.
     * @param identifyProperties The user's properties.
     * @param options Options for this identify call.
     */
    Itly.prototype.identify = function (userId, identifyProperties, options) {
        if (!this.isInitializedAndEnabled()) {
            return;
        }
        var identifyEvent = {
            name: 'identify',
            properties: identifyProperties || {},
            id: 'identify',
            version: '0-0-0',
        };
        this.validateAndRunOnAllPlugins('identify', identifyEvent, function (p, e) { return p.identify(userId, identifyProperties, options === null || options === void 0 ? void 0 : options[p.id]); }, function (p, e, validationResponses) { return p.postIdentify(userId, identifyProperties, validationResponses); });
    };
    /**
     * Associate a user with a group and set or update that group's properties.
     * @param userId The user's ID.
     * @param groupId The group's ID.
     * @param groupProperties The group's properties.
     * @param options Options for this group call.
     */
    Itly.prototype.group = function (userId, groupId, groupProperties, options) {
        if (!this.isInitializedAndEnabled()) {
            return;
        }
        var groupEvent = {
            name: 'group',
            properties: groupProperties || {},
            id: 'group',
            version: '0-0-0',
        };
        this.validateAndRunOnAllPlugins('group', groupEvent, function (p, e) { return p.group(userId, groupId, groupProperties, options === null || options === void 0 ? void 0 : options[p.id]); }, function (p, e, validationResponses) { return p.postGroup(userId, groupId, groupProperties, validationResponses); });
    };
    /**
     * Track a page view.
     * @param userId The user's ID.
     * @param category The page's category.
     * @param name The page's name.
     * @param pageProperties The page's properties.
     * @param options Options for this page call.
     */
    Itly.prototype.page = function (userId, category, name, pageProperties, options) {
        if (!this.isInitializedAndEnabled()) {
            return;
        }
        var pageEvent = {
            name: 'page',
            properties: pageProperties || {},
            id: 'page',
            version: '0-0-0',
        };
        this.validateAndRunOnAllPlugins('page', pageEvent, function (p, e) { return p.page(userId, category, name, pageProperties, options === null || options === void 0 ? void 0 : options[p.id]); }, function (p, e, validationResponses) { return p.postPage(userId, category, name, pageProperties, validationResponses); });
    };
    /**
     * Track any event.
     * @param userId The user's ID.
     * @param event The event.
     * @param event.name The event's name.
     * @param event.properties The event's properties.
     * @param event.id The event's ID.
     * @param event.version The event's version.
     * @param options Options for this track call.
     */
    Itly.prototype.track = function (userId, event, options) {
        if (!this.isInitializedAndEnabled()) {
            return;
        }
        var mergedEvent = this.mergeContext(event, this.context);
        this.validateAndRunOnAllPlugins('track', event, function (p, e) { return p.track(userId, mergedEvent, options === null || options === void 0 ? void 0 : options[p.id]); }, function (p, e, validationResponses) { return p.postTrack(userId, mergedEvent, validationResponses); }, this.context);
    };
    /**
     * Reset (e.g. on logout) all analytics state for the current user and group.
     */
    Itly.prototype.reset = function () {
        if (!this.isInitializedAndEnabled()) {
            return;
        }
        this.runOnAllPlugins('reset', function (p) { return p.reset(); });
    };
    Itly.prototype.flush = function () {
        return __awaiter(this, void 0, void 0, function () {
            var flushPromises;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isInitializedAndEnabled()) {
                            return [2 /*return*/];
                        }
                        flushPromises = this.plugins.map(function (plugin) { return __awaiter(_this, void 0, void 0, function () {
                            var e_1;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        _a.trys.push([0, 2, , 3]);
                                        return [4 /*yield*/, plugin.flush()];
                                    case 1:
                                        _a.sent();
                                        return [3 /*break*/, 3];
                                    case 2:
                                        e_1 = _a.sent();
                                        this.logger.error("Error in " + plugin.id + ".flush(). " + e_1.message + ".");
                                        return [3 /*break*/, 3];
                                    case 3: return [2 /*return*/];
                                }
                            });
                        }); });
                        return [4 /*yield*/, Promise.all(flushPromises)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Itly.prototype.validate = function (event) {
        var pluginId = 'sdk-core';
        var validationResponses = [];
        try {
            validationResponses.push.apply(validationResponses, this.plugins.map(function (p) { return (__assign(__assign({}, p.validate(event)), { pluginId: p.id })); }));
        }
        catch (e) {
            this.logger.error("Error validating '" + event.name + "'. " + e.message);
            // catch errors in validate() method
            validationResponses.push({
                valid: false,
                pluginId: pluginId,
                message: e.message,
            });
        }
        return validationResponses;
    };
    Itly.prototype.isInitializedAndEnabled = function () {
        if (!this.options) {
            throw new Error('Itly is not yet initialized. Have you called `itly.load()` on app start?');
        }
        return !this.options.disabled;
    };
    Itly.prototype.validateAndRunOnAllPlugins = function (op, event, method, postMethod, context) {
        var _this = this;
        // #1 validation phase
        var shouldRun = true;
        // invoke validate() on every plugin if required
        var validationResponses = [];
        if (this.validation !== Validation.Disabled) {
            validationResponses = __spreadArrays(this.validate(event), context ? this.validate(this.getContextEvent(context)) : []);
            shouldRun = this.validation === Validation.TrackOnInvalid
                || validationResponses.every(function (vr) { return vr.valid; });
        }
        // #2 track phase
        // invoke track(), group(), identify(), page() on every plugin if allowed
        if (shouldRun) {
            this.runOnAllPlugins(op, function (p) {
                if (_this.canRunEventOnPlugin(event, p)) {
                    method(p, event);
                }
            });
        }
        // invoke postTrack(), postGroup(), postIdentify(), postPage() on every plugin
        this.runOnAllPlugins("post" + this.capitalize(op), function (p) {
            if (_this.canRunEventOnPlugin(event, p)) {
                postMethod(p, event, validationResponses);
            }
        });
        // #3 response phase
        if (this.validation === Validation.ErrorOnInvalid) {
            var invalidResult = validationResponses.find(function (vr) { return !vr.valid; });
            if (invalidResult) {
                throw new Error("Validation Error: " + invalidResult.message);
            }
        }
    };
    Itly.prototype.canRunEventOnPlugin = function (event, plugin) {
        var _a;
        return !event.plugins || ((_a = event.plugins[plugin.id]) !== null && _a !== void 0 ? _a : true);
    };
    Itly.prototype.mergeContext = function (event, context) {
        return context
            ? Object.assign(Object.create(Object.getPrototypeOf(event)), event, {
                properties: __assign(__assign({}, context), event.properties),
            })
            : event;
    };
    Itly.prototype.getContextEvent = function (context) {
        return {
            name: 'context',
            properties: context || {},
            id: 'context',
            version: '0-0-0',
        };
    };
    Itly.prototype.runOnAllPlugins = function (op, method) {
        var _this = this;
        this.plugins.forEach(function (plugin) {
            try {
                method(plugin);
            }
            catch (e) {
                _this.logger.error("Error in " + plugin.id + "." + op + "(). " + e.message + ".");
            }
        });
    };
    Itly.prototype.capitalize = function (str) {
        return str.charAt(0).toUpperCase() + str.slice(1);
    };
    return Itly;
}());
exports.Itly = Itly;
exports.default = Itly;
