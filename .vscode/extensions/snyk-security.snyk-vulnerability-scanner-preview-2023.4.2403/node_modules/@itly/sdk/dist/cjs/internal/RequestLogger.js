"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestLoggerPlugin = exports.RequestLogger = void 0;
/* eslint-disable no-unused-vars, max-classes-per-file, import/no-unresolved */
var base_1 = require("../base");
var RequestLogger = /** @class */ (function () {
    // eslint-disable-next-line no-useless-constructor
    function RequestLogger(plugin, logger) {
        this.plugin = plugin;
        this.logger = logger;
    }
    RequestLogger.prototype.logRequest = function (action, requestData) {
        var _a = this, logger = _a.logger, id = _a.plugin.id;
        var requestId = +new Date();
        logger.debug(id + ": " + action + "(request) " + requestId + ": " + (requestData || ''));
        return {
            success: function (data) {
                return logger.debug(id + ": " + action + "(response) " + requestId + ": " + (data || ''));
            },
            error: function (data) {
                return logger.error(id + ": " + action + "(response) " + requestId + ": " + (data || ''));
            },
        };
    };
    RequestLogger.prototype.debug = function (message) {
        this.logger.debug(message);
    };
    RequestLogger.prototype.error = function (message) {
        this.logger.error(message);
    };
    RequestLogger.prototype.info = function (message) {
        this.logger.info(message);
    };
    RequestLogger.prototype.warn = function (message) {
        this.logger.warn(message);
    };
    return RequestLogger;
}());
exports.RequestLogger = RequestLogger;
/**
 * Base class for Plugin's that need request/response logging
 */
var RequestLoggerPlugin = /** @class */ (function (_super) {
    __extends(RequestLoggerPlugin, _super);
    function RequestLoggerPlugin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(RequestLoggerPlugin.prototype, "logger", {
        get: function () {
            return this.requestLogger;
        },
        enumerable: false,
        configurable: true
    });
    RequestLoggerPlugin.prototype.load = function (options) {
        this.requestLogger = new RequestLogger(this, options.logger);
    };
    return RequestLoggerPlugin;
}(base_1.Plugin));
exports.RequestLoggerPlugin = RequestLoggerPlugin;
