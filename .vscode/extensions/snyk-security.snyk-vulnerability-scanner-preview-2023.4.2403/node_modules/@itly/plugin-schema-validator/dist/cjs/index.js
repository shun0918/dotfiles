"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchemaValidatorPlugin = void 0;
/* eslint-disable no-unused-vars, class-methods-use-this */
var jsonschema_1 = require("jsonschema");
var sdk_1 = require("@itly/sdk");
var SYSTEM_EVENTS = ['identify', 'context', 'group', 'page'];
function isSystemEvent(name) {
    return SYSTEM_EVENTS.includes(name);
}
function isEmpty(obj) {
    return obj === undefined || Object.keys(obj).length === 0;
}
/**
 * Schema Validator Plugin for Iteratively SDK
 */
var SchemaValidatorPlugin = /** @class */ (function (_super) {
    __extends(SchemaValidatorPlugin, _super);
    function SchemaValidatorPlugin(schemas) {
        var _this = _super.call(this, 'schema-validator') || this;
        _this.schemas = schemas;
        return _this;
    }
    // overrides Plugin.load
    SchemaValidatorPlugin.prototype.load = function () {
        this.validator = new jsonschema_1.Validator();
    };
    // overrides Plugin.validate
    SchemaValidatorPlugin.prototype.validate = function (event) {
        var _a;
        var schemaKey = this.getSchemaKey(event);
        var schema = this.schemas[schemaKey];
        // Check that we have a schema for this event
        if (!schema) {
            if (isSystemEvent(schemaKey)) {
                // pass system events by default
                if (isEmpty(event.properties)) {
                    return {
                        valid: true,
                        pluginId: this.id,
                    };
                }
                return {
                    valid: false,
                    message: "'" + event.name + "' schema is empty but properties were found. properties=" + JSON.stringify(event.properties),
                    pluginId: this.id,
                };
            }
            return {
                valid: false,
                message: "Event " + event.name + " not found in tracking plan.",
                pluginId: this.id,
            };
        }
        var result = this.validator.validate((_a = event.properties) !== null && _a !== void 0 ? _a : {}, schema);
        if (!result.valid) {
            var errorMessage = result.errors.length > 0
                ? result.errors.map(function (e) { return "`" + e.property.replace(/\binstance/, 'properties') + "` " + e.message + "."; }).join(' ')
                : 'An unknown error occurred during validation.';
            return {
                valid: false,
                message: "Passed in " + event.name + " properties did not validate against your tracking plan. " + errorMessage,
                pluginId: this.id,
            };
        }
        return {
            valid: true,
            pluginId: this.id,
        };
    };
    SchemaValidatorPlugin.prototype.getSchemaKey = function (event) {
        return event.name;
    };
    return SchemaValidatorPlugin;
}(sdk_1.Plugin));
exports.SchemaValidatorPlugin = SchemaValidatorPlugin;
exports.default = SchemaValidatorPlugin;
