var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
/* eslint-disable no-unused-vars, class-methods-use-this */
import { RequestLoggerPlugin, } from '@itly/sdk';
import * as Amplitude from '@amplitude/node';
import { Identify } from '@amplitude/identify';
/**
 * Amplitude Node Plugin for Iteratively SDK
 */
var AmplitudePlugin = /** @class */ (function (_super) {
    __extends(AmplitudePlugin, _super);
    function AmplitudePlugin(apiKey, options) {
        var _this = _super.call(this, 'amplitude') || this;
        _this.apiKey = apiKey;
        _this.options = options;
        return _this;
    }
    // TODO: Allow passing in an instance rather than adding
    // TODO: destination specific configuration to Options
    // constructor(instanceOrApiKey: Amplitude | string, options?: AmplitudeOptions) {
    //     if(typeof instanceOrApiKey === 'string') {
    //         this.amplitude = new Amplitude(instanceOrApiKey, options);
    //     }
    //     else {
    //         this.amplitude = instanceOrApiKey;
    //     }
    // }
    AmplitudePlugin.prototype.load = function (options) {
        _super.prototype.load.call(this, options);
        this.amplitude = this.createAmplitude();
    };
    AmplitudePlugin.prototype.createAmplitude = function () {
        return Amplitude.init(this.apiKey, this.options);
    };
    AmplitudePlugin.prototype.identify = function (userId, properties, options) {
        return __awaiter(this, void 0, void 0, function () {
            var callback, identifyObject, entries, i, _a, propertyName, propertyValue, responseLogger, response, e_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        callback = (options !== null && options !== void 0 ? options : {}).callback;
                        identifyObject = new Identify();
                        if (properties) {
                            entries = Object.entries(properties);
                            for (i = 0; i < entries.length; i += 1) {
                                _a = entries[i], propertyName = _a[0], propertyValue = _a[1];
                                identifyObject.set(propertyName, propertyValue);
                            }
                        }
                        responseLogger = this.logger.logRequest('identify', userId + " " + JSON.stringify(properties));
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.amplitude.identify(userId, '', identifyObject)];
                    case 2:
                        response = _b.sent();
                        responseLogger.success(JSON.stringify(response));
                        callback === null || callback === void 0 ? void 0 : callback(response);
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _b.sent();
                        responseLogger.error(e_1.toString());
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    AmplitudePlugin.prototype.group = function (userId, groupId, properties, options) {
        return __awaiter(this, void 0, void 0, function () {
            var callback, responseLogger, callIdentify, callGroupIdentify, identifyObject, groupIdentifyObject, entries, i, _a, propertyName, propertyValue, groupEntries, i, _b, groupType, groupName;
            var _this = this;
            return __generator(this, function (_c) {
                if (!(options && options.groups)) {
                    this.logger.warn('Amplitude group requires groups in the AmplitudeGroupOptions.');
                    return [2 /*return*/];
                }
                callback = (options !== null && options !== void 0 ? options : {}).callback;
                responseLogger = this.logger.logRequest('group', userId + " " + JSON.stringify(properties));
                callIdentify = function (identifyEvent) { return __awaiter(_this, void 0, void 0, function () {
                    var response, e_2;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 2, , 3]);
                                return [4 /*yield*/, this.amplitude.identify(userId, '', identifyEvent)];
                            case 1:
                                response = _a.sent();
                                responseLogger.success(JSON.stringify(response));
                                callback === null || callback === void 0 ? void 0 : callback(response);
                                return [3 /*break*/, 3];
                            case 2:
                                e_2 = _a.sent();
                                responseLogger.error(e_2.toString());
                                return [3 /*break*/, 3];
                            case 3: return [2 /*return*/];
                        }
                    });
                }); };
                callGroupIdentify = function (groupIdentifyEvent) { return __awaiter(_this, void 0, void 0, function () {
                    var response, e_3;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 2, , 3]);
                                return [4 /*yield*/, this.amplitude.logEvent(groupIdentifyEvent)];
                            case 1:
                                response = _a.sent();
                                responseLogger.success(JSON.stringify(response));
                                callback === null || callback === void 0 ? void 0 : callback(response);
                                return [3 /*break*/, 3];
                            case 2:
                                e_3 = _a.sent();
                                responseLogger.error(e_3.toString());
                                return [3 /*break*/, 3];
                            case 3: return [2 /*return*/];
                        }
                    });
                }); };
                identifyObject = new Identify();
                groupIdentifyObject = new Identify();
                if (properties) {
                    entries = Object.entries(properties);
                    for (i = 0; i < entries.length; i += 1) {
                        _a = entries[i], propertyName = _a[0], propertyValue = _a[1];
                        groupIdentifyObject.set(propertyName, propertyValue);
                    }
                }
                groupEntries = Object.entries(options.groups);
                for (i = 0; i < groupEntries.length; i += 1) {
                    _b = groupEntries[i], groupType = _b[0], groupName = _b[1];
                    identifyObject.setGroup(groupType, groupName);
                    if (properties) {
                        callGroupIdentify(groupIdentifyObject.identifyGroup(groupType, groupName));
                    }
                }
                callIdentify(identifyObject);
                return [2 /*return*/];
            });
        });
    };
    AmplitudePlugin.prototype.track = function (userId, _a, options) {
        var name = _a.name, properties = _a.properties;
        return __awaiter(this, void 0, void 0, function () {
            var callback, payload, responseLogger, response, e_4;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        callback = (options !== null && options !== void 0 ? options : {}).callback;
                        payload = {
                            event_type: name,
                            user_id: userId,
                            event_properties: properties,
                        };
                        responseLogger = this.logger.logRequest('track', JSON.stringify(payload));
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.amplitude.logEvent(payload)];
                    case 2:
                        response = _b.sent();
                        responseLogger.success(JSON.stringify(response));
                        callback === null || callback === void 0 ? void 0 : callback(response);
                        return [3 /*break*/, 4];
                    case 3:
                        e_4 = _b.sent();
                        responseLogger.error(e_4.toString());
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    AmplitudePlugin.prototype.flush = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.amplitude.flush()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return AmplitudePlugin;
}(RequestLoggerPlugin));
export { AmplitudePlugin };
export default AmplitudePlugin;
