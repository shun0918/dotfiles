"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InMemoryFlagConfigCache = void 0;
class InMemoryFlagConfigCache {
    constructor(flagConfigs = {}) {
        this.cache = {};
        this.cache = flagConfigs;
    }
    get(flagKey) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.cache[flagKey];
        });
    }
    getAll() {
        return __awaiter(this, void 0, void 0, function* () {
            return Object.assign({}, this.cache);
        });
    }
    put(flagKey, flagConfig) {
        return __awaiter(this, void 0, void 0, function* () {
            this.cache[flagKey] = flagConfig;
        });
    }
    putAll(flagConfigs) {
        return __awaiter(this, void 0, void 0, function* () {
            for (const key in flagConfigs) {
                const flag = flagConfigs[key];
                if (flag) {
                    this.cache[key] = flag;
                }
            }
        });
    }
    delete(flagKey) {
        return __awaiter(this, void 0, void 0, function* () {
            delete this.cache[flagKey];
        });
    }
    clear() {
        return __awaiter(this, void 0, void 0, function* () {
            this.cache = {};
        });
    }
}
exports.InMemoryFlagConfigCache = InMemoryFlagConfigCache;
