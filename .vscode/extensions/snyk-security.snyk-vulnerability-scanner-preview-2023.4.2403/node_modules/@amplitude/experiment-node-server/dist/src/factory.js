"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Experiment = void 0;
const cache_1 = require("./local/cache");
const client_1 = require("./local/client");
const client_2 = require("./remote/client");
const remoteEvaluationInstances = {};
const localEvaluationInstances = {};
const defaultInstance = '$default_instance';
/**
 * Initializes a singleton {@link ExperimentClient} for remote evaluation.
 *
 * @param apiKey The environment API Key
 * @param config See {@link ExperimentConfig} for config options
 * @deprecated use initializeRemote
 */
const initialize = (apiKey, config) => {
    return initializeRemote(apiKey, config);
};
/**
 * Initializes a singleton {@link ExperimentClient} for remote evaluation.
 *
 * @param apiKey The environment API Key
 * @param config See {@link ExperimentConfig} for config options
 */
const initializeRemote = (apiKey, config) => {
    if (!remoteEvaluationInstances[defaultInstance]) {
        remoteEvaluationInstances[defaultInstance] = new client_2.RemoteEvaluationClient(apiKey, config);
    }
    return remoteEvaluationInstances[defaultInstance];
};
/**
 * Initialize a local evaluation client.
 *
 * A local evaluation client can evaluate local flags or experiments for a user
 * without requiring a remote call to the amplitude evaluation server. In order
 * to best leverage local evaluation, all flags and experiments being evaluated
 * server side should be configured as local.
 *
 * @param apiKey The environment API Key
 * @param config See {@link ExperimentConfig} for config options
 * @returns The local evaluation client.
 */
const initializeLocal = (apiKey, config) => {
    if (!localEvaluationInstances[apiKey]) {
        localEvaluationInstances[apiKey] = new client_1.LocalEvaluationClient(apiKey, config, new cache_1.InMemoryFlagConfigCache());
    }
    return localEvaluationInstances[apiKey];
};
/**
 * Provides factory methods for storing singleton instances of
 * {@link ExperimentClient}.
 *
 * @category Core Usage
 */
exports.Experiment = {
    initialize,
    initializeRemote,
    initializeLocal,
};
