"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExperimentClient = exports.RemoteEvaluationClient = void 0;
const version_1 = require("../../gen/version");
const http_1 = require("../transport/http");
const config_1 = require("../types/config");
const time_1 = require("../util/time");
/**
 * Experiment client for fetching variants for a user remotely.
 * @category Core Usage
 */
class RemoteEvaluationClient {
    /**
     * Creates a new RemoteEvaluationClient instance.
     *
     * @param apiKey The environment API Key
     * @param config See {@link ExperimentConfig} for config options
     */
    constructor(apiKey, config) {
        this.apiKey = apiKey;
        this.config = Object.assign(Object.assign({}, config_1.RemoteEvaluationDefaults), config);
        this.httpClient = new http_1.FetchHttpClient(config === null || config === void 0 ? void 0 : config.httpAgent);
    }
    /**
     * Fetch all variants for a user.
     *
     * This method will automatically retry if configured (default).
     *
     * @param user The {@link ExperimentUser} context
     * @return The {@link Variants} for the user on success, empty
     * {@link Variants} on error.
     */
    fetch(user) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.apiKey) {
                throw Error('Experiment API key is empty');
            }
            try {
                return yield this.fetchInternal(user);
            }
            catch (e) {
                console.error('[Experiment] Failed to fetch variants: ', e);
                return {};
            }
        });
    }
    fetchInternal(user) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.apiKey) {
                throw Error('Experiment API key is empty');
            }
            this.debug('[Experiment] Fetching variants for user: ', user);
            try {
                return yield this.doFetch(user, this.config.fetchTimeoutMillis);
            }
            catch (e) {
                console.error('[Experiment] Fetch failed: ', e);
                try {
                    return yield this.retryFetch(user);
                }
                catch (e) {
                    console.error(e);
                }
                throw e;
            }
        });
    }
    doFetch(user, timeoutMillis) {
        return __awaiter(this, void 0, void 0, function* () {
            const userContext = this.addContext(user || {});
            const endpoint = `${this.config.serverUrl}/sdk/vardata`;
            const encodedUser = Buffer.from(JSON.stringify(userContext)).toString('base64');
            const headers = {
                Authorization: `Api-Key ${this.apiKey}`,
                'X-Amp-Exp-User': encodedUser,
            };
            this.debug('[Experiment] Fetch variants for user: ', userContext);
            const response = yield this.httpClient.request(endpoint, 'GET', headers, null, timeoutMillis);
            if (response.status !== 200) {
                throw Error(`fetch - received error response: ${response.status}: ${response.body}`);
            }
            const json = JSON.parse(response.body);
            const variants = this.parseJsonVariants(json);
            this.debug('[Experiment] Fetched variants: ', variants);
            return variants;
        });
    }
    retryFetch(user) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.config.fetchRetries == 0) {
                return {};
            }
            this.debug('[Experiment] Retrying fetch');
            let err = null;
            let delayMillis = this.config.fetchRetryBackoffMinMillis;
            for (let i = 0; i < this.config.fetchRetries; i++) {
                yield (0, time_1.sleep)(delayMillis);
                try {
                    return yield this.doFetch(user, this.config.fetchRetryTimeoutMillis);
                }
                catch (e) {
                    console.error('[Experiment] Retry falied: ', e);
                    err = e;
                }
                delayMillis = Math.min(delayMillis * this.config.fetchRetryBackoffScalar, this.config.fetchRetryBackoffMaxMillis);
            }
            throw err;
        });
    }
    parseJsonVariants(json) {
        return __awaiter(this, void 0, void 0, function* () {
            const variants = {};
            for (const key of Object.keys(json)) {
                let value;
                if ('value' in json[key]) {
                    value = json[key].value;
                }
                else if ('key' in json[key]) {
                    // value was previously under the "key" field
                    value = json[key].key;
                }
                const variant = {
                    value,
                    payload: json[key].payload,
                };
                variants[key] = variant;
            }
            return variants;
        });
    }
    addContext(user) {
        return Object.assign({ library: `experiment-node-server/${version_1.version}` }, user);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    debug(message, ...optionalParams) {
        if (this.config.debug) {
            console.debug(message, ...optionalParams);
        }
    }
}
exports.RemoteEvaluationClient = RemoteEvaluationClient;
/**
 * @deprecated use {@link RemoteEvaluationClient}.
 */
class ExperimentClient extends RemoteEvaluationClient {
    constructor(apiKey, config) {
        super(apiKey, config);
    }
}
exports.ExperimentClient = ExperimentClient;
