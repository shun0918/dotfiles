"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const vscode = __importStar(require("vscode"));
const advisorProvider_1 = __importDefault(require("./advisor/services/advisorProvider"));
const advisorService_1 = require("./advisor/services/advisorService");
const snykLib_1 = __importDefault(require("./base/modules/snykLib"));
const authenticationService_1 = require("./base/services/authenticationService");
const scanModeService_1 = require("./base/services/scanModeService");
const emptyTreeDataProvider_1 = require("./base/views/emptyTreeDataProvider");
const featuresViewProvider_1 = require("./base/views/featureSelection/featuresViewProvider");
const supportProvider_1 = require("./base/views/supportProvider");
const messages_1 = require("./cli/messages/messages");
const itly_1 = require("./common/analytics/itly");
const commandController_1 = require("./common/commands/commandController");
const instance_1 = require("./common/configuration/instance");
const snykConfiguration_1 = require("./common/configuration/snykConfiguration");
const commands_1 = require("./common/constants/commands");
const globalState_1 = require("./common/constants/globalState");
const languageServer_1 = require("./common/constants/languageServer");
const views_1 = require("./common/constants/views");
const errorHandler_1 = require("./common/error/errorHandler");
const errorReporter_1 = require("./common/error/errorReporter");
const experimentService_1 = require("./common/experiment/services/experimentService");
const codeScanOrchestrator_1 = require("./common/languageServer/experiments/codeScanOrchestrator");
const languageServer_2 = require("./common/languageServer/languageServer");
const staticLsApi_1 = require("./common/languageServer/staticLsApi");
const logger_1 = require("./common/logger/logger");
const downloadService_1 = require("./common/services/downloadService");
const notificationService_1 = require("./common/services/notificationService");
const user_1 = require("./common/user");
const codeAction_1 = require("./common/vscode/codeAction");
const commands_2 = require("./common/vscode/commands");
const env_1 = require("./common/vscode/env");
const extensionContext_1 = require("./common/vscode/extensionContext");
const hover_1 = require("./common/vscode/hover");
const languageClient_1 = require("./common/vscode/languageClient");
const languages_1 = require("./common/vscode/languages");
const secretStorage_1 = __importDefault(require("./common/vscode/secretStorage"));
const theme_1 = require("./common/vscode/theme");
const uri_1 = require("./common/vscode/uri");
const window_1 = require("./common/vscode/window");
const workspace_1 = require("./common/vscode/workspace");
const configurationWatcher_1 = __importDefault(require("./common/watchers/configurationWatcher"));
const ignoreCommand_1 = require("./snykCode/codeActions/ignoreCommand");
const codeService_1 = require("./snykCode/codeService");
const codeServiceOld_1 = require("./snykCode/codeServiceOld");
const qualityIssueTreeProvider_1 = require("./snykCode/views/qualityIssueTreeProvider");
const qualityIssueTreeProviderOld_1 = require("./snykCode/views/qualityIssueTreeProviderOld");
const securityIssueTreeProvider_1 = __importDefault(require("./snykCode/views/securityIssueTreeProvider"));
const securityIssueTreeProviderOld_1 = require("./snykCode/views/securityIssueTreeProviderOld");
const codeSuggestionWebviewProvider_1 = require("./snykCode/views/suggestion/codeSuggestionWebviewProvider");
const iacService_1 = require("./snykIac/iacService");
const iacIssueTreeProvider_1 = __importDefault(require("./snykIac/views/iacIssueTreeProvider"));
const iacSuggestionWebviewProvider_1 = require("./snykIac/views/suggestion/iacSuggestionWebviewProvider");
const npmTestApi_1 = require("./snykOss/api/npmTestApi");
const editorDecorator_1 = require("./snykOss/editor/editorDecorator");
const ossService_1 = require("./snykOss/services/ossService");
const npmModuleInfoFetchService_1 = require("./snykOss/services/vulnerabilityCount/npmModuleInfoFetchService");
const ossVulnerabilityCountService_1 = require("./snykOss/services/vulnerabilityCount/ossVulnerabilityCountService");
const vulnerabilityCountProvider_1 = require("./snykOss/services/vulnerabilityCount/vulnerabilityCountProvider");
const ossVulnerabilityTreeProvider_1 = require("./snykOss/views/ossVulnerabilityTreeProvider");
const ossSuggestionWebviewProvider_1 = require("./snykOss/views/suggestion/ossSuggestionWebviewProvider");
const dailyScanJob_1 = require("./snykOss/watchers/dailyScanJob");
class SnykExtension extends snykLib_1.default {
    async activate(vscodeContext) {
        extensionContext_1.extensionContext.setContext(vscodeContext);
        this.context = extensionContext_1.extensionContext;
        const snykConfiguration = await this.getSnykConfiguration();
        if (snykConfiguration) {
            await errorReporter_1.ErrorReporter.init(instance_1.configuration, snykConfiguration, extensionContext_1.extensionContext.extensionPath, env_1.vsCodeEnv, logger_1.Logger);
        }
        try {
            await this.initializeExtension(vscodeContext, snykConfiguration);
        }
        catch (e) {
            errorHandler_1.ErrorHandler.handle(e, logger_1.Logger);
        }
    }
    async getSnykConfiguration() {
        try {
            return await snykConfiguration_1.SnykConfiguration.get(extensionContext_1.extensionContext.extensionPath, instance_1.configuration.isDevelopment);
        }
        catch (e) {
            errorHandler_1.ErrorHandler.handle(e, logger_1.Logger);
        }
    }
    async initializeExtension(vscodeContext, snykConfiguration) {
        this.user = await user_1.User.getAnonymous(this.context);
        this.analytics = new itly_1.Iteratively(this.user, logger_1.Logger, instance_1.configuration.shouldReportEvents, instance_1.configuration.isDevelopment, snykConfiguration);
        secretStorage_1.default.init(vscodeContext);
        this.configurationWatcher = new configurationWatcher_1.default(this.analytics, logger_1.Logger);
        this.notificationService = new notificationService_1.NotificationService(window_1.vsCodeWindow, commands_2.vsCodeComands, instance_1.configuration, this.analytics, logger_1.Logger);
        this.statusBarItem.show();
        const languageClientAdapter = new languageClient_1.LanguageClientAdapter();
        this.authService = new authenticationService_1.AuthenticationService(this.contextService, this, instance_1.configuration, window_1.vsCodeWindow, this.analytics, logger_1.Logger, languageClientAdapter, commands_2.vsCodeComands);
        this.snykCodeOld = new codeServiceOld_1.SnykCodeServiceOld(this.context, instance_1.configuration, this.viewManagerService, workspace_1.vsCodeWorkspace, window_1.vsCodeWindow, this.user, this.falsePositiveApi, logger_1.Logger, this.analytics, new languages_1.VSCodeLanguages(), this.snykCodeErrorHandler, new uri_1.UriAdapter(), this.codeSettings, this.learnService, this.markdownStringAdapter, this.workspaceTrust);
        this.scanModeService = new scanModeService_1.ScanModeService(this.contextService, instance_1.configuration, this.analytics);
        this.advisorService = new advisorProvider_1.default(this.advisorApiClient, logger_1.Logger);
        this.downloadService = new downloadService_1.DownloadService(this.context, instance_1.configuration, new staticLsApi_1.StaticLsApi(workspace_1.vsCodeWorkspace, instance_1.configuration, logger_1.Logger), window_1.vsCodeWindow, logger_1.Logger);
        this.experimentService = new experimentService_1.ExperimentService(this.user, logger_1.Logger, instance_1.configuration, snykConfiguration);
        this.languageServer = new languageServer_2.LanguageServer(this.user, instance_1.configuration, languageClientAdapter, workspace_1.vsCodeWorkspace, window_1.vsCodeWindow, this.authService, logger_1.Logger, this.downloadService, this.experimentService);
        const codeSuggestionProvider = new codeSuggestionWebviewProvider_1.CodeSuggestionWebviewProvider(window_1.vsCodeWindow, extensionContext_1.extensionContext, logger_1.Logger, languages_1.vsCodeLanguages, workspace_1.vsCodeWorkspace, this.learnService);
        this.snykCode = new codeService_1.SnykCodeService(this.context, instance_1.configuration, codeSuggestionProvider, new codeAction_1.CodeActionAdapter(), this.codeActionKindAdapter, this.viewManagerService, workspace_1.vsCodeWorkspace, this.workspaceTrust, this.languageServer, languages_1.vsCodeLanguages, logger_1.Logger, this.analytics);
        this.ossService = new ossService_1.OssService(this.context, logger_1.Logger, instance_1.configuration, new ossSuggestionWebviewProvider_1.OssSuggestionWebviewProvider(this.context, window_1.vsCodeWindow, logger_1.Logger, this.learnService), workspace_1.vsCodeWorkspace, this.viewManagerService, this.downloadService, new dailyScanJob_1.DailyScanJob(this), this.notificationService, this.analytics, this.languageServer, this.workspaceTrust);
        const iacSuggestionProvider = new iacSuggestionWebviewProvider_1.IacSuggestionWebviewProvider(window_1.vsCodeWindow, extensionContext_1.extensionContext, logger_1.Logger, languages_1.vsCodeLanguages, workspace_1.vsCodeWorkspace);
        this.iacService = new iacService_1.IacService(this.context, instance_1.configuration, iacSuggestionProvider, new codeAction_1.CodeActionAdapter(), this.codeActionKindAdapter, this.viewManagerService, workspace_1.vsCodeWorkspace, this.workspaceTrust, this.languageServer, languages_1.vsCodeLanguages, logger_1.Logger, this.analytics);
        this.commandController = new commandController_1.CommandController(this.openerService, this.authService, this.snykCode, this.snykCodeOld, this.iacService, this.ossService, this.scanModeService, workspace_1.vsCodeWorkspace, commands_2.vsCodeComands, window_1.vsCodeWindow, this.languageServer, logger_1.Logger, this.analytics);
        this.registerCommands(vscodeContext);
        const codeSecurityIssueProviderOld = new securityIssueTreeProviderOld_1.CodeSecurityIssueTreeProviderOld(this.viewManagerService, this.contextService, this.snykCodeOld, instance_1.configuration), codeQualityIssueProviderOld = new qualityIssueTreeProviderOld_1.CodeQualityIssueTreeProviderOld(this.viewManagerService, this.contextService, this.snykCodeOld, instance_1.configuration);
        const codeSecurityIssueProvider = new securityIssueTreeProvider_1.default(this.viewManagerService, this.contextService, this.snykCode, instance_1.configuration, languages_1.vsCodeLanguages), codeQualityIssueProvider = new qualityIssueTreeProvider_1.CodeQualityIssueTreeProvider(this.viewManagerService, this.contextService, this.snykCode, instance_1.configuration, languages_1.vsCodeLanguages);
        const codeSecurityTree = vscode.window.createTreeView(views_1.SNYK_VIEW_ANALYSIS_CODE_SECURITY, {
            treeDataProvider: codeSecurityIssueProvider,
        });
        const codeQualityTree = vscode.window.createTreeView(views_1.SNYK_VIEW_ANALYSIS_CODE_QUALITY, {
            treeDataProvider: codeQualityIssueProvider,
        });
        vscodeContext.subscriptions.push(vscode.window.registerTreeDataProvider(views_1.SNYK_VIEW_ANALYSIS_CODE_SECURITY, codeSecurityIssueProvider), vscode.window.registerTreeDataProvider(views_1.SNYK_VIEW_ANALYSIS_CODE_QUALITY, codeQualityIssueProvider), codeSecurityTree, codeQualityTree);
        const ossVulnerabilityProvider = new ossVulnerabilityTreeProvider_1.OssVulnerabilityTreeProvider(this.viewManagerService, this.contextService, this.ossService, instance_1.configuration);
        const featuresViewProvider = new featuresViewProvider_1.FeaturesViewProvider(vscodeContext.extensionUri, this.contextService);
        vscodeContext.subscriptions.push(vscode.window.registerWebviewViewProvider(views_1.SNYK_VIEW_FEATURES, featuresViewProvider), vscode.window.registerTreeDataProvider(views_1.SNYK_VIEW_ANALYSIS_OSS, ossVulnerabilityProvider), vscode.window.registerTreeDataProvider(views_1.SNYK_VIEW_ANALYSIS_CODE_SECURITY_OLD, codeSecurityIssueProviderOld), vscode.window.registerTreeDataProvider(views_1.SNYK_VIEW_ANALYSIS_CODE_QUALITY_OLD, codeQualityIssueProviderOld), vscode.window.registerTreeDataProvider(views_1.SNYK_VIEW_SUPPORT, new supportProvider_1.SupportProvider()));
        const welcomeTree = vscode.window.createTreeView(views_1.SNYK_VIEW_WELCOME, {
            treeDataProvider: new emptyTreeDataProvider_1.EmptyTreeDataProvider(),
        });
        const codeEnablementTree = vscode.window.createTreeView(views_1.SNYK_VIEW_ANALYSIS_CODE_ENABLEMENT, {
            treeDataProvider: new emptyTreeDataProvider_1.EmptyTreeDataProvider(),
        });
        const ossTree = vscode.window.createTreeView(views_1.SNYK_VIEW_ANALYSIS_OSS, {
            treeDataProvider: ossVulnerabilityProvider,
        });
        const codeSecurityTreeOld = vscode.window.createTreeView(views_1.SNYK_VIEW_ANALYSIS_CODE_SECURITY_OLD, {
            treeDataProvider: codeSecurityIssueProviderOld,
        });
        const codeQualityTreeOld = vscode.window.createTreeView(views_1.SNYK_VIEW_ANALYSIS_CODE_QUALITY_OLD, {
            treeDataProvider: codeQualityIssueProviderOld,
        });
        vscodeContext.subscriptions.push(ossTree.onDidChangeVisibility(e => this.onDidChangeOssTreeVisibility(e.visible)), codeSecurityTreeOld, codeQualityTreeOld, welcomeTree.onDidChangeVisibility(e => this.onDidChangeWelcomeViewVisibility(e.visible)), codeEnablementTree);
        const iacIssueProvider = new iacIssueTreeProvider_1.default(this.viewManagerService, this.contextService, this.iacService, instance_1.configuration, languages_1.vsCodeLanguages);
        const iacSecurityTree = vscode.window.createTreeView(views_1.SNYK_VIEW_ANALYSIS_IAC, {
            treeDataProvider: iacIssueProvider,
        });
        vscodeContext.subscriptions.push(vscode.window.registerTreeDataProvider(views_1.SNYK_VIEW_ANALYSIS_IAC, iacIssueProvider), iacSecurityTree);
        // Fill the view container to expose views for tests
        const viewContainer = this.viewManagerService.viewContainer;
        viewContainer.set(views_1.SNYK_VIEW_WELCOME, welcomeTree);
        viewContainer.set(views_1.SNYK_VIEW_FEATURES, featuresViewProvider);
        vscode.workspace.onDidChangeWorkspaceFolders(e => {
            this.workspaceTrust.resetTrustedFoldersCache();
            e.removed.forEach(folder => {
                this.snykCode.resetResult(folder.uri.path);
            });
            this.runScan(false);
        });
        this.editorsWatcher.activate(this);
        this.configurationWatcher.activate(this);
        this.snykCode.activateWebviewProviders();
        this.snykCodeOld.activateWebviewProviders();
        this.ossService.activateSuggestionProvider();
        this.ossService.activateManifestFileWatcher(this);
        this.iacService.activateWebviewProviders();
        // noinspection ES6MissingAwait
        void this.notificationService.init();
        this.checkAdvancedMode().catch(err => errorReporter_1.ErrorReporter.capture(err));
        this.analytics.load();
        this.experimentService.load();
        this.logPluginIsInstalled();
        this.initDependencyDownload();
        const npmModuleInfoFetchService = new npmModuleInfoFetchService_1.NpmModuleInfoFetchService(instance_1.configuration, logger_1.Logger, new npmTestApi_1.NpmTestApi(logger_1.Logger, workspace_1.vsCodeWorkspace));
        this.ossVulnerabilityCountService = new ossVulnerabilityCountService_1.OssVulnerabilityCountService(workspace_1.vsCodeWorkspace, window_1.vsCodeWindow, languages_1.vsCodeLanguages, new vulnerabilityCountProvider_1.ModuleVulnerabilityCountProvider(this.ossService, npmModuleInfoFetchService), this.ossService, logger_1.Logger, new editorDecorator_1.EditorDecorator(window_1.vsCodeWindow, languages_1.vsCodeLanguages, new theme_1.ThemeColorAdapter()), new codeAction_1.CodeActionKindAdapter(), this.analytics, instance_1.configuration);
        this.ossVulnerabilityCountService.activate();
        this.advisorScoreDisposable = new advisorService_1.AdvisorService(window_1.vsCodeWindow, languages_1.vsCodeLanguages, this.advisorService, logger_1.Logger, workspace_1.vsCodeWorkspace, this.advisorApiClient, new theme_1.ThemeColorAdapter(), new hover_1.HoverAdapter(), this.markdownStringAdapter, instance_1.configuration);
        const codeScansViaLs = await this.experimentService.isUserPartOfExperiment(experimentService_1.ExperimentKey.CodeScansViaLanguageServer);
        if (codeScansViaLs) {
            await this.contextService.setContext(views_1.SNYK_CONTEXT.LS_CODE_PREVIEW, true);
            logger_1.Logger.info('Code scans via language server enabled.');
        }
        else {
            await this.contextService.setContext(views_1.SNYK_CONTEXT.LS_CODE_PREVIEW, false);
            logger_1.Logger.info('Code scans are not using Language Server.');
        }
        await this.languageServer.start();
        this.codeScanOrchestrator = new codeScanOrchestrator_1.CodeScanOrchestrator(this.experimentService, this.languageServer, logger_1.Logger, this.contextService, this);
        // noinspection ES6MissingAwait
        void this.advisorScoreDisposable.activate();
        // Actually start analysis
        this.runScan();
    }
    async deactivate() {
        this.snykCodeOld.dispose();
        this.ossVulnerabilityCountService.dispose();
        await this.languageServer.stop();
        this.codeScanOrchestrator.dispose();
        await this.analytics.flush();
        await errorReporter_1.ErrorReporter.flush();
    }
    async restartLanguageServer() {
        await this.languageServer.stop();
        await this.languageServer.start();
    }
    logPluginIsInstalled() {
        // Use memento until lifecycle hooks are implemented
        // https://github.com/microsoft/vscode/issues/98732
        if (!this.context.getGlobalStateValue(globalState_1.MEMENTO_FIRST_INSTALL_DATE_KEY)) {
            this.analytics.logPluginIsInstalled();
            void this.context.updateGlobalStateValue(globalState_1.MEMENTO_FIRST_INSTALL_DATE_KEY, Date.now());
        }
    }
    initDependencyDownload() {
        this.downloadService.downloadOrUpdate().catch(err => {
            var _a;
            logger_1.Logger.error(`${messages_1.messages.lsDownloadFailed} ${errorHandler_1.ErrorHandler.stringifyError(err)}`);
            (_a = this.ossService) === null || _a === void 0 ? void 0 : _a.handleLsDownloadFailure();
        });
        return this.downloadService;
    }
    registerCommands(context) {
        context.subscriptions.push(vscode.commands.registerCommand(commands_1.SNYK_OPEN_BROWSER_COMMAND, (url) => this.commandController.openBrowser(url)), vscode.commands.registerCommand(commands_1.SNYK_OPEN_LOCAL_COMMAND, (path, range) => this.commandController.openLocal(path, range)), vscode.commands.registerCommand(commands_1.SNYK_INITIATE_LOGIN_COMMAND, () => this.commandController.initiateLogin()), vscode.commands.registerCommand(commands_1.SNYK_SET_TOKEN_COMMAND, () => this.commandController.setToken()), vscode.commands.registerCommand(commands_1.SNYK_ENABLE_CODE_COMMAND, () => this.commandController.executeCommand(commands_1.SNYK_ENABLE_CODE_COMMAND, () => this.enableCode())), vscode.commands.registerCommand(commands_1.SNYK_START_COMMAND, async () => {
            await vscode.commands.executeCommand(languageServer_1.SNYK_WORKSPACE_SCAN_COMMAND);
            // eslint-disable-next-line @typescript-eslint/no-unsafe-return
            await this.commandController.executeCommand(commands_1.SNYK_START_COMMAND, () => this.runScan(true)); // todo: remove once OSS scans replaced with LS
        }), vscode.commands.registerCommand(commands_1.SNYK_SETTINGS_COMMAND, () => this.commandController.openSettings()), vscode.commands.registerCommand(commands_1.SNYK_DCIGNORE_COMMAND, (custom, path) => this.commandController.createDCIgnore(custom, new uri_1.UriAdapter(), path)), vscode.commands.registerCommand(commands_1.SNYK_OPEN_ISSUE_COMMAND, (arg) => this.commandController.openIssueCommand(arg)), vscode.commands.registerCommand(commands_1.SNYK_SHOW_OUTPUT_COMMAND, () => this.commandController.showOutputChannel()), vscode.commands.registerCommand(commands_1.SNYK_SHOW_LS_OUTPUT_COMMAND, () => this.commandController.showLsOutputChannel()), vscode.commands.registerCommand(commands_1.SNYK_IGNORE_ISSUE_COMMAND, ignoreCommand_1.IgnoreCommand.ignoreIssues));
    }
}
exports.default = SnykExtension;
//# sourceMappingURL=extension.js.map