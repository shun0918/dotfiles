"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoadingBadge = void 0;
const vscode = __importStar(require("vscode"));
const views_1 = require("../../common/constants/views");
const errorReporter_1 = require("../../common/error/errorReporter");
const pendingTask_1 = require("../pendingTask");
class LoadingBadge {
    constructor() {
        this.shouldShowProgressBadge = false;
    }
    getProgressBadgePromise() {
        if (!this.shouldShowProgressBadge)
            return Promise.resolve();
        if (!this.progressBadge || this.progressBadge.isCompleted) {
            this.progressBadge = new pendingTask_1.PendingTask();
        }
        return this.progressBadge.waiter;
    }
    // Leave viewId undefined to remove the badge from all views
    setLoadingBadge(value) {
        this.shouldShowProgressBadge = value;
        if (value) {
            // Using closure on this to allow partial binding in arbitrary positions
            // eslint-disable-next-line @typescript-eslint/no-this-alias
            const self = this;
            vscode.window
                .withProgress({ location: { viewId: views_1.SNYK_VIEW_WELCOME } }, () => self.getProgressBadgePromise())
                .then(() => undefined, error => errorReporter_1.ErrorReporter.capture(error));
        }
        else if (this.progressBadge && !this.progressBadge.isCompleted) {
            this.progressBadge.complete();
        }
    }
}
exports.LoadingBadge = LoadingBadge;
//# sourceMappingURL=loadingBadge.js.map