"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeaturesViewProvider = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
const vscode = __importStar(require("vscode"));
const instance_1 = require("../../../common/configuration/instance");
const views_1 = require("../../../common/constants/views");
const nonce_1 = require("../../../common/views/nonce");
var FeaturesViewEventMessageType;
(function (FeaturesViewEventMessageType) {
    FeaturesViewEventMessageType["FeaturesSelected"] = "featuresSelected";
})(FeaturesViewEventMessageType || (FeaturesViewEventMessageType = {}));
class FeaturesViewProvider {
    constructor(_extensionUri, contextService) {
        this._extensionUri = _extensionUri;
        this.contextService = contextService;
    }
    resolveWebviewView(webviewView, _context, _token) {
        this.view = webviewView;
        webviewView.webview.options = {
            // Allow scripts in the webview
            enableScripts: true,
            localResourceRoots: [this._extensionUri],
        };
        webviewView.webview.html = this.getHtmlForWebview(webviewView.webview);
        webviewView.webview.onDidReceiveMessage(async (data) => {
            switch (data.type) {
                case FeaturesViewEventMessageType.FeaturesSelected: {
                    await instance_1.configuration.setFeaturesConfiguration(data.value);
                    await this.contextService.setContext(views_1.SNYK_CONTEXT.FEATURES_SELECTED, true);
                    break;
                }
            }
        });
    }
    getWebView() {
        return this.view;
    }
    getHtmlForWebview(webview) {
        const scriptUri = this.getWebViewUri('out', 'snyk', 'base', 'views', 'featureSelection', 'featuresViewScript.js');
        const styleVSCodeUri = this.getWebViewUri('media', 'views', 'common', 'vscode.css');
        const styleUri = this.getWebViewUri('media', 'views', 'featureSelection', 'featureSelection.css');
        const avatarUri = this.getWebViewUri('media', 'images', 'avatar-transparent.svg');
        // Use a nonce to only allow a specific script to be run.
        const nonce = (0, nonce_1.getNonce)();
        return `<!DOCTYPE html>
			<html lang="en">
			<head>
				<meta charset="UTF-8">

				<!--
					Use a content security policy to only allow loading images from https or from our extension directory,
					and only allow scripts that have a specific nonce.
				-->
				<meta http-equiv="Content-Security-Policy" content="default-src 'none'; style-src ${webview.cspSource}; img-src ${webview.cspSource} https:; script-src 'nonce-${nonce}';">

				<meta name="viewport" content="width=device-width, initial-scale=1.0">

				<link href="${styleVSCodeUri}" rel="stylesheet">
				<link href="${styleUri}" rel="stylesheet">
			</head>
			<body>
        <div class="welcome">
          <img src="${avatarUri}" class="avatar" />
          <p>Let's start analyzing your code</p>
        </div>

        <div class="checkbox">
          <input type="checkbox" id="codeSecurityEnabled" name="codeSecurityEnabled" checked>
          <label for="codeSecurityEnabled">Snyk Code Security</label>
        </div>
        <div class="checkbox">
          <input type="checkbox" id="codeQualityEnabled" name="codeQualityEnabled">
          <label for="codeQualityEnabled">Snyk Code Quality</label>
        </div>

				<button class="analyze-button">Analyze now!</button>

				<script nonce="${nonce}" src="${scriptUri}"></script>
			</body>
			</html>`;
    }
    getWebViewUri(...pathSegments) {
        var _a;
        return (_a = this.view) === null || _a === void 0 ? void 0 : _a.webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, ...pathSegments));
    }
}
exports.FeaturesViewProvider = FeaturesViewProvider;
//# sourceMappingURL=featuresViewProvider.js.map