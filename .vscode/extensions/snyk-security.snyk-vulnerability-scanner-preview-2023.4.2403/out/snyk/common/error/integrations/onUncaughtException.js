"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OnUncaughtException = void 0;
const core_1 = require("@sentry/core");
const types_1 = require("@sentry/types");
/** Uncaught exception handler based on the Sentry Node.js global handler:
 * https://github.dev/getsentry/sentry-javascript/blob/a565aaaeff6ede4bf2ca75b55f919df2c059415b/packages/node/src/integrations/onuncaughtexception.ts#L1-L129.
 * The handler tracks uncaught errors and captures only the ones that have extension path as part of the error stacktrace, since VS Code extensions are running in separate folders on the file system.
 */
class OnUncaughtException {
    /**
     * @inheritDoc
     */
    constructor(options) {
        this.options = options;
        /**
         * @inheritDoc
         */
        this.name = OnUncaughtException.id;
        /**
         * @inheritDoc
         */
        this.handler = this.makeErrorHandler();
    }
    /**
     * @inheritDoc
     */
    setupOnce() {
        global.process.on('uncaughtException', (error) => this.handler(error));
    }
    isExtensionOriginError(error) {
        const extensionTraceRegex = new RegExp(this.options.extensionPath, 'gi');
        if (error && error instanceof Error && error.stack && extensionTraceRegex.exec(error.stack)) {
            // The error doesn't belong to Snyk extension, ignore it
            return true;
        }
        return false;
    }
    /**
     * @hidden
     */
    makeErrorHandler() {
        return (error) => {
            if (!this.isExtensionOriginError(error)) {
                return;
            }
            const hub = (0, core_1.getCurrentHub)();
            if (hub.getIntegration(OnUncaughtException)) {
                hub.withScope((scope) => {
                    scope.setLevel(types_1.Severity.fromString('fatal'));
                    hub.captureException(error, {
                        originalException: error,
                        data: { mechanism: { handled: false, type: 'onuncaughtexception' } },
                    });
                });
            }
        };
    }
}
exports.OnUncaughtException = OnUncaughtException;
/**
 * @inheritDoc
 */
OnUncaughtException.id = 'OnSnykUncaughtException';
//# sourceMappingURL=onUncaughtException.js.map