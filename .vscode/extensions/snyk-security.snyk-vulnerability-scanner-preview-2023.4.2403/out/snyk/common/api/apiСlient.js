"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SnykApiClient = void 0;
const axios_1 = __importDefault(require("axios"));
const instance_1 = require("../configuration/instance");
const proxy_1 = require("../proxy");
const headers_1 = require("./headers");
class SnykApiClient {
    constructor(configuration, workspace, logger) {
        this.configuration = configuration;
        this.workspace = workspace;
        this.logger = logger;
        this.instance = null;
    }
    get http() {
        return this.instance != null ? this.instance : this.initHttp();
    }
    async initHttp() {
        const axiosRequestConfig = {
            headers: headers_1.DEFAULT_API_HEADERS,
            responseType: 'json',
            ...(await (0, proxy_1.getAxiosConfig)(this.workspace, this.configuration, this.logger)),
        };
        const http = axios_1.default.create(axiosRequestConfig);
        http.interceptors.response.use(response => response, async (error) => {
            var _a;
            if (((_a = error.response) === null || _a === void 0 ? void 0 : _a.status) === 401) {
                await instance_1.configuration.clearToken();
                this.logger.warn('Call to Snyk API failed - Invalid token');
                return;
            }
            this.logger.error(`Call to Snyk API failed: ${error}`);
            return Promise.reject(error);
        });
        this.instance = Promise.resolve(http);
        return http;
    }
    async get(url, config) {
        return (await this.http).get(url, await this.getRequestConfigWithAuth(config));
    }
    async post(url, data, config) {
        return (await this.http).post(url, data, await this.getRequestConfigWithAuth(config));
    }
    async getRequestConfigWithAuth(config) {
        const token = await this.configuration.getToken();
        return {
            ...config,
            baseURL: `${this.configuration.authHost}/api/`,
            headers: {
                ...config === null || config === void 0 ? void 0 : config.headers,
                Authorization: `token ${token}`,
            },
        };
    }
}
exports.SnykApiClient = SnykApiClient;
//# sourceMappingURL=api%D0%A1lient.js.map