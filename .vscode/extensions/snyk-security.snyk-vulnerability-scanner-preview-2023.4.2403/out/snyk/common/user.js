"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.User = void 0;
const crypto = __importStar(require("crypto"));
const uuid_1 = require("uuid");
const globalState_1 = require("./constants/globalState");
const errorReporter_1 = require("./error/errorReporter");
class User {
    constructor(anonymousId, authenticatedId) {
        this.anonymousId = anonymousId !== null && anonymousId !== void 0 ? anonymousId : (0, uuid_1.v4)();
        this._authenticatedId = authenticatedId !== null && authenticatedId !== void 0 ? authenticatedId : undefined;
    }
    static async getAnonymous(context) {
        let anonymousId = context.getGlobalStateValue(globalState_1.MEMENTO_ANONYMOUS_ID);
        if (!anonymousId) {
            anonymousId = (0, uuid_1.v4)();
            await context.updateGlobalStateValue(globalState_1.MEMENTO_ANONYMOUS_ID, anonymousId);
        }
        return new User(anonymousId);
    }
    get authenticatedId() {
        return this._authenticatedId;
    }
    get hashedAuthenticatedId() {
        if (!this._authenticatedId) {
            return undefined;
        }
        return crypto.createHash('sha256').update(this._authenticatedId).digest('hex');
    }
    async identify(apiClient, analytics) {
        const user = await this.userMe(apiClient);
        if (user && user.id) {
            this._authenticatedId = user.id;
            await analytics.identify(this._authenticatedId); // map the anonymousId onto authenticatedId
            errorReporter_1.ErrorReporter.identify(this);
        }
    }
    async userMe(api) {
        const response = await api.get('/user/me');
        if (!response)
            return;
        return response.data;
    }
}
exports.User = User;
//# sourceMappingURL=user.js.map