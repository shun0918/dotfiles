"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isValidModuleName = exports.getSupportedLanguage = void 0;
const validate_npm_package_name_1 = __importDefault(require("validate-npm-package-name"));
const languageConsts_1 = require("./constants/languageConsts");
const nativeModules_1 = __importDefault(require("./constants/nativeModules"));
const types_1 = require("./types");
function getSupportedLanguage(fileName, languageId) {
    if (languageId === languageConsts_1.TYPESCRIPT || languageId === languageConsts_1.TYPESCRIPT_REACT || languageConsts_1.TYPESCRIPT_FILE_REGEX.test(fileName)) {
        return types_1.Language.TypeScript;
    }
    else if (languageId === languageConsts_1.JAVASCRIPT || languageId === languageConsts_1.JAVASCRIPT_REACT || languageConsts_1.JAVASCRIPT_FILE_REGEX.test(fileName)) {
        return types_1.Language.JavaScript;
    }
    else if (languageId === languageConsts_1.HTML || languageConsts_1.HTML_FILE_REGEX.test(fileName)) {
        return types_1.Language.HTML;
    }
    else if (languageId === languageConsts_1.PJSON && fileName.endsWith('package.json')) {
        return types_1.Language.PJSON;
    }
    return null;
}
exports.getSupportedLanguage = getSupportedLanguage;
function isValidModuleName(module) {
    const moduleName = module.name;
    if (nativeModules_1.default.includes(moduleName.toLowerCase())) {
        return false;
    }
    if (moduleName.trim() == '' || /^[.~]/.test(moduleName)) {
        return false;
    }
    if (moduleName.includes('/') && !moduleName.startsWith('@')) {
        const newName = module.name.split('/').shift();
        if (newName) {
            // mutatingâ€¦
            module.name = newName;
        }
        else {
            return false;
        }
    }
    const valid = (0, validate_npm_package_name_1.default)(module.name);
    if (valid.errors) {
        // invalid package name, so isn't real, so we'll bail
        return false;
    }
    return true;
}
exports.isValidModuleName = isValidModuleName;
//# sourceMappingURL=parsing.js.map