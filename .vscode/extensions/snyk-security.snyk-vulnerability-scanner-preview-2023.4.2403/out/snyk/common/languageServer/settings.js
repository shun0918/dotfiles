"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LanguageServerSettings = void 0;
const lodash_1 = __importDefault(require("lodash"));
const experimentService_1 = require("../experiment/services/experimentService");
class LanguageServerSettings {
    static async fromConfiguration(configuration, experimentService) {
        const featuresConfiguration = configuration.getFeaturesConfiguration();
        const iacEnabled = lodash_1.default.isUndefined(featuresConfiguration.iacEnabled) ? true : featuresConfiguration.iacEnabled;
        let codeSecurityEnabled = lodash_1.default.isUndefined(featuresConfiguration.codeSecurityEnabled)
            ? true
            : featuresConfiguration.codeSecurityEnabled;
        let codeQualityEnabled = lodash_1.default.isUndefined(featuresConfiguration.codeQualityEnabled)
            ? true
            : featuresConfiguration.codeQualityEnabled;
        const codeScansViaLs = await experimentService.isUserPartOfExperiment(experimentService_1.ExperimentKey.CodeScansViaLanguageServer);
        if (!codeScansViaLs) {
            codeSecurityEnabled = false;
            codeQualityEnabled = false;
        }
        return {
            activateSnykCodeSecurity: `${codeSecurityEnabled}`,
            activateSnykCodeQuality: `${codeQualityEnabled}`,
            activateSnykOpenSource: 'false',
            activateSnykIac: `${iacEnabled}`,
            enableTelemetry: `${configuration.shouldReportEvents}`,
            sendErrorReports: `${configuration.shouldReportErrors}`,
            cliPath: configuration.getCliPath(),
            endpoint: configuration.snykOssApiEndpoint,
            additionalParams: configuration.getAdditionalCliParameters(),
            organization: configuration.organization,
            token: await configuration.getToken(),
            manageBinariesAutomatically: `${configuration.isAutomaticDependencyManagementEnabled()}`,
            filterSeverity: configuration.severityFilter,
            enableTrustedFoldersFeature: 'true',
            trustedFolders: configuration.getTrustedFolders(),
            insecure: `${configuration.getInsecure()}`,
            scanningMode: configuration.scanningMode,
        };
    }
}
exports.LanguageServerSettings = LanguageServerSettings;
//# sourceMappingURL=settings.js.map