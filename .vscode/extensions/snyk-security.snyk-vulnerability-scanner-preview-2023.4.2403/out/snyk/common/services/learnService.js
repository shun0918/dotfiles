"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LearnService = void 0;
const axios_1 = __importDefault(require("axios"));
const types_1 = require("../../common/commands/types");
const general_1 = require("../../common/constants/general");
const errorHandler_1 = require("../error/errorHandler");
class LearnService {
    constructor(configuration, logger, shouldCacheRequests = true) {
        this.configuration = configuration;
        this.logger = logger;
        this.shouldCacheRequests = shouldCacheRequests;
        this.lessonsCache = new Map();
    }
    // TODO: remove when Code results come from LS
    static getCodeIssueParamsOld(issue) {
        const idParts = issue.id.split(/\/|%2F/g);
        return {
            rule: idParts[idParts.length - 1],
            ecosystem: idParts[0],
            cwes: issue.cwe,
        };
    }
    static getCodeIssueParams(issue) {
        const idParts = issue.additionalData.ruleId.split(/\/|%2F/g);
        return {
            rule: idParts[idParts.length - 1],
            ecosystem: idParts[0],
            cwes: issue.additionalData.cwe,
        };
    }
    static getOSSIssueParams(issue) {
        var _a, _b;
        return {
            rule: issue.id,
            ecosystem: issue.packageManager,
            cwes: (_a = issue.identifiers) === null || _a === void 0 ? void 0 : _a.CWE,
            cves: (_b = issue.identifiers) === null || _b === void 0 ? void 0 : _b.CVE,
        };
    }
    async requestLessons(params) {
        var _a, _b;
        const cacheResult = this.lessonsCache.get(params.rule);
        if (this.shouldCacheRequests && cacheResult && (cacheResult === null || cacheResult === void 0 ? void 0 : cacheResult.expiry) > Date.now()) {
            return cacheResult.lessons;
        }
        else {
            const res = await axios_1.default.get('/lessons/lookup-for-cta', {
                baseURL: this.snykLearnEndpoint,
                params: {
                    source: 'ide',
                    rule: params.rule,
                    ecosystem: params.ecosystem,
                    cwe: (_a = params.cwes) === null || _a === void 0 ? void 0 : _a[0],
                    cve: (_b = params.cves) === null || _b === void 0 ? void 0 : _b[0],
                },
            });
            const lessons = res.data.lessons;
            this.lessonsCache.set(params.rule, {
                lessons,
                expiry: Date.now() + general_1.SNYK_LEARN_API_CACHE_DURATION_IN_MS,
            });
            return lessons;
        }
    }
    async getLesson(issue, issueType) {
        try {
            let params = null;
            if ((0, types_1.isCodeIssueOld)(issue, issueType)) {
                if (!issue.isSecurityType)
                    return null;
                params = LearnService.getCodeIssueParamsOld(issue);
            }
            else if ((0, types_1.isCodeIssue)(issue, issueType)) {
                if (!issue.additionalData.isSecurityType)
                    return null;
                params = LearnService.getCodeIssueParams(issue);
            }
            else if ((0, types_1.isOssIssue)(issue, issueType)) {
                // Snyk Learn does not currently deal with licensing issues.
                if (issue.license)
                    return null;
                params = LearnService.getOSSIssueParams(issue);
            }
            else {
                errorHandler_1.ErrorHandler.handle(new Error(`Issue type "${issueType}" not supported`), this.logger);
                return null;
            }
            if (!params) {
                return null;
            }
            const lessons = await this.requestLessons(params);
            if (!lessons.length) {
                return null;
            }
            else {
                const lesson = lessons[0];
                const lessonURL = new URL(lesson.url);
                lessonURL.searchParams.set('loc', 'ide');
                return { ...lesson, url: lessonURL.toString() };
            }
            return lessons.length > 0 ? lessons[0] : null;
        }
        catch (err) {
            errorHandler_1.ErrorHandler.handle(err, this.logger, 'Error getting Snyk Learn Lesson');
            return null;
        }
    }
    get snykLearnEndpoint() {
        return `${this.configuration.baseApiUrl}/v1/learn`;
    }
}
exports.LearnService = LearnService;
//# sourceMappingURL=learnService.js.map