"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnalysisTreeNodeProvider = void 0;
const lodash_1 = __importDefault(require("lodash"));
const path = __importStar(require("path"));
const commands_1 = require("../constants/commands");
const analysisMessages_1 = require("../messages/analysisMessages");
const treeNode_1 = require("./treeNode");
const treeNodeProvider_1 = require("./treeNodeProvider");
class AnalysisTreeNodeProvider extends treeNodeProvider_1.TreeNodeProvider {
    constructor(configuration, statusProvider) {
        super();
        this.configuration = configuration;
        this.statusProvider = statusProvider;
        this.compareNodes = (n1, n2) => {
            if (!n1.internal.isError && n2.internal.isError) {
                return 1;
            }
            else if (n1.internal.isError && !n2.internal.isError) {
                return -1;
            }
            if (!lodash_1.default.isUndefined(n1.internal.severity) && !lodash_1.default.isUndefined(n2.internal.severity)) {
                if (n2.internal.severity - n1.internal.severity)
                    return n2.internal.severity - n1.internal.severity;
            }
            if (!lodash_1.default.isUndefined(n1.internal.nIssues) && !lodash_1.default.isUndefined(n2.internal.nIssues)) {
                if (n2.internal.nIssues - n1.internal.nIssues)
                    return n2.internal.nIssues - n1.internal.nIssues;
            }
            if (n1.label && n2.label) {
                if (n1.label < n2.label)
                    return -1;
                if (n1.label > n2.label)
                    return 1;
            }
            if (n1.description && n2.description) {
                if (n1.description < n2.description)
                    return -1;
                if (n1.description > n2.description)
                    return 1;
            }
            return 0;
        };
    }
    getDurationTreeNode() {
        const ts = new Date(this.statusProvider.lastAnalysisTimestamp);
        const time = ts.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        const day = ts.toLocaleDateString([], { year: '2-digit', month: '2-digit', day: '2-digit' });
        return new treeNode_1.TreeNode({
            text: analysisMessages_1.messages.duration(time, day),
        });
    }
    getNoSeverityFiltersSelectedTreeNode() {
        const anyFilterEnabled = Object.values(this.configuration.severityFilter).find(enabled => !!enabled);
        if (anyFilterEnabled) {
            return null;
        }
        return new treeNode_1.TreeNode({
            text: analysisMessages_1.messages.allSeverityFiltersDisabled,
        });
    }
    getErrorEncounteredTreeNode(scanPath) {
        return new treeNode_1.TreeNode({
            icon: treeNode_1.NODE_ICONS.error,
            text: scanPath ? path.basename(scanPath) : analysisMessages_1.messages.scanFailed,
            description: analysisMessages_1.messages.clickToProblem,
            internal: {
                isError: true,
            },
            command: {
                command: commands_1.SNYK_SHOW_LS_OUTPUT_COMMAND,
                title: '',
            },
        });
    }
    getNoWorkspaceTrustTreeNode() {
        return new treeNode_1.TreeNode({
            text: analysisMessages_1.messages.noWorkspaceTrust,
            command: {
                command: commands_1.SNYK_SHOW_LS_OUTPUT_COMMAND,
                title: '',
            },
        });
    }
}
exports.AnalysisTreeNodeProvider = AnalysisTreeNodeProvider;
//# sourceMappingURL=analysisTreeNodeProvider.js.map