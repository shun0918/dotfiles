"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebviewProvider = void 0;
const vscode = __importStar(require("vscode"));
const logger_1 = require("../logger/logger");
class WebviewProvider {
    constructor(context, logger) {
        this.context = context;
        this.logger = logger;
        this.disposables = [];
    }
    getWebViewUri(...pathSegments) {
        var _a;
        return (_a = this.panel) === null || _a === void 0 ? void 0 : _a.webview.asWebviewUri(vscode.Uri.joinPath(this.context.getExtensionUri(), ...pathSegments));
    }
    restorePanel(panel) {
        if (this.panel)
            this.panel.dispose();
        this.panel = panel;
        this.registerListeners();
        this.panel.webview.html = this.getHtmlForWebview(this.panel.webview);
    }
    async focusSecondEditorGroup() {
        // workaround for: https://github.com/microsoft/vscode/issues/71608
        // when resolved, we can set showPanel back to sync execution.
        await vscode.commands.executeCommand('workbench.action.focusSecondEditorGroup');
    }
    getWebviewOptions() {
        return {
            localResourceRoots: [this.context.getExtensionUri()],
            enableScripts: true,
        };
    }
    disposePanel() {
        if (this.panel)
            this.panel.dispose();
    }
    onPanelDispose() {
        this.panel = undefined;
        while (this.disposables.length) {
            const disposable = this.disposables.pop();
            if (disposable) {
                disposable.dispose();
            }
        }
    }
    async checkVisibility() {
        if (this.panel && this.panel.visible) {
            try {
                await this.panel.webview.postMessage({ type: 'get' });
                await this.panel.webview.postMessage({ type: 'getLesson' });
            }
            catch (e) {
                if (!this.panel)
                    return; // can happen due to asynchronicity, ignore such cases
                logger_1.Logger.error(`Failed to restore the '${this.panel.title}' webview.`);
            }
        }
    }
}
exports.WebviewProvider = WebviewProvider;
//# sourceMappingURL=webviewProvider.js.map