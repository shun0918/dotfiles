"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdvisorApiClient = void 0;
const axios_1 = __importDefault(require("axios"));
const headers_1 = require("../../common/api/headers");
class AdvisorApiClient {
    constructor(configuration, logger) {
        this.configuration = configuration;
        this.logger = logger;
        this.instance = null;
        this.advisorBaseUrl = 'https://snyk.io/advisor';
        this.apiPath = `/unstable/advisor/scores/npm-package`;
    }
    getAdvisorUrl(registry) {
        return `${this.advisorBaseUrl}/${registry}`;
    }
    get http() {
        return this.instance != null ? this.instance : this.initHttp();
    }
    initHttp() {
        const http = axios_1.default.create({
            headers: headers_1.DEFAULT_API_HEADERS,
            responseType: 'json',
        });
        http.interceptors.response.use(response => response, (error) => {
            this.logger.error(`Call to Advisor API failed: ${error.message}`);
            return Promise.reject(error);
        });
        this.instance = http;
        return http;
    }
    async post(url, data, config) {
        const token = await this.configuration.getToken();
        this.http.interceptors.request.use(req => {
            req.baseURL = this.configuration.baseApiUrl;
            req.headers = {
                ...req.headers,
                Authorization: `token ${token}`,
            };
            return req;
        });
        return this.http.post(url, data, config);
    }
}
exports.AdvisorApiClient = AdvisorApiClient;
//# sourceMappingURL=advisorApiClient.js.map