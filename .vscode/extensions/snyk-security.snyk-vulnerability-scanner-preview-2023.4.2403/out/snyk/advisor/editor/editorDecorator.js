"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const editorDecorator_1 = require("../../common/editor/editorDecorator");
const messages_1 = require("../messages/messages");
const { SCORE_PREFIX } = messages_1.messages;
class EditorDecorator {
    constructor(window, languages, themeColorAdapter, advisorApiClient, hoverAdapter, markdownStringAdapter) {
        this.window = window;
        this.languages = languages;
        this.themeColorAdapter = themeColorAdapter;
        this.advisorApiClient = advisorApiClient;
        this.hoverAdapter = hoverAdapter;
        this.markdownStringAdapter = markdownStringAdapter;
        this.editorLastCharacterIndex = Number.MAX_SAFE_INTEGER;
        this.fileDecorationLines = new Map();
        this.decorationType = this.window.createTextEditorDecorationType({
            after: { margin: '0 0 0 1rem' },
        });
    }
    addScoresDecorations(filePath, packageScore, line, decorations = []) {
        var _a;
        if (!packageScore) {
            return;
        }
        decorations[line] = {
            range: this.languages.createRange(line - 1, this.editorLastCharacterIndex, line - 1, this.editorLastCharacterIndex),
            renderOptions: (0, editorDecorator_1.getRenderOptions)(`${SCORE_PREFIX} ${Math.round(packageScore.score * 100)}/100`, this.themeColorAdapter),
            hoverMessage: (_a = this.getHoverMessage(packageScore)) === null || _a === void 0 ? void 0 : _a.contents,
        };
        this.fileDecorationLines.set(filePath, decorations);
        (0, editorDecorator_1.updateDecorations)(this.window, filePath, decorations, this.decorationType);
    }
    getHoverMessage(score) {
        if (!score) {
            return null;
        }
        const hoverMessageMarkdown = this.markdownStringAdapter.get(``);
        hoverMessageMarkdown.isTrusted = true;
        const hoverMessage = this.hoverAdapter.create(hoverMessageMarkdown);
        hoverMessageMarkdown.appendMarkdown('| |  | |  |');
        hoverMessageMarkdown.appendMarkdown('\n');
        hoverMessageMarkdown.appendMarkdown('| ---- | ---- | ---- |  :---- |');
        hoverMessageMarkdown.appendMarkdown('\n');
        Object.keys(score.labels).forEach(label => {
            hoverMessageMarkdown.appendMarkdown(`| ${label}: | | | ${score === null || score === void 0 ? void 0 : score.labels[label]} |`);
            hoverMessageMarkdown.appendMarkdown('\n');
        });
        hoverMessageMarkdown.appendMarkdown(`[More Details](${this.advisorApiClient.getAdvisorUrl('npm-package')}/${score.name})`);
        return hoverMessage;
    }
    resetDecorations(filePath) {
        const decorations = this.fileDecorationLines.get(filePath);
        if (!decorations) {
            return;
        }
        const emptyDecorations = decorations.map(d => ({
            ...d,
            renderOptions: (0, editorDecorator_1.getRenderOptions)('', this.themeColorAdapter),
        }));
        (0, editorDecorator_1.updateDecorations)(this.window, filePath, emptyDecorations, this.decorationType);
    }
}
exports.default = EditorDecorator;
//# sourceMappingURL=editorDecorator.js.map