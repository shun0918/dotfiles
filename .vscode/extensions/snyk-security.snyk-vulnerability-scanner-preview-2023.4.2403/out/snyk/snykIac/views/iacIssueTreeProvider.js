"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("../../common/commands/types");
const instance_1 = require("../../common/configuration/instance");
const commands_1 = require("../../common/constants/commands");
const views_1 = require("../../common/constants/views");
const issueTreeProvider_1 = require("../../common/views/issueTreeProvider");
const treeNode_1 = require("../../common/views/treeNode");
const issue_1 = require("../issue");
const analysis_1 = require("../messages/analysis");
class IacIssueTreeProvider extends issueTreeProvider_1.ProductIssueTreeProvider {
    constructor(viewManagerService, contextService, iacService, configuration, languages) {
        super(contextService, iacService, configuration, languages);
        this.viewManagerService = viewManagerService;
        this.contextService = contextService;
        this.iacService = iacService;
        this.configuration = configuration;
        this.languages = languages;
        this.onDidChangeTreeData = this.viewManagerService.refreshIacViewEmitter.event;
        this.getRunTestMessage = () => analysis_1.messages.runTest;
        this.getIssueTitle = (issue) => issue.title;
    }
    getRootChildren() {
        var _a;
        if (!((_a = instance_1.configuration.getFeaturesConfiguration()) === null || _a === void 0 ? void 0 : _a.iacEnabled)) {
            return [
                new treeNode_1.TreeNode({
                    text: views_1.SNYK_ANALYSIS_STATUS.IAC_DISABLED,
                }),
            ];
        }
        return super.getRootChildren();
    }
    shouldShowTree() {
        return this.contextService.shouldShowIacAnalysis;
    }
    getIssueDescriptionText(dir, issueCount) {
        return `${dir} - ${issueCount} ${issueCount === 1 ? 'issue' : 'issues'}`;
    }
    getIssueFoundText(nIssues) {
        return `Snyk found ${!nIssues ? 'no issues! âœ…' : `${nIssues} ${nIssues === 1 ? 'issue' : 'issues'}`}`;
    }
    filterIssues(issues) {
        return issues;
    }
    getIssueRange(issue) {
        return issue_1.IacIssue.getRange(issue, this.languages);
    }
    getOpenIssueCommand(issue, folderPath, filePath) {
        return {
            command: commands_1.SNYK_OPEN_ISSUE_COMMAND,
            title: '',
            arguments: [
                {
                    issueType: types_1.OpenCommandIssueType.IacIssue,
                    issue: {
                        id: issue.id,
                        folderPath,
                        filePath,
                        range: this.getIssueRange(issue),
                    },
                },
            ],
        };
    }
}
exports.default = IacIssueTreeProvider;
//# sourceMappingURL=iacIssueTreeProvider.js.map