"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IssueUtils = void 0;
const lodash_1 = __importDefault(require("lodash"));
class IssueUtils {
    static createVsCodeRangeFromRange(rows, cols, languages) {
        return languages.createRange(rows[0], cols[0], rows[1], cols[1]);
    }
}
exports.IssueUtils = IssueUtils;
IssueUtils.findIssueWithRange = (matchingRange, issuesList) => {
    return (issuesList &&
        issuesList.find((issue) => {
            return issue.range.contains(matchingRange);
        }));
};
IssueUtils.issueSeverityAsText = (severity) => {
    return lodash_1.default.startCase(severity);
};
// todo: remove with OSS integration
IssueUtils.severityAsText = (severity) => {
    switch (severity) {
        case 1:
            return 'Low';
        case 2:
            return 'Medium';
        case 3:
            return 'High';
        case 4:
            return 'Critical';
    }
};
IssueUtils.getIssueType = (isSecurityType) => {
    return isSecurityType ? 'Code Security Vulnerability' : 'Code Quality Issue';
};
IssueUtils.createCorrectIssuePlacement = (item) => {
    const rowOffset = 1;
    const createPosition = (i) => (i - rowOffset < 0 ? 0 : i - rowOffset);
    return {
        cols: {
            start: createPosition(item.cols[0]),
            end: item.cols[1],
        },
        rows: {
            start: createPosition(item.rows[0]),
            end: createPosition(item.rows[1]),
        },
    };
};
// Creates zero-based range
IssueUtils.createVsCodeRange = (issueData, languages) => {
    return IssueUtils.createVsCodeRangeFromRange(issueData.rows, issueData.cols, languages);
};
//# sourceMappingURL=issueUtils.js.map