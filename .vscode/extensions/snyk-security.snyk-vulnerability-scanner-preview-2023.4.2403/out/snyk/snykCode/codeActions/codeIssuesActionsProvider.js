"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SnykCodeActionsProvider = void 0;
const types_1 = require("../../common/commands/types");
const commands_1 = require("../../common/constants/commands");
const codeActionsProvider_1 = require("../../common/editor/codeActionsProvider");
const codeActionMessages_1 = require("../../common/messages/codeActionMessages");
const analysis_1 = require("../constants/analysis");
const issueUtils_1 = require("../utils/issueUtils");
class SnykCodeActionsProvider extends codeActionsProvider_1.CodeActionsProvider {
    constructor(issues, codeActionAdapter, codeActionKindAdapter, languages, analytics) {
        super(issues, codeActionKindAdapter, analytics);
        this.codeActionAdapter = codeActionAdapter;
        this.languages = languages;
    }
    getActions(folderPath, document, issue, range) {
        const openIssueAction = this.createOpenIssueAction(folderPath, issue, range);
        const ignoreIssueAction = this.createIgnoreIssueAction(document, issue, range, false);
        const fileIgnoreIssueAction = this.createIgnoreIssueAction(document, issue, range, true);
        // returns list of actions, all new actions should be added to this list
        return [openIssueAction, ignoreIssueAction, fileIgnoreIssueAction];
    }
    getAnalyticsActionTypes() {
        return ['Show Suggestion', 'Ignore Suggestion In Line', 'Ignore Suggestion In File'];
    }
    getIssueRange(issue) {
        return issueUtils_1.IssueUtils.createVsCodeRange(issue.additionalData, this.languages);
    }
    createIgnoreIssueAction(document, issue, range, isFileIgnore) {
        const actionName = isFileIgnore ? analysis_1.FILE_IGNORE_ACTION_NAME : analysis_1.IGNORE_ISSUE_ACTION_NAME;
        const ignoreAction = this.codeActionAdapter.create(actionName, this.providedCodeActionKinds[0]);
        const matchedIssue = {
            range: range,
        };
        const ruleId = issue.additionalData.rule;
        ignoreAction.command = {
            command: commands_1.SNYK_IGNORE_ISSUE_COMMAND,
            title: commands_1.SNYK_IGNORE_ISSUE_COMMAND,
            arguments: [{ uri: document.uri, matchedIssue, ruleId, isFileIgnore }],
        };
        return ignoreAction;
    }
    createOpenIssueAction(folderPath, issue, issueRange) {
        const openIssueAction = this.codeActionAdapter.create(codeActionMessages_1.codeActionMessages.showSuggestion, this.providedCodeActionKinds[0]);
        openIssueAction.command = {
            command: commands_1.SNYK_OPEN_ISSUE_COMMAND,
            title: commands_1.SNYK_OPEN_ISSUE_COMMAND,
            arguments: [
                {
                    issueType: types_1.OpenCommandIssueType.CodeIssue,
                    issue: {
                        id: issue.id,
                        folderPath,
                        filePath: issue.filePath,
                        range: issueRange,
                    },
                },
            ],
        };
        return openIssueAction;
    }
}
exports.SnykCodeActionsProvider = SnykCodeActionsProvider;
//# sourceMappingURL=codeIssuesActionsProvider.js.map