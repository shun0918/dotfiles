"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DisposableCodeActionsProvider = void 0;
/* eslint-disable @typescript-eslint/ban-types */
const vscode = __importStar(require("vscode"));
const codeAction_1 = require("../../common/vscode/codeAction");
const issuesActionsProviderOld_1 = require("./issuesActionsProviderOld");
class DisposableCodeActionsProvider {
    constructor(snykReview, callbacks, analytics) {
        this.analytics = analytics;
        this.registerProvider(snykReview, callbacks);
    }
    registerProvider(snykReview, callbacks) {
        const provider = new issuesActionsProviderOld_1.SnykIssuesActionProviderOld(snykReview, callbacks, new codeAction_1.CodeActionAdapter(), new codeAction_1.CodeActionKindAdapter(), this.analytics);
        this.disposableProvider = vscode.languages.registerCodeActionsProvider({ scheme: 'file', language: '*' }, provider, {
            providedCodeActionKinds: provider.getProvidedCodeActionKinds(),
        });
    }
    dispose() {
        if (this.disposableProvider) {
            this.disposableProvider.dispose();
        }
    }
}
exports.DisposableCodeActionsProvider = DisposableCodeActionsProvider;
//# sourceMappingURL=disposableCodeActionsProvider.js.map