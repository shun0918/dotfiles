"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IgnoreCommand = void 0;
const lodash_1 = __importDefault(require("lodash"));
const vscode = __importStar(require("vscode"));
const commands_1 = require("../../common/constants/commands");
const general_1 = require("../../common/constants/general");
const analysis_1 = require("../constants/analysis");
const analysisUtils_1 = require("../utils/analysisUtils");
class IgnoreCommand {
    static addSpacesToText(text = '', spacesCount = 0) {
        if (!spacesCount) {
            return text;
        }
        while (spacesCount) {
            text += ` `;
            spacesCount -= 1;
        }
        return text;
    }
}
exports.IgnoreCommand = IgnoreCommand;
_a = IgnoreCommand;
IgnoreCommand.ignoreIssues = lodash_1.default.debounce(async ({ uri, matchedIssue, ruleId, isFileIgnore, }) => {
    const issueText = (0, analysisUtils_1.ignoreIssueCommentText)(ruleId, isFileIgnore);
    const editor = (uri &&
        (await vscode.window.showTextDocument(uri, {
            viewColumn: vscode.ViewColumn.One,
            selection: matchedIssue.range,
        }))) ||
        vscode.window.activeTextEditor;
    if (!editor || !issueText || !matchedIssue) {
        return;
    }
    const symbolIndexToInsert = editor.document.lineAt(matchedIssue.range.start.line).firstNonWhitespaceCharacterIndex;
    let issuePosition = new vscode.Position(matchedIssue.range.start.line, symbolIndexToInsert);
    let snykCommentPostition;
    if (issuePosition.line > 0) {
        const prevLineRange = new vscode.Range(new vscode.Position(issuePosition.line - 1, 0), new vscode.Position(issuePosition.line, 0));
        const prevLine = editor.document.getText(prevLineRange).split('\n').shift() || '';
        // We have 3 cases:
        // 1) prevLine doesn't include any dcignore line
        // 2) prevLine is a dcignore comment
        // 3) prevLine is a file dcignore comment
        if (prevLine.includes(analysis_1.IGNORE_ISSUE_BASE_COMMENT_TEXT)) {
            if (prevLine.includes(analysis_1.FILE_IGNORE_ISSUE_BASE_COMMENT_TEXT)) {
                // case number 3
                if (isFileIgnore)
                    snykCommentPostition = new vscode.Position(prevLineRange.start.line, prevLine.length);
                // if !isFileIgnore we want to write a new comment instead of adding to the previous one
            }
            else if (!isFileIgnore) {
                // case number 2
                snykCommentPostition = new vscode.Position(prevLineRange.start.line, prevLine.length);
            }
            else {
                // we want to write a new comment 2 lines above the issue
                issuePosition = issuePosition.with(issuePosition.line - 1);
            }
        }
    }
    if (snykCommentPostition) {
        const position = snykCommentPostition;
        // if deepcode ignore of issue already exists, paste next comment in same line after existing comment
        void editor.edit((e) => e.insert(position, `, ${issueText}`));
    }
    else {
        void editor.edit((e) => e.insert(issuePosition, IgnoreCommand.addSpacesToText(`${issueText}\n`, symbolIndexToInsert)));
    }
    editor.selections = [new vscode.Selection(issuePosition, issuePosition)];
    if (!snykCommentPostition) {
        await vscode.commands.executeCommand(commands_1.VSCODE_ADD_COMMENT_COMMAND);
    }
    await editor.document.save();
}, general_1.COMMAND_DEBOUNCE_INTERVAL, { leading: true, trailing: false });
//# sourceMappingURL=ignoreCommand.js.map