"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodeSecurityIssueTreeProviderOld = void 0;
const instance_1 = require("../../common/configuration/instance");
const views_1 = require("../../common/constants/views");
const treeNode_1 = require("../../common/views/treeNode");
const issueTreeProviderOld_1 = require("./issueTreeProviderOld");
class CodeSecurityIssueTreeProviderOld extends issueTreeProviderOld_1.IssueTreeProviderOld {
    constructor(viewManagerService, contextService, snykCode, configuration) {
        super(contextService, snykCode, snykCode.analyzer.codeSecurityReview, configuration);
        this.viewManagerService = viewManagerService;
        this.contextService = contextService;
        this.snykCode = snykCode;
        this.configuration = configuration;
        this.onDidChangeTreeData = this.viewManagerService.refreshOldCodeSecurityViewEmitter.event;
    }
    getRootChildren() {
        var _a;
        if (!((_a = instance_1.configuration.getFeaturesConfiguration()) === null || _a === void 0 ? void 0 : _a.codeSecurityEnabled)) {
            return [
                new treeNode_1.TreeNode({
                    text: views_1.SNYK_ANALYSIS_STATUS.CODE_SECURITY_DISABLED,
                }),
            ];
        }
        return super.getRootChildren();
    }
    getIssueDescriptionText(dir, diagnostics) {
        return `${dir} - ${diagnostics.length} ${diagnostics.length === 1 ? 'vulnerability' : 'vulnerabilities'}`;
    }
    getIssueFoundText(nIssues) {
        return `Snyk found ${!nIssues ? 'no vulnerabilities! âœ…' : `${nIssues} ${nIssues === 1 ? 'vulnerability' : 'vulnerabilities'}`}`;
    }
}
exports.CodeSecurityIssueTreeProviderOld = CodeSecurityIssueTreeProviderOld;
//# sourceMappingURL=securityIssueTreeProviderOld.js.map