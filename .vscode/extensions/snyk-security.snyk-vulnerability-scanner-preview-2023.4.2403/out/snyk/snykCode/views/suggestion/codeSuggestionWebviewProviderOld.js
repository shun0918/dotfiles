"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodeSuggestionWebviewProviderOld = void 0;
const vscode = __importStar(require("vscode"));
const types_1 = require("../../../common/commands/types");
const commands_1 = require("../../../common/constants/commands");
const views_1 = require("../../../common/constants/views");
const errorHandler_1 = require("../../../common/error/errorHandler");
const learn_1 = require("../../../common/messages/learn");
const nonce_1 = require("../../../common/views/nonce");
const webviewPanelSerializer_1 = require("../../../common/views/webviewPanelSerializer");
const webviewProvider_1 = require("../../../common/views/webviewProvider");
const analysis_1 = require("../../constants/analysis");
const error_1 = require("../../messages/error");
const analysisUtils_1 = require("../../utils/analysisUtils");
class CodeSuggestionWebviewProviderOld extends webviewProvider_1.WebviewProvider {
    constructor(configuration, analyzer, window, context, logger, languages, workspace, codeSettings, learnService) {
        super(context, logger);
        this.configuration = configuration;
        this.analyzer = analyzer;
        this.window = window;
        this.context = context;
        this.logger = logger;
        this.languages = languages;
        this.workspace = workspace;
        this.codeSettings = codeSettings;
        this.learnService = learnService;
    }
    activate() {
        this.context.addDisposables(this.window.registerWebviewPanelSerializer(views_1.SNYK_VIEW_SUGGESTION_CODE_OLD, new webviewPanelSerializer_1.WebviewPanelSerializer(this)));
    }
    show(suggestionId, uri, position) {
        const suggestion = this.analyzer.getFullSuggestion(suggestionId, uri, position);
        if (!suggestion) {
            this.disposePanel();
            return;
        }
        void this.showPanel(suggestion);
    }
    checkCurrentSuggestion() {
        if (!this.panel || !this.suggestion)
            return;
        const found = this.analyzer.checkFullSuggestion(this.suggestion);
        if (!found)
            this.disposePanel();
    }
    async postLearnLessonMessage(suggestion) {
        try {
            if (this.panel) {
                const lesson = await this.learnService.getLesson(suggestion, types_1.OpenCommandIssueType.CodeIssueOld);
                if (lesson) {
                    void this.panel.webview.postMessage({
                        type: 'setLesson',
                        args: { url: lesson.url, title: learn_1.messages.lessonButtonTitle },
                    });
                }
                else {
                    void this.panel.webview.postMessage({
                        type: 'setLesson',
                        args: null,
                    });
                }
            }
        }
        catch (e) {
            errorHandler_1.ErrorHandler.handle(e, this.logger, learn_1.messages.getLessonError);
        }
    }
    async showPanel(suggestion) {
        try {
            await this.focusSecondEditorGroup();
            if (this.panel) {
                this.panel.title = this.getTitle(suggestion);
                this.panel.reveal(vscode.ViewColumn.Two, true);
            }
            else {
                this.panel = vscode.window.createWebviewPanel(views_1.SNYK_VIEW_SUGGESTION_CODE_OLD, this.getTitle(suggestion), {
                    viewColumn: vscode.ViewColumn.Two,
                    preserveFocus: true,
                }, this.getWebviewOptions());
                this.registerListeners();
            }
            this.panel.webview.html = this.getHtmlForWebview(this.panel.webview);
            await this.panel.webview.postMessage({ type: 'set', args: suggestion });
            void this.postLearnLessonMessage(suggestion);
            this.suggestion = suggestion;
        }
        catch (e) {
            errorHandler_1.ErrorHandler.handle(e, this.logger, error_1.messages.suggestionViewShowFailed);
        }
    }
    registerListeners() {
        if (!this.panel)
            return;
        this.panel.onDidDispose(() => this.onPanelDispose(), null, this.disposables);
        this.panel.onDidChangeViewState(() => this.checkVisibility(), undefined, this.disposables);
        // Handle messages from the webview
        this.panel.webview.onDidReceiveMessage(msg => this.handleMessage(msg), undefined, this.disposables);
    }
    disposePanel() {
        super.disposePanel();
    }
    onPanelDispose() {
        super.onPanelDispose();
    }
    async handleMessage(message) {
        var _a;
        try {
            const { type, args } = message;
            switch (type) {
                case 'openLocal': {
                    const { uri, cols, rows, suggestionUri } = args;
                    const localUriPath = (0, analysisUtils_1.getAbsoluteMarkerFilePath)(this.workspace, uri, suggestionUri);
                    const localUri = vscode.Uri.file(localUriPath);
                    const range = (0, analysisUtils_1.createIssueCorrectRange)({ cols, rows }, this.languages);
                    await vscode.commands.executeCommand(commands_1.SNYK_OPEN_LOCAL_COMMAND, localUri, range);
                    break;
                }
                case 'openBrowser': {
                    const { url } = args;
                    await vscode.commands.executeCommand(commands_1.SNYK_OPEN_BROWSER_COMMAND, url);
                    break;
                }
                case 'ignoreIssue': {
                    // eslint-disable-next-line no-shadow
                    let { lineOnly, message, rule, uri, cols, rows } = args;
                    uri = vscode.Uri.parse(uri);
                    const range = (0, analysisUtils_1.createIssueCorrectRange)({ cols, rows }, this.languages);
                    await vscode.commands.executeCommand(commands_1.SNYK_IGNORE_ISSUE_COMMAND, {
                        uri,
                        matchedIssue: { message, range },
                        ruleId: rule,
                        isFileIgnore: !lineOnly,
                    });
                    (_a = this.panel) === null || _a === void 0 ? void 0 : _a.dispose();
                    break;
                }
                default: {
                    throw new Error('Unknown message type');
                }
            }
        }
        catch (e) {
            errorHandler_1.ErrorHandler.handle(e, this.logger, error_1.messages.suggestionViewMessageHandlingFailed(JSON.stringify(message)));
        }
    }
    getTitle(suggestion) {
        return suggestion.isSecurityType ? analysis_1.WEBVIEW_PANEL_SECURITY_TITLE : analysis_1.WEBVIEW_PANEL_QUALITY_TITLE;
    }
    getHtmlForWebview(webview) {
        const images = [
            ['icon-lines', 'svg'],
            ['icon-external', 'svg'],
            ['icon-code', 'svg'],
            ['icon-github', 'svg'],
            ['icon-like', 'svg'],
            ['dark-high-severity', 'svg'],
            ['dark-medium-severity', 'svg'],
            ['light-icon-critical', 'svg'],
            ['dark-low-severity', 'svg'],
            ['arrow-left-dark', 'svg'],
            ['arrow-right-dark', 'svg'],
            ['arrow-left-light', 'svg'],
            ['arrow-right-light', 'svg'],
            ['learn-icon', 'svg'],
        ].reduce((accumulator, [name, ext]) => {
            const uri = this.getWebViewUri('media', 'images', `${name}.${ext}`);
            if (!uri)
                throw new Error('Image missing.');
            accumulator[name] = uri.toString();
            return accumulator;
        }, {});
        const scriptUri = this.getWebViewUri('out', 'snyk', 'snykCode', 'views', 'suggestion', 'codeSuggestionWebviewScriptOld.js');
        const styleUri = this.getWebViewUri('media', 'views', 'snykCode', 'suggestion', 'suggestion.css');
        const styleVSCodeUri = this.getWebViewUri('media', 'views', 'common', 'vscode.css');
        const learnStyleUri = this.getWebViewUri('media', 'views', 'common', 'learn.css');
        const nonce = (0, nonce_1.getNonce)();
        return `
  <!DOCTYPE html>
  <html lang="en">
  <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <meta http-equiv="Content-Security-Policy" content="default-src 'none'; style-src ${webview.cspSource}; img-src ${webview.cspSource} https:; script-src 'nonce-${nonce}';">

      <link href="${styleUri}" rel="stylesheet">
      <link href="${styleVSCodeUri}" rel="stylesheet">
      <link href="${learnStyleUri}" rel="stylesheet">
  </head>
  <body>
      <div class="suggestion">
        <section id="suggestion-info">
          <div id="severity">
            <img id="sev1l" class="icon light-only hidden" src="${images['dark-low-severity']}" />
            <img id="sev1d" class="icon dark-only hidden" src="${images['dark-low-severity']}" />
            <img id="sev2l" class="icon light-only hidden" src="${images['dark-medium-severity']}" />
            <img id="sev2d" class="icon dark-only hidden" src="${images['dark-medium-severity']}" />
            <img id="sev3l" class="icon light-only hidden" src="${images['dark-high-severity']}" />
            <img id="sev3d" class="icon dark-only hidden" src="${images['dark-high-severity']}" />
            <span id="severity-text"></span>
          </div>
          <div id="title" class="suggestion-text"></div>
          <div class="suggestion-links">
            <div id="navigateToIssue" class="clickable">
              <img class="icon" src="${images['icon-lines']}" /> This <span class="issue-type">issue</span> happens on line <span id="line-position"></span>
            </div>
            <div id="lead-url" class="clickable hidden">
              <img class="icon" src="${images['icon-external']}" /> More info
            </div>
          </div>
          <div class="learn learn__code">
            <img class="icon" src="${images['learn-icon']}" />
            <a class="learn--link"></a>
          </div>
        </section>
        <section class="delimiter-top">
          <div id="info-top" class="font-light">
            This <span class="issue-type">issue</span> was fixed by <span id="dataset-number"></span> projects. Here are <span id="example-number"></span> example fixes.
          </div>
          <div id="info-no-examples" class="font-light">
            There are no example fixes for this issue.
          </div>
          <div id="example-top" class="row between">
            <div id="current-example" class="clickable">
              <img class="icon" src="${images['icon-github']}"></img>
              <span id="example-link"></span>
            </div>
            <div>
              <div id="previous-example" class="arrow">
                <img src=${images['arrow-left-dark']} class="arrow-icon dark-only"></img>
                <img src=${images['arrow-left-light']} class="arrow-icon light-only"></img>
              </div>
              <span id="example-text">
                Example <span id="example-counter">1</span>/<span id="example-number2"></span>
              </span>
              <div id="next-example" class="arrow">
                <img src=${images['arrow-right-dark']} class="arrow-icon dark-only"></img>
                <img src=${images['arrow-right-light']} class="arrow-icon light-only"></img>
              </div>
            </div>
          </div>
          <div id="example"></div>
        </section>
        <section class="delimiter-top">
          <div id="actions-section">
            <div class="actions row">
              <button id="ignore-line-issue" class="button">Ignore on line <span id="line-position2"></span></button>
              <button id="ignore-file-issue" class="button">Ignore in this file</button>
            </div>
          </div>
        </section>
      </div>
    <script nonce="${nonce}" src="${scriptUri}"></script>
  </body>
  </html>`;
    }
}
exports.CodeSuggestionWebviewProviderOld = CodeSuggestionWebviewProviderOld;
//# sourceMappingURL=codeSuggestionWebviewProviderOld.js.map