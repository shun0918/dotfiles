"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const code_client_1 = require("@snyk/code-client");
const errors_1 = require("../../common/messages/errors");
const analysis_1 = require("../constants/analysis");
const hoverProvider_1 = require("../hoverProvider/hoverProvider");
const analysisUtils_1 = require("../utils/analysisUtils");
class SnykCodeAnalyzer {
    constructor(logger, languages, workspace, analytics, errorHandler, uriAdapter, configuration) {
        this.logger = logger;
        this.languages = languages;
        this.workspace = workspace;
        this.analytics = analytics;
        this.errorHandler = errorHandler;
        this.uriAdapter = uriAdapter;
        this.configuration = configuration;
        this.disposables = [];
        this.diagnosticSuggestion = new Map();
        // Refreshes reported diagnostic
        this.refreshDiagnostics = () => this.createReviewResults();
        this.SEVERITIES = (0, analysisUtils_1.createSnykSeveritiesMap)();
        this.codeSecurityReview = this.languages.createDiagnosticCollection(analysis_1.DIAGNOSTICS_CODE_SECURITY_COLLECTION_NAME);
        this.codeQualityReview = this.languages.createDiagnosticCollection(analysis_1.DIAGNOSTICS_CODE_QUALITY_COLLECTION_NAME);
        this.disposables.push(this.codeSecurityReview, this.codeQualityReview);
    }
    registerCodeActionProviders(codeSecurityCodeActionsProvider, codeQualityCodeActionsProvider) {
        this.disposables.push(codeSecurityCodeActionsProvider, codeQualityCodeActionsProvider);
    }
    registerHoverProviders(codeSecurityHoverAdapter, codeQualityHoverAdapter, markdownStringAdapter) {
        this.disposables.push(new hoverProvider_1.DisposableHoverProvider(this, this.logger, this.languages, this.analytics, markdownStringAdapter).register(this.codeSecurityReview, codeSecurityHoverAdapter), new hoverProvider_1.DisposableHoverProvider(this, this.logger, this.languages, this.analytics, markdownStringAdapter).register(this.codeQualityReview, codeQualityHoverAdapter));
    }
    setAnalysisResults(results) {
        Object.values(results.suggestions).forEach(suggestion => {
            suggestion['isSecurityType'] = (0, analysisUtils_1.isSecurityTypeSuggestion)(suggestion);
        });
        this.analysisResults = results;
    }
    getAnalysisResults() {
        return this.analysisResults;
    }
    dispose() {
        this.diagnosticSuggestion.clear();
        while (this.disposables.length) {
            const disposable = this.disposables.pop();
            if (disposable) {
                disposable.dispose();
            }
        }
    }
    getFullSuggestion(suggestionId, uri, position) {
        return (0, analysisUtils_1.findCompleteSuggestion)(this.analysisResults, suggestionId, uri, position, this.languages);
    }
    checkFullSuggestion(suggestion) {
        return (0, analysisUtils_1.checkCompleteSuggestion)(this.analysisResults, suggestion, this.uriAdapter);
    }
    findSuggestion(diagnostic) {
        return this.diagnosticSuggestion.get(diagnostic);
    }
    createIssueDiagnosticInfo({ issuePositions, suggestion, fileUri, }) {
        const { message } = suggestion;
        return {
            code: '',
            message,
            range: (0, analysisUtils_1.createIssueCorrectRange)(issuePositions, this.languages),
            severity: this.SEVERITIES[suggestion.severity].name,
            source: suggestion.isSecurityType
                ? analysis_1.DIAGNOSTICS_CODE_SECURITY_COLLECTION_NAME
                : analysis_1.DIAGNOSTICS_CODE_QUALITY_COLLECTION_NAME,
            // issues markers can be in issuesPositions as prop 'markers',
            ...(issuePositions.markers && {
                relatedInformation: (0, analysisUtils_1.createIssueRelatedInformation)(issuePositions.markers, fileUri.path, message, this.languages, this.workspace, this.uriAdapter),
            }),
        };
    }
    createDiagnostics(options) {
        const securityIssues = [];
        const qualityIssues = [];
        const { fileIssuesList, suggestions, fileUri } = options;
        for (const issue in fileIssuesList) {
            const isSecurityType = suggestions[issue].isSecurityType;
            if (!SnykCodeAnalyzer.isIssueVisible(this.configuration, isSecurityType, suggestions[issue].severity)) {
                continue;
            }
            const issueList = isSecurityType ? securityIssues : qualityIssues;
            for (const issuePositions of fileIssuesList[issue]) {
                const suggestion = suggestions[issue];
                const diagnostic = this.createIssueDiagnosticInfo({
                    issuePositions,
                    suggestion,
                    fileUri,
                });
                this.diagnosticSuggestion.set(diagnostic, suggestion);
                issueList.push(diagnostic);
            }
        }
        return [securityIssues, qualityIssues];
    }
    createReviewResults() {
        if (!this.codeSecurityReview || !this.codeQualityReview) {
            return;
        }
        this.codeSecurityReview.clear();
        this.codeQualityReview.clear();
        this.diagnosticSuggestion.clear();
        if (!this.analysisResults) {
            return;
        }
        const { files, suggestions } = this.analysisResults;
        for (const filePath in files) {
            if (!files.hasOwnProperty(filePath)) {
                continue;
            }
            const fileUri = this.uriAdapter.file(filePath);
            if (!fileUri) {
                return;
            }
            const fileIssuesList = files[filePath];
            const [securityIssues, qualityIssues] = this.createDiagnostics({
                fileIssuesList,
                suggestions,
                fileUri,
            });
            if (securityIssues.length > 0)
                this.codeSecurityReview.set(fileUri, [...securityIssues]);
            if (qualityIssues.length > 0)
                this.codeQualityReview.set(fileUri, [...qualityIssues]);
        }
    }
    async updateReviewResultsPositions(extension, updatedFile) {
        var _a, _b, _c;
        try {
            const isSecurityReviewFile = this.codeSecurityReview && this.codeSecurityReview.has(updatedFile.document.uri);
            const isQualityReviewFile = this.codeQualityReview && this.codeQualityReview.has(updatedFile.document.uri);
            if ((!isSecurityReviewFile && !isQualityReviewFile) ||
                !updatedFile.contentChanges.length ||
                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                !updatedFile.contentChanges[0].range) {
                return;
            }
            const fileIssuesList = (0, analysisUtils_1.updateFileReviewResultsPositions)(this.analysisResults, updatedFile);
            const [securityIssues, qualityIssues] = this.createDiagnostics({
                fileIssuesList,
                suggestions: this.analysisResults.suggestions,
                fileUri: this.uriAdapter.file(updatedFile.fullPath),
            });
            if (isSecurityReviewFile) {
                (_a = this.codeSecurityReview) === null || _a === void 0 ? void 0 : _a.set(this.uriAdapter.file(updatedFile.fullPath), [...securityIssues]);
            }
            else if (isQualityReviewFile) {
                (_b = this.codeQualityReview) === null || _b === void 0 ? void 0 : _b.set(this.uriAdapter.file(updatedFile.fullPath), [...qualityIssues]);
            }
        }
        catch (err) {
            await this.errorHandler.processError(err, {
                message: errors_1.errorsLogs.updateReviewPositions,
                bundleId: (_c = extension.snykCodeOld.remoteBundle) === null || _c === void 0 ? void 0 : _c.fileBundle.bundleHash,
                data: {
                    [updatedFile.fullPath]: updatedFile.contentChanges,
                },
            });
        }
    }
    static isIssueVisible(configuration, isSecurityType, severity) {
        var _a, _b;
        if (isSecurityType && !((_a = configuration.getFeaturesConfiguration()) === null || _a === void 0 ? void 0 : _a.codeSecurityEnabled)) {
            return false;
            // deepcode ignore DuplicateIfBody: readability
        }
        else if (!isSecurityType && !((_b = configuration.getFeaturesConfiguration()) === null || _b === void 0 ? void 0 : _b.codeQualityEnabled)) {
            return false;
        }
        switch (severity) {
            case code_client_1.AnalysisSeverity.critical:
                return configuration.severityFilter.high;
            case code_client_1.AnalysisSeverity.warning:
                return configuration.severityFilter.medium;
            case code_client_1.AnalysisSeverity.info:
                return configuration.severityFilter.low;
            default:
                return false;
        }
    }
}
exports.default = SnykCodeAnalyzer;
//# sourceMappingURL=analyzer.js.map