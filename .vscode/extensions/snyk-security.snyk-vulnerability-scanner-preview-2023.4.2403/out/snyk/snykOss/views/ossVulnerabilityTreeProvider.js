"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OssVulnerabilityTreeProvider = void 0;
const types_1 = require("../../common/commands/types");
const commands_1 = require("../../common/constants/commands");
const views_1 = require("../../common/constants/views");
const analysisMessages_1 = require("../../common/messages/analysisMessages");
const analysisTreeNodeProviderOld_1 = require("../../common/views/analysisTreeNodeProviderOld");
const treeNode_1 = require("../../common/views/treeNode");
const treeView_1 = require("../messages/treeView");
const ossResult_1 = require("../ossResult");
class OssVulnerabilityTreeProvider extends analysisTreeNodeProviderOld_1.AnalysisTreeNodeProviderOld {
    constructor(viewManagerService, contextService, ossService, configuration) {
        super(configuration, ossService);
        this.viewManagerService = viewManagerService;
        this.contextService = contextService;
        this.ossService = ossService;
        this.configuration = configuration;
        this.onDidChangeTreeData = this.viewManagerService.refreshOssViewEmitter.event;
    }
    async getRootChildren() {
        var _a;
        if (!((_a = this.configuration.getFeaturesConfiguration()) === null || _a === void 0 ? void 0 : _a.ossEnabled)) {
            return [
                new treeNode_1.TreeNode({
                    text: views_1.SNYK_ANALYSIS_STATUS.OSS_DISABLED,
                }),
            ];
        }
        if (!this.contextService.shouldShowOssAnalysis)
            return [];
        if (!this.ossService.isLsDownloadSuccessful) {
            return [this.getErrorEncounteredTreeNode()];
        }
        if (!this.ossService.isCliReady) {
            return [
                new treeNode_1.TreeNode({
                    text: treeView_1.messages.cookingDependencies,
                }),
            ];
        }
        else if (!this.ossService.isAnyWorkspaceFolderTrusted) {
            return [this.getNoWorkspaceTrustTreeNode()];
        }
        if (this.ossService.isAnalysisRunning) {
            return [
                new treeNode_1.TreeNode({
                    text: analysisMessages_1.messages.scanRunning,
                }),
            ];
        }
        const ossResults = this.ossService.getResultArray();
        if (!ossResults) {
            return [
                new treeNode_1.TreeNode({
                    text: treeView_1.messages.runTest,
                }),
            ];
        }
        const nodes = [];
        const [resultNodes, totalVulnCount] = await this.getResultNodes(ossResults);
        nodes.push(...resultNodes);
        if (ossResults.length == 1 && (0, ossResult_1.isResultCliError)(ossResults[0])) {
            return nodes;
        }
        nodes.sort(this.compareNodes);
        const topNodes = [
            new treeNode_1.TreeNode({
                text: this.getIssueFoundText(totalVulnCount),
            }),
            this.getDurationTreeNode(),
            this.getNoSeverityFiltersSelectedTreeNode(),
        ];
        nodes.unshift(...topNodes.filter((n) => n !== null));
        return nodes;
    }
    getIssueFoundText(nIssues) {
        switch (nIssues) {
            case 0:
                return treeView_1.messages.noVulnerabilitiesFound;
            case 1:
                return treeView_1.messages.singleVulnerabilityFound;
            default:
                return treeView_1.messages.multipleVulnerabilitiesFound(nIssues);
        }
    }
    getIssueDescriptionText(dir, vulnerabilities) {
        return `${dir} - ${vulnerabilities.length} ${vulnerabilities.length === 1 ? treeView_1.messages.vulnerability : treeView_1.messages.vulnerabilities}`;
    }
    static getSeverityIcon(severity) {
        return ({
            [ossResult_1.OssSeverity.Critical]: treeNode_1.NODE_ICONS.critical,
            [ossResult_1.OssSeverity.High]: treeNode_1.NODE_ICONS.high,
            [ossResult_1.OssSeverity.Medium]: treeNode_1.NODE_ICONS.medium,
            [ossResult_1.OssSeverity.Low]: treeNode_1.NODE_ICONS.low,
        }[severity] || treeNode_1.NODE_ICONS.low);
    }
    static getFileSeverity(counts) {
        for (const s of [ossResult_1.OssSeverity.Critical, ossResult_1.OssSeverity.High, ossResult_1.OssSeverity.Medium, ossResult_1.OssSeverity.Low]) {
            if (counts[s])
                return s;
        }
        return ossResult_1.OssSeverity.Low;
    }
    /** Returns severity significance index. The higher, the more significant severity is. */
    static getSeverityComparatorIndex(severity) {
        return Object.values(ossResult_1.OssSeverity).indexOf(severity);
    }
    initFileSeverityCounts() {
        return {
            [ossResult_1.OssSeverity.Critical]: 0,
            [ossResult_1.OssSeverity.High]: 0,
            [ossResult_1.OssSeverity.Medium]: 0,
            [ossResult_1.OssSeverity.Low]: 0,
        };
    }
    getFilteredIssues(uniqueVulnerabilities) {
        return uniqueVulnerabilities.filter(vuln => {
            switch (vuln.severity.toLowerCase()) {
                case ossResult_1.OssSeverity.Critical:
                    return this.configuration.severityFilter.critical;
                case ossResult_1.OssSeverity.High:
                    return this.configuration.severityFilter.high;
                case ossResult_1.OssSeverity.Medium:
                    return this.configuration.severityFilter.medium;
                case ossResult_1.OssSeverity.Low:
                    return this.configuration.severityFilter.low;
                default:
                    return true;
            }
        });
    }
    async getResultNodes(ossResults) {
        const nodes = [];
        let totalVulnCount = 0;
        for (const fileResult of ossResults) {
            if ((0, ossResult_1.isResultCliError)(fileResult)) {
                nodes.push(this.getErrorEncounteredTreeNode(fileResult.path));
                continue;
            }
            const counts = this.initFileSeverityCounts();
            const vulnerabilityNodes = [];
            const uniqueVulns = this.ossService.getUniqueVulnerabilities(fileResult.vulnerabilities);
            totalVulnCount += uniqueVulns.length;
            const fileVulnerabilities = this.getFilteredIssues(uniqueVulns);
            if (fileVulnerabilities.length == 0)
                continue;
            for (const vuln of fileVulnerabilities) {
                counts[vuln.severity]++;
                vulnerabilityNodes.push(new treeNode_1.TreeNode({
                    text: `${vuln.packageName}@${vuln.version} - ${vuln.title}`,
                    icon: OssVulnerabilityTreeProvider.getSeverityIcon(vuln.severity),
                    internal: {
                        severity: OssVulnerabilityTreeProvider.getSeverityComparatorIndex(vuln.severity),
                    },
                    command: {
                        command: commands_1.SNYK_OPEN_ISSUE_COMMAND,
                        title: '',
                        arguments: [
                            {
                                issueType: types_1.OpenCommandIssueType.OssVulnerability,
                                // eslint-disable-next-line no-await-in-loop
                                issue: await this.ossService.getOssIssueCommandArg(vuln, fileResult.vulnerabilities),
                            },
                        ],
                    },
                }));
            }
            vulnerabilityNodes.sort(this.compareNodes);
            const fileSeverity = OssVulnerabilityTreeProvider.getFileSeverity(counts);
            const fileNode = new treeNode_1.TreeNode({
                text: fileResult.displayTargetFile,
                description: this.getIssueDescriptionText(fileResult.projectName, fileVulnerabilities),
                icon: OssVulnerabilityTreeProvider.getSeverityIcon(fileSeverity),
                children: vulnerabilityNodes,
                internal: {
                    nIssues: vulnerabilityNodes.length,
                    severity: OssVulnerabilityTreeProvider.getSeverityComparatorIndex(fileSeverity),
                },
            });
            nodes.push(fileNode);
        }
        return [nodes, totalVulnCount];
    }
}
exports.OssVulnerabilityTreeProvider = OssVulnerabilityTreeProvider;
//# sourceMappingURL=ossVulnerabilityTreeProvider.js.map