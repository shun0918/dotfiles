"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExperimentService = exports.ExperimentKey = void 0;
const experiment_node_server_1 = require("@amplitude/experiment-node-server");
var ExperimentKey;
(function (ExperimentKey) {
    // to be populated with running experiment keys
    ExperimentKey["TestExperiment"] = "vscode-test-experiment";
    ExperimentKey["CodeScansViaLanguageServer"] = "snyk-code-via-ls-in-vs-code-integration";
})(ExperimentKey = exports.ExperimentKey || (exports.ExperimentKey = {}));
class ExperimentService {
    constructor(user, logger, configuration, snykConfiguration) {
        this.user = user;
        this.logger = logger;
        this.configuration = configuration;
        this.snykConfiguration = snykConfiguration;
        this.canExperiment = this.configuration.shouldReportEvents;
    }
    load() {
        var _a;
        if (!this.canExperiment) {
            return false;
        }
        const amplitudeExperimentApiKey = (_a = this.snykConfiguration) === null || _a === void 0 ? void 0 : _a.amplitudeExperimentApiKey;
        if (!amplitudeExperimentApiKey) {
            this.logger.debug('Segment analytics write key is empty. No analytics will be collected.');
            return false;
        }
        this.client = experiment_node_server_1.Experiment.initialize(amplitudeExperimentApiKey);
        return true;
    }
    async isUserPartOfExperiment(variantFlag, forceFetchVariants = false) {
        if (!this.canExperiment) {
            return false;
        }
        const variants = await this.fetchVariants(forceFetchVariants);
        const variant = variants[variantFlag];
        if ((variant === null || variant === void 0 ? void 0 : variant.value) === 'on') {
            return true;
        }
        return false;
    }
    async fetchVariants(forceFetchVariants) {
        if (!this.variants || forceFetchVariants) {
            try {
                this.variants = await this.client.fetch({
                    /* eslint-disable camelcase */
                    user_id: this.user.authenticatedId,
                    device_id: this.user.anonymousId,
                    /* eslint-enable camelcase */
                });
            }
            catch (err) {
                this.logger.warn(`Experiment variants fetch failed. ${err}`);
                this.variants = {};
            }
        }
        return this.variants;
    }
}
exports.ExperimentService = ExperimentService;
//# sourceMappingURL=experimentService.js.map