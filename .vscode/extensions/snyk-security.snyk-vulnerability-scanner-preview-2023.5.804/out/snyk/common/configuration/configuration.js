"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Configuration = void 0;
const lodash_1 = __importDefault(require("lodash"));
const path_1 = __importDefault(require("path"));
const url_1 = require("url");
const general_1 = require("../constants/general");
const settings_1 = require("../constants/settings");
const secretStorage_1 = __importDefault(require("../vscode/secretStorage"));
class Configuration {
    constructor(processEnv = process.env, workspace) {
        this.processEnv = processEnv;
        this.workspace = workspace;
        // These attributes are used in tests
        this.defaultSnykCodeBaseURL = 'https://deeproxy.snyk.io';
        this.defaultAuthHost = 'https://snyk.io';
        this.defaultOssApiEndpoint = `${this.defaultAuthHost}/api/v1`;
        this.defaultBaseApiHost = 'https://api.snyk.io';
        this.devBaseApiHost = 'https://api.dev.snyk.io';
        this.getConfigName = (setting) => setting.replace(`${settings_1.CONFIGURATION_IDENTIFIER}.`, '');
    }
    getInsecure() {
        var _a;
        const strictSSL = (_a = this.workspace.getConfiguration('http', 'proxyStrictSSL')) !== null && _a !== void 0 ? _a : true;
        return !strictSSL;
    }
    static async getVersion() {
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        const { version } = await this.getPackageJsonConfig();
        return version;
    }
    static async isPreview() {
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        const { preview } = await this.getPackageJsonConfig();
        return preview;
    }
    static async getPackageJsonConfig() {
        return (await Promise.resolve().then(() => __importStar(require(path_1.default.join('../../../..', 'package.json')))));
    }
    get isDevelopment() {
        return !!this.processEnv.SNYK_VSCE_DEVELOPMENT;
    }
    get snykCodeBaseURL() {
        var _a;
        if (this.isDevelopment) {
            return (_a = this.processEnv.SNYK_VSCE_DEVELOPMENT_SNYKCODE_BASE_URL) !== null && _a !== void 0 ? _a : 'https://deeproxy.dev.snyk.io';
        }
        else if (this.customEndpoint) {
            const url = new url_1.URL(this.customEndpoint);
            if (Configuration.isSingleTenant(url)) {
                url.host = url.host.replace('app', 'deeproxy');
            }
            else {
                url.host = `deeproxy.${url.host}`;
            }
            url.pathname = url.pathname.replace('api', '');
            return this.removeTrailingSlash(url.toString());
        }
        return this.defaultSnykCodeBaseURL;
    }
    get customEndpoint() {
        return this.workspace.getConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.ADVANCED_CUSTOM_ENDPOINT));
    }
    get authHost() {
        if (this.isDevelopment) {
            return 'https://dev.snyk.io';
        }
        else if (this.customEndpoint) {
            const url = new url_1.URL(this.customEndpoint);
            return `${url.protocol}//${url.host}`;
        }
        return this.defaultAuthHost;
    }
    get snykOssApiEndpoint() {
        if (this.isDevelopment) {
            return `${this.authHost}/api/v1`;
        }
        else if (this.customEndpoint) {
            return this.customEndpoint; // E.g. https://app.eu.snyk.io/api
        }
        return this.defaultOssApiEndpoint;
    }
    get snykCodeUrl() {
        const authUrl = new url_1.URL(this.authHost);
        if (Configuration.isSingleTenant(authUrl)) {
            authUrl.pathname = authUrl.pathname.replace('api', '');
        }
        else {
            authUrl.host = `app.${authUrl.host}`;
        }
        return `${authUrl.toString()}manage/snyk-code?from=vscode`;
    }
    getSnykLanguageServerPath() {
        return this.workspace.getConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.ADVANCED_CUSTOM_LS_PATH));
    }
    async getToken() {
        return new Promise(resolve => {
            secretStorage_1.default.instance
                .get(general_1.SNYK_TOKEN_KEY)
                .then(token => resolve(token))
                .catch(async (_) => {
                // clear the token and return empty string
                await this.clearToken();
                resolve('');
            });
        });
    }
    get snykCodeToken() {
        if (this.isDevelopment && this.processEnv.SNYK_VSCE_DEVELOPMENT_SNYKCODE_TOKEN) {
            return Promise.resolve(this.processEnv.SNYK_VSCE_DEVELOPMENT_SNYKCODE_TOKEN);
        }
        return this.getToken();
    }
    async setToken(token) {
        if (!token)
            return;
        return await secretStorage_1.default.instance.store(general_1.SNYK_TOKEN_KEY, token);
    }
    async setCliPath(cliPath) {
        if (!cliPath)
            return;
        return this.workspace.updateConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.ADVANCED_CLI_PATH), cliPath, true);
    }
    async clearToken() {
        return new Promise((resolve, reject) => {
            secretStorage_1.default.instance
                .delete(general_1.SNYK_TOKEN_KEY)
                .then(() => resolve())
                .catch(error => {
                reject(error);
            });
        });
    }
    static get source() {
        return general_1.IDE_NAME_SHORT;
    }
    get source() {
        return Configuration.source;
    }
    get baseApiUrl() {
        if (this.isDevelopment) {
            return this.devBaseApiHost;
        }
        return this.defaultBaseApiHost;
    }
    getFeaturesConfiguration() {
        const ossEnabled = this.workspace.getConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.OSS_ENABLED_SETTING));
        const codeSecurityEnabled = this.workspace.getConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.CODE_SECURITY_ENABLED_SETTING));
        const codeQualityEnabled = this.workspace.getConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.CODE_QUALITY_ENABLED_SETTING));
        const iacEnabled = this.workspace.getConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.IAC_ENABLED_SETTING));
        if (lodash_1.default.isUndefined(ossEnabled) &&
            lodash_1.default.isUndefined(codeSecurityEnabled) &&
            lodash_1.default.isUndefined(codeQualityEnabled) &&
            lodash_1.default.isUndefined(iacEnabled)) {
            // TODO: return 'undefined' to render feature selection screen once OSS integration is available
            return { ossEnabled: true, codeSecurityEnabled: true, codeQualityEnabled: true, iacEnabled: true };
        }
        return {
            ossEnabled,
            codeSecurityEnabled,
            codeQualityEnabled,
            iacEnabled,
        };
    }
    async setFeaturesConfiguration(config) {
        await this.workspace.updateConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.CODE_SECURITY_ENABLED_SETTING), config === null || config === void 0 ? void 0 : config.codeSecurityEnabled, true);
        await this.workspace.updateConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.CODE_QUALITY_ENABLED_SETTING), config === null || config === void 0 ? void 0 : config.codeQualityEnabled, true);
    }
    get shouldReportErrors() {
        return !!this.workspace.getConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.YES_CRASH_REPORT_SETTING));
    }
    get shouldReportEvents() {
        return !!this.workspace.getConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.YES_TELEMETRY_SETTING));
    }
    async setShouldReportEvents(yesTelemetry) {
        await this.workspace.updateConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.YES_TELEMETRY_SETTING), yesTelemetry, true);
    }
    get shouldShowWelcomeNotification() {
        return !!this.workspace.getConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.YES_WELCOME_NOTIFICATION_SETTING));
    }
    async hideWelcomeNotification() {
        await this.workspace.updateConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.YES_WELCOME_NOTIFICATION_SETTING), false, true);
    }
    get shouldShowOssBackgroundScanNotification() {
        return !!this.workspace.getConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.YES_BACKGROUND_OSS_NOTIFICATION_SETTING));
    }
    async hideOssBackgroundScanNotification() {
        await this.workspace.updateConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.YES_BACKGROUND_OSS_NOTIFICATION_SETTING), false, true);
    }
    get shouldShowAdvancedView() {
        return !!this.workspace.getConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.ADVANCED_ADVANCED_MODE_SETTING));
    }
    get shouldAutoScanOss() {
        return !!this.workspace.getConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.ADVANCED_AUTOSCAN_OSS_SETTING));
    }
    get severityFilter() {
        const config = this.workspace.getConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.SEVERITY_FILTER_SETTING));
        return (config !== null && config !== void 0 ? config : {
            critical: true,
            high: true,
            medium: true,
            low: true,
        });
    }
    get organization() {
        return this.workspace.getConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.ADVANCED_ORGANIZATION));
    }
    getPreviewFeatures() {
        const defaultSetting = {
            reportFalsePositives: false,
            advisor: false,
        };
        const userSetting = this.workspace.getConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.FEATURES_PREVIEW_SETTING)) || {};
        return {
            ...defaultSetting,
            ...userSetting,
        };
    }
    getAdditionalCliParameters() {
        return this.workspace.getConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.ADVANCED_ADDITIONAL_PARAMETERS_SETTING));
    }
    isAutomaticDependencyManagementEnabled() {
        return !!this.workspace.getConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.ADVANCED_AUTOMATIC_DEPENDENCY_MANAGEMENT));
    }
    getCliPath() {
        return this.workspace.getConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.ADVANCED_CLI_PATH));
    }
    getTrustedFolders() {
        return (this.workspace.getConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.TRUSTED_FOLDERS)) || []);
    }
    get scanningMode() {
        return this.workspace.getConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.SCANNING_MODE));
    }
    async setTrustedFolders(trustedFolders) {
        await this.workspace.updateConfiguration(settings_1.CONFIGURATION_IDENTIFIER, this.getConfigName(settings_1.TRUSTED_FOLDERS), trustedFolders, true);
    }
    static isSingleTenant(url) {
        return url.host.startsWith('app') && url.host.endsWith('snyk.io');
    }
    removeTrailingSlash(str) {
        return str.replace(/\/$/, '');
    }
}
exports.Configuration = Configuration;
//# sourceMappingURL=configuration.js.map