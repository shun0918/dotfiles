"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const _ = __importStar(require("lodash"));
const vscode = __importStar(require("vscode"));
const instance_1 = require("../configuration/instance");
const general_1 = require("../constants/general");
const settings_1 = require("../constants/settings");
const errorHandler_1 = require("../error/errorHandler");
const errors_1 = require("../messages/errors");
const secretStorage_1 = __importDefault(require("../vscode/secretStorage"));
class ConfigurationWatcher {
    constructor(analytics, logger) {
        this.analytics = analytics;
        this.logger = logger;
    }
    async onChangeConfiguration(extension, key) {
        if (key === settings_1.ADVANCED_ADVANCED_MODE_SETTING) {
            return extension.checkAdvancedMode();
        }
        else if (key === settings_1.YES_TELEMETRY_SETTING) {
            return this.analytics.setShouldReportEvents(instance_1.configuration.shouldReportEvents);
        }
        else if (key === settings_1.OSS_ENABLED_SETTING) {
            extension.viewManagerService.refreshOssView();
        }
        else if (key === settings_1.CODE_SECURITY_ENABLED_SETTING || key === settings_1.CODE_QUALITY_ENABLED_SETTING) {
            extension.snykCodeOld.analyzer.refreshDiagnostics();
            // If two settings are changed simultaneously, only one will be applied, thus refresh all views
            return extension.viewManagerService.refreshAllOldCodeAnalysisViews();
        }
        else if (key === settings_1.IAC_ENABLED_SETTING) {
            return extension.viewManagerService.refreshIacView();
        }
        else if (key === settings_1.SEVERITY_FILTER_SETTING) {
            extension.snykCodeOld.analyzer.refreshDiagnostics();
            return extension.viewManagerService.refreshAllViews();
        }
        else if (key === settings_1.ADVANCED_CUSTOM_ENDPOINT) {
            return instance_1.configuration.clearToken();
        }
        else if (key === settings_1.ADVANCED_CUSTOM_LS_PATH) {
            // Language Server client must sync config changes before we can restart
            return _.debounce(() => extension.restartLanguageServer(), general_1.DEFAULT_LS_DEBOUNCE_INTERVAL)();
        }
        else if (key === settings_1.TRUSTED_FOLDERS) {
            extension.workspaceTrust.resetTrustedFoldersCache();
            extension.viewManagerService.refreshAllViews();
        }
        const extensionConfig = vscode.workspace.getConfiguration('snyk');
        const url = extensionConfig.get('url');
        const cleaned = url === null || url === void 0 ? void 0 : url.replace(/\/$/, '');
        if (cleaned !== url) {
            void extensionConfig.update('url', cleaned, true);
        }
        return extension.runScan();
    }
    activate(extension) {
        vscode.workspace.onDidChangeConfiguration(async (event) => {
            const change = [
                settings_1.ADVANCED_ADVANCED_MODE_SETTING,
                settings_1.ADVANCED_AUTOSCAN_OSS_SETTING,
                settings_1.YES_TELEMETRY_SETTING,
                settings_1.OSS_ENABLED_SETTING,
                settings_1.CODE_SECURITY_ENABLED_SETTING,
                settings_1.CODE_QUALITY_ENABLED_SETTING,
                settings_1.IAC_ENABLED_SETTING,
                settings_1.SEVERITY_FILTER_SETTING,
                settings_1.ADVANCED_CUSTOM_ENDPOINT,
                settings_1.ADVANCED_CUSTOM_LS_PATH,
                settings_1.TRUSTED_FOLDERS,
            ].find(config => event.affectsConfiguration(config));
            if (change) {
                try {
                    await this.onChangeConfiguration(extension, change);
                }
                catch (error) {
                    errorHandler_1.ErrorHandler.handle(error, this.logger, `${errors_1.errorsLogs.configWatcher}. Configuration key: ${change}`);
                }
            }
        });
        secretStorage_1.default.instance.onDidChange(event => {
            if (event.key === general_1.SNYK_TOKEN_KEY) {
                return extension.runScan();
            }
        });
    }
}
exports.default = ConfigurationWatcher;
//# sourceMappingURL=configurationWatcher.js.map