"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.vsCodeWorkspace = exports.VSCodeWorkspace = void 0;
const vscode = __importStar(require("vscode"));
/**
 * A wrapper class for the vscode.workspace to provide centralised access to dealing with the current workspace.
 */
class VSCodeWorkspace {
    constructor() {
        this.fs = vscode.workspace.fs;
    }
    getConfiguration(configurationIdentifier, section) {
        return vscode.workspace.getConfiguration(configurationIdentifier).get(section);
    }
    updateConfiguration(configurationIdentifier, section, value, configurationTarget, overrideInLanguage) {
        return new Promise((resolve, reject) => {
            vscode.workspace
                .getConfiguration(configurationIdentifier)
                .update(section, value, configurationTarget, overrideInLanguage)
                .then(() => resolve(), reason => reject(reason));
        });
    }
    getWorkspaceFolders() {
        return (vscode.workspace.workspaceFolders || []).map(f => f.uri.fsPath);
    }
    createFileSystemWatcher(globPattern) {
        return vscode.workspace.createFileSystemWatcher(globPattern);
    }
    onDidChangeTextDocument(listener) {
        return vscode.workspace.onDidChangeTextDocument(listener);
    }
    openFileTextDocument(fileName) {
        return new Promise((resolve, reject) => {
            vscode.workspace.openTextDocument(fileName).then(doc => resolve(doc), reason => reject(reason));
        });
    }
    openTextDocumentViaUri(uri) {
        return vscode.workspace.openTextDocument(uri);
    }
    openTextDocument(options) {
        return new Promise((resolve, reject) => {
            vscode.workspace.openTextDocument(options).then(doc => resolve(doc), reason => reject(reason));
        });
    }
}
exports.VSCodeWorkspace = VSCodeWorkspace;
exports.vsCodeWorkspace = new VSCodeWorkspace();
//# sourceMappingURL=workspace.js.map