"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.vsCodeWindow = exports.VSCodeWindow = void 0;
const vscode = __importStar(require("vscode"));
const vscode_1 = require("vscode");
/**
 * A wrapper class for the vscode.window to provide centralised access to dealing with the current window of the editor.
 */
class VSCodeWindow {
    getActiveTextEditor() {
        return vscode.window.activeTextEditor;
    }
    getVisibleTextEditors() {
        return vscode.window.visibleTextEditors;
    }
    showTextDocument(document, column, preserveFocus) {
        return new Promise((resolve, reject) => {
            vscode.window.showTextDocument(document, column, preserveFocus).then(doc => resolve(doc), reason => reject(reason));
        });
    }
    showTextDocumentViaUri(uri, options) {
        return vscode.window.showTextDocument(uri, options);
    }
    showTextDocumentViaFilepath(filePath, options) {
        const uri = vscode.Uri.file(filePath);
        return vscode.window.showTextDocument(uri, options);
    }
    createTextEditorDecorationType(options) {
        return vscode.window.createTextEditorDecorationType(options);
    }
    createOutputChannel(channelName) {
        return vscode.window.createOutputChannel(channelName);
    }
    registerWebviewPanelSerializer(viewType, serializer) {
        return vscode.window.registerWebviewPanelSerializer(viewType, serializer);
    }
    withProgress(progressTitle, task) {
        return new Promise((resolve, reject) => {
            VSCodeWindow.withProgress(progressTitle, task).then((value) => resolve(value), reason => reject(reason));
        });
    }
    static withProgress(progressTitle, task) {
        const options = {
            location: vscode_1.ProgressLocation.Notification,
            title: progressTitle,
            cancellable: true,
        };
        return vscode.window.withProgress(options, task);
    }
    showInformationMessage(message, ...items) {
        return new Promise((resolve, reject) => {
            vscode.window.showInformationMessage(message, ...items).then((value) => resolve(value), reason => reject(reason));
        });
    }
    showErrorMessage(message, ...items) {
        return new Promise((resolve, reject) => {
            vscode.window.showErrorMessage(message, ...items).then((value) => resolve(value), reason => reject(reason));
        });
    }
    showInputBox(options, token) {
        return vscode.window.showInputBox(options, token);
    }
    onDidChangeActiveTextEditor(listener) {
        return vscode.window.onDidChangeActiveTextEditor(listener);
    }
}
exports.VSCodeWindow = VSCodeWindow;
exports.vsCodeWindow = new VSCodeWindow();
//# sourceMappingURL=window.js.map