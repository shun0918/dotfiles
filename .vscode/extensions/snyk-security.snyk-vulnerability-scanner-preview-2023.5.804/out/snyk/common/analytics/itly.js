"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Iteratively = void 0;
const plugin_segment_node_1 = __importDefault(require("@itly/plugin-segment-node"));
const ampli_1 = __importDefault(require("../../../ampli"));
const configuration_1 = require("../configuration/configuration");
const general_1 = require("../constants/general");
const errorHandler_1 = require("../error/errorHandler");
const itlyErrorPlugin_1 = require("./itlyErrorPlugin");
/**
 * Do not have any dependencies on 'vscode' module to prevent uninstall hook from breaking.
 * Import required dependencies dynamically, if needed.
 */
class Iteratively {
    constructor(user, logger, shouldReportEvents, isDevelopment, snykConfiguration) {
        this.user = user;
        this.logger = logger;
        this.shouldReportEvents = shouldReportEvents;
        this.isDevelopment = isDevelopment;
        this.snykConfiguration = snykConfiguration;
        this.ide = general_1.IDE_NAME;
        this.loaded = false;
        this.flush = () => ampli_1.default.flush();
    }
    setShouldReportEvents(shouldReportEvents) {
        this.shouldReportEvents = shouldReportEvents;
        this.load();
    }
    load() {
        var _a;
        if (!this.shouldReportEvents) {
            return null;
        }
        const segmentWriteKey = (_a = this.snykConfiguration) === null || _a === void 0 ? void 0 : _a.segmentWriteKey;
        if (!segmentWriteKey) {
            this.logger.debug('Segment analytics write key is empty. No analytics will be collected.');
            return this;
        }
        const segment = new plugin_segment_node_1.default(segmentWriteKey);
        const isDevelopment = this.isDevelopment;
        if (!this.loaded) {
            try {
                ampli_1.default.load({
                    disabled: !this.shouldReportEvents,
                    environment: isDevelopment ? 'development' : 'production',
                    plugins: [segment, new itlyErrorPlugin_1.ItlyErrorPlugin(this.logger)],
                });
            }
            catch (err) {
                this.logger.warn(`Failed to load analytics: ${err}`);
            }
            this.loaded = true;
        }
        return this;
    }
    async identify() {
        if (!this.canReportEvents()) {
            return;
        }
        if (!this.user.authenticatedId) {
            this.logger.error('Tried to identify non-authenticated user');
            return;
        }
        // Calling identify is the preferred way to merge authenticated user with anonymous one,
        // see https://snyk.slack.com/archives/C01U2SPRB3Q/p1624276750134700?thread_ts=1624030602.128900&cid=C01U2SPRB3Q
        ampli_1.default.identify(this.user.authenticatedId, undefined, {
            segment: {
                options: {
                    anonymousId: this.user.anonymousId,
                    context: {
                        app: {
                            name: this.ide,
                            version: await configuration_1.Configuration.getVersion(),
                        },
                    },
                },
            },
        });
    }
    logIssueInTreeIsClicked(properties) {
        this.enqueueEvent(() => {
            ampli_1.default.issueInTreeIsClicked(this.getAuthenticatedUserId(), properties);
        });
    }
    logAnalysisIsReady(properties) {
        this.enqueueEvent(() => {
            ampli_1.default.analysisIsReady(this.getAuthenticatedUserId(), properties);
        });
    }
    logAnalysisIsTriggered(properties) {
        this.enqueueEvent(() => {
            ampli_1.default.analysisIsTriggered(this.getAuthenticatedUserId(), properties);
        });
    }
    logWelcomeViewIsViewed() {
        this.enqueueEvent(() => {
            ampli_1.default.welcomeIsViewed('', {
                ide: this.ide,
            }, this.getAnonymousSegmentOptions());
        }, false);
    }
    logAuthenticateButtonIsClicked() {
        this.enqueueEvent(() => {
            ampli_1.default.authenticateButtonIsClicked('', {
                ide: this.ide,
                eventSource: 'IDE',
            }, this.getAnonymousSegmentOptions());
        }, false);
    }
    logWelcomeButtonIsClicked() {
        this.enqueueEvent(() => {
            var _a;
            ampli_1.default.welcomeButtonIsClicked((_a = this.user.authenticatedId) !== null && _a !== void 0 ? _a : '', {
                ide: this.ide,
                eventSource: 'IDE',
            }, this.getAnonymousSegmentOptions());
        }, false);
    }
    logPluginIsInstalled() {
        this.enqueueEvent(() => {
            ampli_1.default.pluginIsInstalled('', {
                ide: this.ide,
            }, {
                segment: {
                    options: {
                        anonymousId: this.user.anonymousId,
                    },
                },
            });
        });
    }
    logQuickFixIsDisplayed(properties) {
        this.enqueueEvent(() => {
            ampli_1.default.quickFixIsDisplayed(this.getAuthenticatedUserId(), properties);
        });
    }
    logIssueHoverIsDisplayed(properties) {
        this.enqueueEvent(() => {
            ampli_1.default.issueHoverIsDisplayed(this.getAuthenticatedUserId(), properties);
        });
    }
    logScanModeIsSelected(properties) {
        this.enqueueEvent(() => {
            ampli_1.default.scanModeIsSelected(this.getAuthenticatedUserId(), {
                ...properties,
                ide: this.ide,
                eventSource: 'IDE',
            });
        });
    }
    logFalsePositiveIsDisplayed() {
        this.enqueueEvent(() => {
            ampli_1.default.falsePositiveIsDisplayed(this.getAuthenticatedUserId(), {
                ide: this.ide,
                eventSource: 'IDE',
            });
        });
    }
    logFalsePositiveIsSubmitted(properties) {
        this.enqueueEvent(() => {
            ampli_1.default.falsePositiveIsSubmitted(this.getAuthenticatedUserId(), {
                ...properties,
                ide: this.ide,
                eventSource: 'IDE',
            });
        });
    }
    enqueueEvent(eventFunction, mustBeAuthenticated = true) {
        if (!this.canReportEvents()) {
            return;
        }
        if (mustBeAuthenticated && !this.user.authenticatedId) {
            return;
        }
        eventFunction();
    }
    canReportEvents() {
        if (!this.loaded) {
            this.logger.debug('Cannot report events because Iteratively not loaded.');
            return false;
        }
        if (!this.shouldReportEvents) {
            return false;
        }
        return true;
    }
    getAnonymousSegmentOptions() {
        return {
            segment: {
                options: {
                    anonymousId: this.user.anonymousId,
                },
            },
        };
    }
    getAuthenticatedUserId() {
        if (!this.user.authenticatedId) {
            const err = new Error('User must be authenticated for analytics');
            errorHandler_1.ErrorHandler.handle(err, this.logger);
            throw err;
        }
        return this.user.authenticatedId;
    }
}
exports.Iteratively = Iteratively;
//# sourceMappingURL=itly.js.map