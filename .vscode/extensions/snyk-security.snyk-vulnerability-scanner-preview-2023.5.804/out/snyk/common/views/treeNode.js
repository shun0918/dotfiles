"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TreeNode = exports.NODE_ICONS = void 0;
const path = __importStar(require("path"));
const vscode_1 = require("vscode");
const commands_1 = require("../constants/commands");
exports.NODE_ICONS = {
    critical: {
        light: path.join(__filename, '..', '..', '..', '..', '..', 'media', 'images', 'dark-critical-severity.svg'),
        dark: path.join(__filename, '..', '..', '..', '..', '..', 'media', 'images', 'dark-critical-severity.svg'),
    },
    high: {
        light: path.join(__filename, '..', '..', '..', '..', '..', 'media', 'images', 'dark-high-severity.svg'),
        dark: path.join(__filename, '..', '..', '..', '..', '..', 'media', 'images', 'dark-high-severity.svg'),
    },
    medium: {
        light: path.join(__filename, '..', '..', '..', '..', '..', 'media', 'images', 'dark-medium-severity.svg'),
        dark: path.join(__filename, '..', '..', '..', '..', '..', 'media', 'images', 'dark-medium-severity.svg'),
    },
    low: {
        light: path.join(__filename, '..', '..', '..', '..', '..', 'media', 'images', 'dark-low-severity.svg'),
        dark: path.join(__filename, '..', '..', '..', '..', '..', 'media', 'images', 'dark-low-severity.svg'),
    },
    error: {
        light: path.join(__filename, '..', '..', '..', '..', '..', 'media', 'images', 'warning.svg'),
        dark: path.join(__filename, '..', '..', '..', '..', '..', 'media', 'images', 'warning.svg'),
    },
};
class TreeNode extends vscode_1.TreeItem {
    constructor(options) {
        const collapsed = options.collapsed || (options.children && vscode_1.TreeItemCollapsibleState.Collapsed) || vscode_1.TreeItemCollapsibleState.None;
        super(options.text, collapsed);
        this.iconPath = options.icon;
        this.tooltip = options.description || options.text;
        let desc = options.description;
        if (!desc && options.issue) {
            desc = options.issue.uri.path.split('/').pop() || '';
            if (options.issue.range) {
                desc += `[${options.issue.range.start.line + 1}, `;
                desc += `${options.issue.range.start.character + 1}]`;
            }
        }
        this.description = desc;
        this.command =
            options.command ||
                (options.link && {
                    command: commands_1.SNYK_OPEN_BROWSER_COMMAND,
                    title: '',
                    arguments: [options.link],
                }) ||
                (options.issue && {
                    command: commands_1.SNYK_OPEN_LOCAL_COMMAND,
                    title: '',
                    arguments: [options.issue.filePath, options.issue.range],
                });
        // Not using `options.issue.uri` to avoid default file decorators (see Explorer tab)
        // However, as of August 2020, there is still no way to manually decorate tree items
        // https://github.com/microsoft/vscode/issues/47502
        // this.resourceUri = options.link ? Uri.parse(options.link) : (options.issue && options.issue.uri);
        this.parent = options.parent;
        this.children = options.children;
        this.internal = options.internal || {};
    }
    getParent() {
        return this.parent;
    }
    getChildren() {
        return this.children || [];
    }
}
exports.TreeNode = TreeNode;
//# sourceMappingURL=treeNode.js.map