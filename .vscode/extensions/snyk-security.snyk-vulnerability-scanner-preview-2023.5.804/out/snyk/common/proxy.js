"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProxyEnvVariable = exports.getAxiosConfig = exports.getVsCodeProxy = exports.getProxyOptions = exports.getHttpsProxyAgent = void 0;
const promises_1 = __importDefault(require("fs/promises"));
const https_1 = require("https");
const https_proxy_agent_1 = require("https-proxy-agent");
const url = __importStar(require("url"));
async function getHttpsProxyAgent(workspace, configuration, logger, processEnv = process.env) {
    const proxyOptions = await getProxyOptions(workspace, configuration, logger, processEnv);
    if (proxyOptions == undefined)
        return undefined;
    return new https_proxy_agent_1.HttpsProxyAgent(proxyOptions);
}
exports.getHttpsProxyAgent = getHttpsProxyAgent;
async function getProxyOptions(workspace, configuration, logger, processEnv = process.env) {
    let proxy = getVsCodeProxy(workspace);
    const defaultOptions = {
        ...(await getDefaultAgentOptions(configuration, logger)),
    };
    if (!proxy) {
        proxy = processEnv.HTTPS_PROXY || processEnv.https_proxy || processEnv.HTTP_PROXY || processEnv.http_proxy;
        if (!proxy) {
            return undefined; // No proxy
        }
    }
    // Basic sanity checking on proxy url
    const proxyUrl = url.parse(proxy);
    if (proxyUrl.protocol !== 'https:' && proxyUrl.protocol !== 'http:') {
        return undefined;
    }
    if (proxyUrl.hostname == null || proxyUrl.hostname === '') {
        return undefined;
    }
    let port;
    if (proxyUrl.port && proxyUrl.port !== '') {
        port = parseInt(proxyUrl.port, 10);
    }
    return {
        host: proxyUrl.hostname,
        port: port,
        auth: proxyUrl.auth,
        protocol: proxyUrl.protocol,
        ...defaultOptions,
    };
}
exports.getProxyOptions = getProxyOptions;
function getVsCodeProxy(workspace) {
    return workspace.getConfiguration('http', 'proxy');
}
exports.getVsCodeProxy = getVsCodeProxy;
async function getAxiosConfig(workspace, configuration, logger) {
    // if proxying, we need to configure getHttpsProxyAgent, else configure getHttpsAgent
    let agentOptions = await getHttpsProxyAgent(workspace, configuration, logger);
    if (!agentOptions)
        agentOptions = await getHttpsAgent(configuration, logger);
    return {
        // proxy false as we're using https-proxy-agent library for proxying
        proxy: false,
        httpAgent: agentOptions,
        httpsAgent: agentOptions,
    };
}
exports.getAxiosConfig = getAxiosConfig;
function getProxyEnvVariable(proxyOptions) {
    if (!proxyOptions) {
        return;
    }
    const { host, port, auth, protocol } = proxyOptions;
    if (!host)
        return;
    // noinspection HttpUrlsUsage
    return `${protocol}//${auth ? `${auth}@` : ''}${host}${port ? `:${port}` : ''}`;
}
exports.getProxyEnvVariable = getProxyEnvVariable;
async function getHttpsAgent(configuration, logger) {
    return new https_1.Agent({
        ...(await getDefaultAgentOptions(configuration, logger)),
    });
}
async function getDefaultAgentOptions(configuration, logger, processEnv = process.env) {
    let defaultOptions;
    const sslCheck = !configuration.getInsecure();
    defaultOptions = { rejectUnauthorized: sslCheck };
    if (!sslCheck) {
        https_1.globalAgent.options.rejectUnauthorized = false;
    }
    else {
        // use custom certs if provided
        if (processEnv.NODE_EXTRA_CA_CERTS) {
            try {
                await promises_1.default.access(processEnv.NODE_EXTRA_CA_CERTS);
                const certs = await promises_1.default.readFile(processEnv.NODE_EXTRA_CA_CERTS);
                defaultOptions = { ca: [certs] };
                https_1.globalAgent.options.ca = [certs];
            }
            catch (error) {
                logger.error(`Failed to read NODE_EXTRA_CA_CERTS file: ${error}`);
            }
        }
    }
    return defaultOptions;
}
//# sourceMappingURL=proxy.js.map