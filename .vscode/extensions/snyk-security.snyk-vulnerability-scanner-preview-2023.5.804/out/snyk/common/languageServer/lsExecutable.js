"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a, _b, _c, _d, _e, _f, _g;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LsExecutable = void 0;
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const platform_1 = require("../platform");
const supportedPlatforms_1 = require("./supportedPlatforms");
const promises_1 = __importDefault(require("fs/promises"));
class LsExecutable {
    constructor(version, checksum) {
        this.version = version;
        this.checksum = checksum;
    }
    static getFilename(platform) {
        return `${this.filenamePrefix}_${this.filenameSuffixes[platform]}`;
    }
    static getVersionedFilename(platform, version) {
        return `${this.filenamePrefix}_${version}_${this.filenameSuffixes[platform]}`;
    }
    static getPath(customPath) {
        if (customPath) {
            return customPath;
        }
        const platform = this.getCurrentWithArch();
        const homeDir = platform_1.Platform.getHomeDir();
        const lsFilename = this.getFilename(platform);
        const defaultPath = this.defaultPaths[platform];
        const lsDir = path_1.default.join(homeDir, defaultPath, 'snyk-ls');
        return path_1.default.join(lsDir, lsFilename);
    }
    static getCurrentWithArch() {
        let opSys = os_1.default.platform().toString();
        if (opSys === 'win32') {
            opSys = 'windows';
        }
        let opArch = os_1.default.arch();
        if (opArch === 'x64') {
            opArch = 'amd64';
        }
        if (opArch === 'ia32') {
            opArch = '386';
        }
        const supportPlatform = `${opSys}${opArch.charAt(0).toUpperCase()}${opArch.slice(1)}`;
        if (supportedPlatforms_1.SupportedLsPlatformsList.find(p => p === supportPlatform) !== undefined) {
            return supportPlatform;
        }
        throw new Error(`Unsupported platform: ${supportPlatform}`);
    }
    static exists(configuration) {
        return promises_1.default
            .access(LsExecutable.getPath(configuration.getSnykLanguageServerPath()))
            .then(() => true)
            .catch(() => false);
    }
}
exports.LsExecutable = LsExecutable;
LsExecutable.filenamePrefix = 'snyk-ls';
LsExecutable.filenameSuffixes = {
    linux386: 'linux_386',
    linuxAmd64: 'linux_amd64',
    linuxArm64: 'linux_arm64',
    windows386: 'windows_386.exe',
    windowsAmd64: 'windows_amd64.exe',
    darwinAmd64: 'darwin_amd64',
    darwinArm64: 'darwin_arm64',
};
LsExecutable.defaultPaths = {
    linux386: (_a = process.env.XDG_DATA_HOME) !== null && _a !== void 0 ? _a : '/.local/share/',
    linuxAmd64: (_b = process.env.XDG_DATA_HOME) !== null && _b !== void 0 ? _b : '/.local/share/',
    linuxArm64: (_c = process.env.XDG_DATA_HOME) !== null && _c !== void 0 ? _c : '/.local/share/',
    windows386: (_d = process.env.XDG_DATA_HOME) !== null && _d !== void 0 ? _d : '\\AppData\\Local\\',
    windowsAmd64: (_e = process.env.XDG_DATA_HOME) !== null && _e !== void 0 ? _e : '\\AppData\\Local\\',
    darwinAmd64: (_f = process.env.XDG_DATA_HOME) !== null && _f !== void 0 ? _f : '/Library/Application Support/',
    darwinArm64: (_g = process.env.XDG_DATA_HOME) !== null && _g !== void 0 ? _g : '/Library/Application Support/',
};
//# sourceMappingURL=lsExecutable.js.map