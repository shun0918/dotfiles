"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StaticLsApi = void 0;
const axios_1 = __importDefault(require("axios"));
const languageServer_1 = require("../constants/languageServer");
const lsExecutable_1 = require("./lsExecutable");
const proxy_1 = require("../proxy");
class StaticLsApi {
    constructor(workspace, configuration, logger) {
        this.workspace = workspace;
        this.configuration = configuration;
        this.logger = logger;
        this.baseUrl = `https://static.snyk.io/snyk-ls/${languageServer_1.PROTOCOL_VERSION}`;
    }
    async getDownloadUrl(platform) {
        return `${this.baseUrl}/${await this.getFileName(platform)}`;
    }
    async getFileName(platform) {
        return lsExecutable_1.LsExecutable.getVersionedFilename(platform, await this.getLatestVersion());
    }
    async downloadBinary(platform) {
        const axiosCancelToken = axios_1.default.CancelToken.source();
        const downloadUrl = await this.getDownloadUrl(platform);
        const response = axios_1.default.get(downloadUrl, {
            responseType: 'stream',
            cancelToken: axiosCancelToken.token,
            ...(await (0, proxy_1.getAxiosConfig)(this.workspace, this.configuration, this.logger)),
        });
        return [response, axiosCancelToken];
    }
    async getLatestVersion() {
        return Promise.resolve(this.getMetadata().then(metadata => metadata.version));
    }
    async getSha256Checksum(platform) {
        const fileName = await this.getFileName(platform);
        const { data } = await axios_1.default.get(`${this.baseUrl}/snyk-ls_${await this.getLatestVersion()}_SHA256SUMS`, await (0, proxy_1.getAxiosConfig)(this.workspace, this.configuration, this.logger));
        let checksum = '';
        data.split('\n').forEach(line => {
            if (line.includes(fileName)) {
                checksum = line.split(' ')[0].trim().toLowerCase();
            }
        });
        if (checksum == '')
            return Promise.reject(new Error('Checksum not found'));
        return checksum;
    }
    async getMetadata() {
        const response = await axios_1.default.get(`${this.baseUrl}/metadata.json`, await (0, proxy_1.getAxiosConfig)(this.workspace, this.configuration, this.logger));
        return response.data;
    }
}
exports.StaticLsApi = StaticLsApi;
//# sourceMappingURL=staticLsApi.js.map