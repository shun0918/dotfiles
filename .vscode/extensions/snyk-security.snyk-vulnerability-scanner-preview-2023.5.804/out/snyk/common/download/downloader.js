"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Downloader = void 0;
const axios_1 = __importDefault(require("axios"));
const fs = __importStar(require("fs"));
const fs_1 = require("fs");
const fsPromises = __importStar(require("fs/promises"));
const path_1 = __importDefault(require("path"));
const stream = __importStar(require("stream"));
const checksum_1 = require("../../cli/checksum");
const messages_1 = require("../../cli/messages/messages");
const lsExecutable_1 = require("../languageServer/lsExecutable");
class Downloader {
    constructor(configuration, lsApi, window, logger) {
        this.configuration = configuration;
        this.lsApi = lsApi;
        this.window = window;
        this.logger = logger;
    }
    /**
     * Downloads LS. Existing executable is deleted.
     */
    async download() {
        const lsPlatform = lsExecutable_1.LsExecutable.getCurrentWithArch();
        if (lsPlatform === null) {
            return Promise.reject(!messages_1.messages.notSupported);
        }
        return await this.getLsExecutable(lsPlatform);
    }
    async getLsExecutable(lsPlatform) {
        const lsPath = lsExecutable_1.LsExecutable.getPath(this.configuration.getSnykLanguageServerPath());
        const lsDir = path_1.default.dirname(lsPath);
        (0, fs_1.mkdirSync)(lsDir, { recursive: true });
        if (await this.binaryExists(lsPath)) {
            await this.deleteFileAtPath(lsPath);
        }
        const lsVersion = (await this.lsApi.getMetadata()).version;
        const sha256 = await this.lsApi.getSha256Checksum(lsPlatform);
        const checksum = await this.downloadLs(lsPath, lsPlatform, sha256);
        if (!checksum) {
            return null;
        }
        const checksumCorrect = checksum.verify();
        if (!checksumCorrect) {
            return Promise.reject(messages_1.messages.integrityCheckFailed);
        }
        return new lsExecutable_1.LsExecutable(lsVersion, checksum);
    }
    async binaryExists(filePath) {
        try {
            await fsPromises.access(filePath);
            return true;
        }
        catch {
            return false;
        }
    }
    async deleteFileAtPath(filePath) {
        try {
            await fsPromises.unlink(filePath);
        }
        catch (err) {
            return Promise.reject(`${messages_1.messages.couldNotDeleteExecutable} ${err}`);
        }
    }
    async downloadLs(lsPath, platform, expectedChecksum) {
        const hash = new checksum_1.Checksum(expectedChecksum);
        return this.window.withProgress(messages_1.messages.progressTitle, async (progress, token) => {
            const [request, requestToken] = await this.lsApi.downloadBinary(platform);
            token.onCancellationRequested(async () => {
                requestToken.cancel();
                this.logger.info(messages_1.messages.downloadCanceled);
                await this.deleteFileAtPath(lsPath);
            });
            progress.report({ increment: 0 });
            return await this.doDownload(requestToken, token, lsPath, request, hash, progress);
        });
    }
    async doDownload(requestToken, token, path, request, hash, progress) {
        token.onCancellationRequested(async () => {
            requestToken.cancel();
            this.logger.info(messages_1.messages.downloadCanceled);
            await this.deleteFileAtPath(path);
        });
        progress.report({ increment: 0 });
        const writer = fs.createWriteStream(path, {
            mode: 0o766,
        });
        let lastPercentCompleted = 0;
        try {
            const { data, headers } = await request;
            const contentLength = headers['content-length'];
            let downloadedBytes = 0;
            data.on('data', (chunk) => {
                downloadedBytes += chunk.length;
                const percentCompleted = Math.floor((downloadedBytes / contentLength) * 100);
                const increment = percentCompleted - lastPercentCompleted;
                lastPercentCompleted = percentCompleted;
                hash.update(chunk);
                progress.report({ increment: increment });
            });
            data.pipe(writer);
            return new Promise((resolve, reject) => {
                data.on('end', () => {
                    stream.finished(writer, err => {
                        if (err) {
                            reject(err);
                        }
                        else {
                            resolve(hash.digest());
                        }
                    });
                });
            });
        }
        catch (err) {
            if (axios_1.default.isCancel(err)) {
                return null;
            }
            throw err;
        }
    }
}
exports.Downloader = Downloader;
//# sourceMappingURL=downloader.js.map