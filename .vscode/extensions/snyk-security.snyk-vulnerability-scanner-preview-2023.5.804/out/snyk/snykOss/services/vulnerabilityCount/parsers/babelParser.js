"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BabelParser = void 0;
const parser_1 = require("@babel/parser");
const traverse_1 = __importDefault(require("@babel/traverse"));
const t = __importStar(require("@babel/types"));
const glob_1 = require("glob");
const path_1 = __importDefault(require("path"));
const languageConsts_1 = require("../../../../common/constants/languageConsts");
const types_1 = require("../../../../common/types");
const moduleParser_1 = require("./moduleParser");
const PARSE_PLUGINS = [
    'jsx',
    'doExpressions',
    'objectRestSpread',
    'classProperties',
    'asyncGenerators',
    'functionBind',
    'functionSent',
    'dynamicImport',
];
const PARSE_JS_PLUGINS = ['flow', ...PARSE_PLUGINS];
const PARSE_TS_PLUGINS = ['typescript', ...PARSE_PLUGINS];
class BabelParser extends moduleParser_1.ModuleParser {
    getModules(fileName, source, language) {
        const modules = [];
        const visitor = this.getVisitor(fileName, modules);
        const ast = this.parse(source, language);
        (0, traverse_1.default)(ast, visitor);
        return modules;
    }
    getVisitor(fileName, modules) {
        return {
            ImportDeclaration({ node }) {
                const target = `${path_1.default.dirname(fileName)}${path_1.default.sep}${node.source.value}`;
                if (!BabelParser.isLocalFile(target) && node.source.loc && node.loc) {
                    modules.push({
                        fileName,
                        loc: node.source.loc,
                        name: node.source.value,
                        line: node.loc.end.line,
                        string: BabelParser.compileImportString(node),
                    });
                }
            },
            CallExpression({ node }) {
                if (node.callee.name === 'require') {
                    modules.push({
                        fileName,
                        name: BabelParser.getModuleName(node),
                        line: node.loc ? node.loc.end.line : null,
                        loc: node.arguments[0].loc,
                        string: BabelParser.compileRequireString(node),
                    });
                }
                else if (node.callee.type === 'Import') {
                    modules.push({
                        fileName,
                        loc: node.arguments[0].loc,
                        name: BabelParser.getModuleName(node),
                        line: node.loc ? node.loc.end.line : null,
                        string: BabelParser.compileImportExpressionString(node),
                    });
                }
            },
        };
    }
    parse(source, language) {
        const plugins = language === types_1.Language.TypeScript ? PARSE_TS_PLUGINS : PARSE_JS_PLUGINS;
        return (0, parser_1.parse)(source, {
            sourceType: 'module',
            plugins,
        });
    }
    static isLocalFile(path) {
        const foundFiles = [...glob_1.glob.sync(`${path}/index.*`), ...glob_1.glob.sync(`${path}.*`)];
        if (!foundFiles.length) {
            return false;
        }
        let fileExists = false;
        for (let idx = 0; idx < foundFiles.length; idx++) {
            const file = foundFiles[idx];
            if (languageConsts_1.TYPESCRIPT_FILE_REGEX.test(file) || languageConsts_1.JAVASCRIPT_FILE_REGEX.test(file)) {
                fileExists = true;
                break;
            }
        }
        return fileExists;
    }
    static compileImportString(node) {
        let importSpecifiers;
        let importString;
        if (node.specifiers && node.specifiers.length > 0) {
            importString = node.specifiers
                .sort((s1, s2) => {
                // Import specifiers are in statement order, which for mixed imports must be either "defaultImport, * as namespaceImport"
                // or "defaultImport, { namedImport [as alias]... } according to current ECMA-262.
                // Given that two equivalent import statements can only differ in the order of the items in a NamedImports block,
                // we only need to sort these items in relation to each other to normalise the statements for caching purposes.
                // Where the node is anything other than ImportSpecifier (Babel terminology for NamedImports), preserve the original statement order.
                if (t.isImportSpecifier(s1) && t.isImportSpecifier(s2)) {
                    return s1.imported.name < s2.imported.name ? -1 : 1;
                }
                return 0;
            })
                .map((specifier, i) => {
                if (t.isImportNamespaceSpecifier(specifier)) {
                    return `* as ${specifier.local.name}`;
                }
                else if (t.isImportDefaultSpecifier(specifier)) {
                    return specifier.local.name;
                }
                else if (t.isImportSpecifier(specifier)) {
                    if (!importSpecifiers) {
                        importSpecifiers = '{';
                    }
                    importSpecifiers += specifier.imported.name;
                    if (node.specifiers[i + 1] && t.isImportSpecifier(node.specifiers[i + 1])) {
                        importSpecifiers += ', ';
                        return undefined;
                    }
                    else {
                        const result = importSpecifiers + '}';
                        importSpecifiers = undefined;
                        return result;
                    }
                }
                else {
                    return undefined;
                }
            })
                .filter(x => x)
                .join(', ');
        }
        else {
            importString = '* as tmp';
        }
        return `import ${importString} from '${node.source.value}';\nconsole.log(${importString.replace('* as ', '')});`;
    }
    static compileRequireString(node) {
        return `require('${this.getModuleName(node)}')`;
    }
    static compileImportExpressionString(node) {
        return `import('${this.getModuleName(node)}').then(res => console.log(res));`;
    }
    static getModuleName(node) {
        return t.isTemplateLiteral(node.arguments[0])
            ? node.arguments[0].quasis[0].value.raw
            : node.arguments[0].value;
    }
}
exports.BabelParser = BabelParser;
//# sourceMappingURL=babelParser.js.map