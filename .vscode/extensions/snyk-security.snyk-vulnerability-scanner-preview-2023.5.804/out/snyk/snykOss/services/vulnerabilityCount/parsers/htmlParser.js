"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HtmlParser = void 0;
const htmlparser2 = __importStar(require("htmlparser2"));
const moduleParser_1 = require("./moduleParser");
class SupportedSources {
}
SupportedSources.PathBased = [
    'https://maxcdn.bootstrapcdn.com/',
    'https://yastatic.net/',
    'https://stackpath.bootstrapcdn.com/',
];
SupportedSources.AtBased = ['https://cdn.jsdelivr.net/', 'https://unpkg.com/'];
SupportedSources.JQuery = 'https://code.jquery.com/';
SupportedSources.AspNetCDN = 'https://ajax.aspnetcdn.com/ajax/';
class HtmlParser extends moduleParser_1.ModuleParser {
    getModules(fileName, source) {
        const packages = [];
        const parser = new htmlparser2.Parser({
            onopentag: (name, attribs) => {
                if (name === 'script' &&
                    attribs.src &&
                    (attribs.type || 'javascript/text').toLowerCase() === 'javascript/text') {
                    const pkg = this.getPackageFromUrl(attribs.src);
                    if (pkg) {
                        const [name, version] = pkg.split('@');
                        const offsetLines = this.getOffsetLines(parser.startIndex, source);
                        const currentLine = offsetLines.length;
                        const currentLineOffsetLength = offsetLines[offsetLines.length - 1].length;
                        const startCol = source.substring(parser.startIndex).indexOf(attribs.src) + currentLineOffsetLength;
                        packages.push({
                            loc: {
                                start: {
                                    line: currentLine,
                                    column: startCol,
                                },
                                end: {
                                    line: currentLine,
                                    column: startCol + attribs.src.length,
                                },
                            },
                            fileName,
                            line: currentLine,
                            name,
                            version,
                            string: attribs.src,
                        });
                    }
                }
            },
        }, { decodeEntities: true });
        parser.write(source);
        parser.end();
        return packages;
    }
    getPackageFromUrl(url) {
        let i = url.toLowerCase().indexOf('/ajax/libs/');
        url = url.replace(/(.slim)?(\.min)?.js$/, '');
        if (i !== -1) {
            i += '/ajax/libs/'.length;
            const pkg = url.substring(i);
            const [name, version = 'latest'] = pkg.split('/');
            return `${name}@${version}`;
        }
        const isPathBased = SupportedSources.PathBased.find(_ => url.toLowerCase().startsWith(_));
        if (isPathBased) {
            const pkg = url.substring(isPathBased.length);
            const seperator = pkg.includes('/') ? '/' : '-';
            const [name, version = 'latest'] = pkg.split(seperator);
            return `${name}@${version}`;
        }
        if (url.toLowerCase().startsWith(SupportedSources.JQuery)) {
            const pkg = url.substring(SupportedSources.JQuery.length);
            const [name, ...version] = pkg.split('-');
            return `${name}@${version.join('-')}`;
        }
        if (url.toLowerCase().startsWith(SupportedSources.AspNetCDN)) {
            const pkg = url.substring(SupportedSources.AspNetCDN.length);
            const [name, ...version] = pkg.split('-');
            return `${name.split('/').pop()}@${version.join('-')}`;
        }
        const isAtBased = SupportedSources.AtBased.find(_ => url.toLowerCase().startsWith(_));
        if (isAtBased) {
            const pkg = url
                .substring(isAtBased.length)
                .split('/')
                .find(str => str.includes('@'));
            return pkg;
        }
        return undefined;
    }
    getOffsetLines(index, source) {
        return source.substring(0, index).split('\n');
    }
}
exports.HtmlParser = HtmlParser;
//# sourceMappingURL=htmlParser.js.map