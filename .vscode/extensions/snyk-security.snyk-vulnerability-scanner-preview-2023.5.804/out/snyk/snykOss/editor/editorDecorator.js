"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EditorDecorator = void 0;
const lodash_1 = __importDefault(require("lodash"));
const editorDecorator_1 = require("../../common/editor/editorDecorator");
const vulnerabilityCount_1 = require("../messages/vulnerabilityCount");
class EditorDecorator {
    constructor(window, languages, themeColorAdapter) {
        this.window = window;
        this.languages = languages;
        this.themeColorAdapter = themeColorAdapter;
        this.editorLastCharacterIndex = Number.MAX_SAFE_INTEGER;
        this.updateTimeout = undefined;
        this.fileDecorationMap = new Map();
        this.decorationType = this.window.createTextEditorDecorationType({
            after: { margin: '0 0 0 1rem' },
        });
    }
    get fileDecorations() {
        return this.fileDecorationMap;
    }
    resetDecorations(filePath) {
        const decorations = this.fileDecorationMap.get(filePath);
        if (!decorations) {
            return;
        }
        const emptyDecorations = decorations.map(d => ({
            ...d,
            renderOptions: (0, editorDecorator_1.getRenderOptions)('', this.themeColorAdapter),
        }));
        this.fileDecorationMap.set(filePath, emptyDecorations);
        this.triggerUpdateDecorations(filePath);
    }
    setScanStartDecorations(filePath, modules) {
        const lineDecorations = [];
        for (const module of modules) {
            if (module.line == null) {
                continue;
            }
            lineDecorations[module.line] = {
                range: this.languages.createRange(module.line - 1, this.editorLastCharacterIndex, module.line - 1, this.editorLastCharacterIndex),
                renderOptions: (0, editorDecorator_1.getRenderOptions)(vulnerabilityCount_1.messages.fetchingVulnerabilities, this.themeColorAdapter),
            };
        }
        if (!lineDecorations.length) {
            // return early when no decorations have been created
            return;
        }
        this.fileDecorationMap.set(filePath, lineDecorations);
        this.triggerUpdateDecorations(filePath);
    }
    setScanDoneDecorations(filePath, vulnerabilityCounts) {
        for (const moduleVulnerabilityCount of vulnerabilityCounts) {
            this.setScannedDecoration(moduleVulnerabilityCount, false);
        }
        this.triggerUpdateDecorations(filePath);
    }
    setScannedDecoration(vulnerabilityCount, triggerUpdate = true) {
        if (lodash_1.default.isNull(vulnerabilityCount.line)) {
            return;
        }
        const filePath = vulnerabilityCount.fileName;
        let lineDecorations = this.fileDecorationMap.get(filePath);
        if (!lineDecorations) {
            lineDecorations = [];
            this.fileDecorationMap.set(filePath, lineDecorations); // set map, if no decoration was set before
        }
        const text = vulnerabilityCount.count ? vulnerabilityCount_1.messages.decoratorMessage(vulnerabilityCount.count) : '';
        lineDecorations[vulnerabilityCount.line] = {
            range: this.languages.createRange(vulnerabilityCount.line - 1, this.editorLastCharacterIndex, vulnerabilityCount.line - 1, this.editorLastCharacterIndex),
            renderOptions: (0, editorDecorator_1.getRenderOptions)(text, this.themeColorAdapter),
        };
        if (triggerUpdate) {
            this.triggerUpdateDecorations(filePath, 500);
        }
    }
    triggerUpdateDecorations(filePath, updateTimeoutInMs = 10) {
        if (this.updateTimeout) {
            clearTimeout(this.updateTimeout);
            this.updateTimeout = undefined;
        }
        const lineDecorations = this.fileDecorationMap.get(filePath) || [];
        this.updateTimeout = setTimeout(() => (0, editorDecorator_1.updateDecorations)(this.window, filePath, lineDecorations, this.decorationType), updateTimeoutInMs);
    }
}
exports.EditorDecorator = EditorDecorator;
//# sourceMappingURL=editorDecorator.js.map