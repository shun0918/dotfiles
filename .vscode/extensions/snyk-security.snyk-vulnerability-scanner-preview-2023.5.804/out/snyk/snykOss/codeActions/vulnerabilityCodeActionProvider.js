"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VulnerabilityCodeActionProvider = void 0;
const types_1 = require("../../common/commands/types");
const commands_1 = require("../../common/constants/commands");
const general_1 = require("../../common/constants/general");
const analysis_1 = require("../../snykCode/constants/analysis");
const vulnerabilityCount_1 = require("../messages/vulnerabilityCount");
const ossResult_1 = require("../ossResult");
class VulnerabilityCodeActionProvider {
    constructor(ossService, vulnerabilityCountProvider, codeActionKindProvider, analytics) {
        this.ossService = ossService;
        this.vulnerabilityCountProvider = vulnerabilityCountProvider;
        this.codeActionKindProvider = codeActionKindProvider;
        this.analytics = analytics;
        this.codeActionKinds = [this.codeActionKindProvider.getQuickFix()];
    }
    async provideCodeActions(document, _, context) {
        const ossDiagnostics = context.diagnostics.filter(d => d.source === analysis_1.DIAGNOSTICS_OSS_COLLECTION_NAME);
        if (!ossDiagnostics.length) {
            return;
        }
        const ossResult = this.ossService.getResultArray();
        if (!ossResult) {
            return;
        }
        const fileResult = ossResult.find(res => !(0, ossResult_1.isResultCliError)(res) && this.vulnerabilityCountProvider.isFilePartOfOssTest(document.fileName, res));
        if (!fileResult || (0, ossResult_1.isResultCliError)(fileResult)) {
            return;
        }
        for (const diagnostic of ossDiagnostics) {
            const vulnerability = fileResult.vulnerabilities.find(vuln => vuln.id === diagnostic.code);
            if (!vulnerability) {
                continue;
            }
            const command = {
                command: commands_1.SNYK_OPEN_ISSUE_COMMAND,
                title: vulnerabilityCount_1.messages.showMostSevereVulnerability,
                arguments: [
                    {
                        issueType: types_1.OpenCommandIssueType.OssVulnerability,
                        issue: await this.ossService.getOssIssueCommandArg(vulnerability, fileResult.vulnerabilities),
                    },
                ],
            };
            this.analytics.logQuickFixIsDisplayed({
                quickFixType: ['Show Most Severe Vulnerability'],
                ide: general_1.IDE_NAME,
            });
            return [command];
        }
    }
}
exports.VulnerabilityCodeActionProvider = VulnerabilityCodeActionProvider;
//# sourceMappingURL=vulnerabilityCodeActionProvider.js.map