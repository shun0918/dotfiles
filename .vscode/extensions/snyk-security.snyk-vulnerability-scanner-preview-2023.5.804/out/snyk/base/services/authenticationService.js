"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthenticationService = void 0;
const uuid_1 = require("uuid");
const languageServer_1 = require("../../common/constants/languageServer");
const views_1 = require("../../common/constants/views");
class AuthenticationService {
    constructor(contextService, baseModule, configuration, window, analytics, logger, clientAdapter, commands) {
        this.contextService = contextService;
        this.baseModule = baseModule;
        this.configuration = configuration;
        this.window = window;
        this.analytics = analytics;
        this.logger = logger;
        this.clientAdapter = clientAdapter;
        this.commands = commands;
    }
    async initiateLogin() {
        this.analytics.logAuthenticateButtonIsClicked();
        await this.contextService.setContext(views_1.SNYK_CONTEXT.LOGGEDIN, false);
        await this.contextService.setContext(views_1.SNYK_CONTEXT.AUTHENTICATING, true);
    }
    async initiateLogout() {
        await this.configuration.clearToken();
        await this.contextService.setContext(views_1.SNYK_CONTEXT.LOGGEDIN, false);
    }
    async setToken() {
        const token = await this.window.showInputBox({
            placeHolder: 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx',
            password: true,
            validateInput: token => {
                const valid = (0, uuid_1.validate)(token);
                if (!valid) {
                    return 'The entered token has an invalid format.';
                }
            },
        });
        if (!token)
            return;
        await this.configuration.setToken(token);
        return await this.clientAdapter.getLanguageClient().sendNotification(languageServer_1.DID_CHANGE_CONFIGURATION_METHOD, {});
    }
    async updateToken(token) {
        if (!token) {
            await this.initiateLogout();
        }
        else {
            if (!(0, uuid_1.validate)(token))
                return Promise.reject(new Error('The entered token has an invalid format.'));
            await this.configuration.setToken(token);
            await this.contextService.setContext(views_1.SNYK_CONTEXT.AUTHENTICATING, false);
            await this.contextService.setContext(views_1.SNYK_CONTEXT.LOGGEDIN, true);
            this.baseModule.loadingBadge.setLoadingBadge(false);
            await this.commands.executeCommand(languageServer_1.SNYK_WORKSPACE_SCAN_COMMAND);
        }
    }
}
exports.AuthenticationService = AuthenticationService;
//# sourceMappingURL=authenticationService.js.map