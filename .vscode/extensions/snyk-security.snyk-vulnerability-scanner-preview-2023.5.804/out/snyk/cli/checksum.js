"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Checksum = void 0;
const crypto = __importStar(require("crypto"));
const fs = __importStar(require("fs"));
class Checksum {
    constructor(expected) {
        this.expected = expected;
        this.hash = crypto.createHash('sha256');
    }
    get checksum() {
        return this.hexDigest;
    }
    verify() {
        return this.checksum === this.expected;
    }
    update(buffer) {
        this.hash.update(buffer);
    }
    digest() {
        this.hexDigest = this.hash.digest('hex');
        return this;
    }
    static getChecksumOf(filePath, expectedChecksum) {
        return new Promise((resolve, reject) => {
            const checksum = new Checksum(expectedChecksum);
            const fileStream = fs.createReadStream(filePath);
            fileStream.on('error', err => {
                reject(err);
            });
            fileStream.on('data', (chunk) => {
                checksum.update(chunk);
            });
            fileStream.on('end', function () {
                checksum.digest();
                return resolve(checksum);
            });
        });
    }
    static fromDigest(digest, expected) {
        const d = new Checksum(expected);
        d.hexDigest = digest;
        return d;
    }
}
exports.Checksum = Checksum;
//# sourceMappingURL=checksum.js.map