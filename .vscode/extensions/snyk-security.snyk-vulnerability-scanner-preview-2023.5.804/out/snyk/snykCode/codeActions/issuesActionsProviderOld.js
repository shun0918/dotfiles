"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SnykIssuesActionProviderOld = void 0;
const types_1 = require("../../common/commands/types");
const commands_1 = require("../../common/constants/commands");
const general_1 = require("../../common/constants/general");
const analysis_1 = require("../constants/analysis");
const issueUtils_1 = require("../utils/issueUtils");
class SnykIssuesActionProviderOld {
    constructor(issuesList, callbacks, codeActionAdapter, codeActionKindProvider, analytics) {
        this.codeActionAdapter = codeActionAdapter;
        this.codeActionKindProvider = codeActionKindProvider;
        this.analytics = analytics;
        this.providedCodeActionKinds = [this.codeActionKindProvider.getQuickFix()];
        this.issuesList = issuesList;
        this.findSuggestion = callbacks.findSuggestion;
        this.trackIgnoreSuggestion = callbacks.trackIgnoreSuggestion;
    }
    getProvidedCodeActionKinds() {
        return this.providedCodeActionKinds;
    }
    createIgnoreIssueAction({ document, matchedIssue, isFileIgnore, }) {
        const ignoreIssueAction = this.codeActionAdapter.create(isFileIgnore ? analysis_1.FILE_IGNORE_ACTION_NAME : analysis_1.IGNORE_ISSUE_ACTION_NAME, this.providedCodeActionKinds[0]);
        const suggestion = this.findSuggestion(matchedIssue);
        if (suggestion)
            ignoreIssueAction.command = {
                command: commands_1.SNYK_IGNORE_ISSUE_COMMAND,
                title: commands_1.SNYK_IGNORE_ISSUE_COMMAND,
                arguments: [{ uri: document.uri, matchedIssue, ruleId: suggestion.rule, isFileIgnore }],
            };
        return ignoreIssueAction;
    }
    createShowIssueAction({ document, matchedIssue, }) {
        const showIssueAction = this.codeActionAdapter.create(analysis_1.SHOW_ISSUE_ACTION_NAME, this.providedCodeActionKinds[0]);
        const suggestion = this.findSuggestion(matchedIssue);
        if (suggestion)
            showIssueAction.command = {
                command: commands_1.SNYK_OPEN_ISSUE_COMMAND,
                title: commands_1.SNYK_OPEN_ISSUE_COMMAND,
                arguments: [
                    {
                        issueType: types_1.OpenCommandIssueType.CodeIssueOld,
                        issue: {
                            message: matchedIssue.message,
                            filePath: document.uri,
                            range: matchedIssue.range,
                            diagnostic: matchedIssue,
                        },
                    },
                ],
            };
        return showIssueAction;
    }
    provideCodeActions(document, clickedRange) {
        if (!this.issuesList || !this.issuesList.has(document.uri)) {
            return undefined;
        }
        const fileIssues = this.issuesList && this.issuesList.get(document.uri);
        const matchedIssue = issueUtils_1.IssueUtils.findIssueWithRange(clickedRange, fileIssues);
        if (matchedIssue) {
            const codeActionParams = { document, matchedIssue };
            const showIssueAction = this.createShowIssueAction(codeActionParams);
            const ignoreIssueAction = this.createIgnoreIssueAction(codeActionParams);
            const fileIgnoreIssueAction = this.createIgnoreIssueAction({
                ...codeActionParams,
                isFileIgnore: true,
            });
            this.analytics.logQuickFixIsDisplayed({
                quickFixType: ['Show Suggestion', 'Ignore Suggestion In Line', 'Ignore Suggestion In File'],
                ide: general_1.IDE_NAME,
            });
            // returns list of actions, all new actions should be added to this list
            return [showIssueAction, ignoreIssueAction, fileIgnoreIssueAction];
        }
        return undefined;
    }
}
exports.SnykIssuesActionProviderOld = SnykIssuesActionProviderOld;
//# sourceMappingURL=issuesActionsProviderOld.js.map