"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DisposableHoverProvider = void 0;
const general_1 = require("../../common/constants/general");
const analysis_1 = require("../constants/analysis");
const issueUtils_1 = require("../utils/issueUtils");
class DisposableHoverProvider {
    constructor(analyzer, logger, vscodeLanguages, analytics, markdownStringAdapter) {
        this.analyzer = analyzer;
        this.logger = logger;
        this.vscodeLanguages = vscodeLanguages;
        this.analytics = analytics;
        this.markdownStringAdapter = markdownStringAdapter;
    }
    register(snykReview, hoverAdapter) {
        this.hoverProvider = this.vscodeLanguages.registerHoverProvider({ scheme: 'file', language: '*' }, {
            provideHover: this.getHover(snykReview, hoverAdapter),
        });
        return this;
    }
    getHover(snykReview, hoverAdapter) {
        return (document, position) => {
            if (!snykReview || !snykReview.has(document.uri)) {
                return undefined;
            }
            const currentFileReviewIssues = snykReview.get(document.uri);
            const issue = issueUtils_1.IssueUtils.findIssueWithRange(position, currentFileReviewIssues);
            if (issue) {
                this.logIssueHoverIsDisplayed(issue);
                const ignoreMarkdown = this.markdownStringAdapter.get(analysis_1.IGNORE_TIP_FOR_USER);
                return hoverAdapter.create(ignoreMarkdown);
            }
        };
    }
    logIssueHoverIsDisplayed(issue) {
        const suggestion = this.analyzer.findSuggestion(issue);
        if (!suggestion) {
            this.logger.debug('Failed to log hover displayed analytical event.');
            return;
        }
        this.analytics.logIssueHoverIsDisplayed({
            issueId: suggestion.id,
            issueType: issueUtils_1.IssueUtils.getIssueType(suggestion.isSecurityType),
            severity: issueUtils_1.IssueUtils.severityAsText(suggestion.severity),
            ide: general_1.IDE_NAME,
        });
    }
    dispose() {
        if (this.hoverProvider) {
            this.hoverProvider.dispose();
        }
    }
}
exports.DisposableHoverProvider = DisposableHoverProvider;
//# sourceMappingURL=hoverProvider.js.map