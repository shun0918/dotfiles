"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDCIgnore = void 0;
const code_client_1 = require("@snyk/code-client");
const buffer_1 = require("buffer");
const fs = __importStar(require("fs"));
const createDCIgnore = async (path, custom, workspace, window, uriAdapter) => {
    const content = buffer_1.Buffer.from(custom ? code_client_1.constants.DCIGNORE_DRAFTS.custom : code_client_1.constants.DCIGNORE_DRAFTS.default);
    const filePath = `${path}/${code_client_1.constants.DCIGNORE_FILENAME}`;
    const openPath = uriAdapter.file(filePath);
    // We don't want to override the dcignore file with an empty one.
    if (!custom || !fs.existsSync(filePath))
        await workspace.fs.writeFile(openPath, content);
    const doc = await workspace.openTextDocumentViaUri(openPath);
    void window.showTextDocument(doc);
};
exports.createDCIgnore = createDCIgnore;
//# sourceMappingURL=ignoreFileUtils.js.map