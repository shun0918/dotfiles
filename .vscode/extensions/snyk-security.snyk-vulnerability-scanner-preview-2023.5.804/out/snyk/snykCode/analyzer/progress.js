"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Progress = void 0;
const code_client_1 = require("@snyk/code-client");
const lodash_1 = __importDefault(require("lodash"));
const extension_1 = require("../../../extension");
const views_1 = require("../../common/constants/views");
const logger_1 = require("../../common/logger/logger");
const filesWatcher_1 = __importDefault(require("../watchers/filesWatcher"));
class Progress {
    constructor(snykCode, viewManagerService, workspace) {
        this.snykCode = snykCode;
        this.viewManagerService = viewManagerService;
        this.workspace = workspace;
        this.emitter = code_client_1.emitter;
    }
    bindListeners() {
        this.emitter.on(this.emitter.events.supportedFilesLoaded, (data) => this.onSupportedFilesLoaded(data));
        this.emitter.on(this.emitter.events.scanFilesProgress, (value) => this.onScanFilesProgress(value));
        this.emitter.on(this.emitter.events.createBundleProgress, (processed, total) => this.onCreateBundleProgress(processed, total));
        this.emitter.on(this.emitter.events.uploadBundleProgress, (processed, total) => this.onUploadBundleProgress(processed, total));
        this.emitter.on(this.emitter.events.analyseProgress, (data) => this.onAnalyseProgress(data));
        this.emitter.on(this.emitter.events.apiRequestLog, (message) => Progress.onAPIRequestLog(message));
        this.emitter.on(this.emitter.events.error, (requestId) => this.snykCode.errorEncountered(requestId));
    }
    updateStatus(status, progress) {
        this.snykCode.updateStatus(status, progress);
        this.viewManagerService.refreshAllOldCodeAnalysisViews();
    }
    onSupportedFilesLoaded(data) {
        const msg = data ? 'Ignore rules loading' : 'Loading';
        this.updateStatus(views_1.SNYK_ANALYSIS_STATUS.FILTERS, msg);
        // Setup file watcher
        if (!this.filesWatcher && data) {
            this.filesWatcher = (0, filesWatcher_1.default)((0, extension_1.getExtension)(), this.workspace, data);
        }
    }
    onScanFilesProgress(value) {
        this.updateStatus(views_1.SNYK_ANALYSIS_STATUS.COLLECTING, `${value}`);
    }
    onCreateBundleProgress(processed, total) {
        this.updateStatus(views_1.SNYK_ANALYSIS_STATUS.BUNDLING, `${processed}/${total}`);
    }
    onUploadBundleProgress(processed, total) {
        this.updateStatus(views_1.SNYK_ANALYSIS_STATUS.UPLOADING, `${processed}/${total}`);
    }
    onAnalyseProgress(data) {
        this.updateStatus(lodash_1.default.capitalize(lodash_1.default.toLower(data.status)), `${Math.round(100 * data.progress)}%`);
    }
    removeAllListeners() {
        this.emitter.removeAllListeners();
    }
    static onAPIRequestLog(message) {
        logger_1.Logger.debug(message.slice(0, 399));
    }
}
exports.Progress = Progress;
//# sourceMappingURL=progress.js.map