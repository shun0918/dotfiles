"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodeSettings = void 0;
const views_1 = require("../common/constants/views");
const cliConfigService_1 = require("../common/services/cliConfigService");
class CodeSettings {
    constructor(snykApiClient, contextService, config, openerService) {
        this.snykApiClient = snykApiClient;
        this.contextService = contextService;
        this.config = config;
        this.openerService = openerService;
        this.sleep = (duration) => new Promise(resolve => setTimeout(resolve, duration));
    }
    get reportFalsePositivesEnabled() {
        return this._reportFalsePositivesEnabled;
    }
    async checkCodeEnabled() {
        var _a;
        const settings = await this.getSastSettings();
        if (!settings) {
            return false;
        }
        await this.contextService.setContext(views_1.SNYK_CONTEXT.CODE_ENABLED, settings.sastEnabled);
        await this.contextService.setContext(views_1.SNYK_CONTEXT.CODE_LOCAL_ENGINE_ENABLED, (_a = settings.localCodeEngine.enabled) !== null && _a !== void 0 ? _a : false);
        return settings.sastEnabled && !settings.localCodeEngine.enabled;
    }
    async enable() {
        let settings = await this.getSastSettings();
        if (settings === null || settings === void 0 ? void 0 : settings.sastEnabled) {
            return true;
        }
        if (this.config.snykCodeUrl != null) {
            await this.openerService.openBrowserUrl(this.config.snykCodeUrl);
        }
        // Poll for changed settings (65 sec)
        for (let i = 2; i < 12; i += 1) {
            // eslint-disable-next-line no-await-in-loop
            await this.sleep(i * 1000);
            // eslint-disable-next-line no-await-in-loop
            settings = await this.getSastSettings();
            if (settings === null || settings === void 0 ? void 0 : settings.sastEnabled) {
                return true;
            }
        }
        return false;
    }
    async getSastSettings() {
        const settings = await (0, cliConfigService_1.getSastSettings)(this.snykApiClient, this.config);
        if (settings) {
            // cache if false positive reports are enabled.
            this._reportFalsePositivesEnabled = settings.reportFalsePositivesEnabled;
        }
        return settings;
    }
}
exports.CodeSettings = CodeSettings;
//# sourceMappingURL=codeSettings.js.map