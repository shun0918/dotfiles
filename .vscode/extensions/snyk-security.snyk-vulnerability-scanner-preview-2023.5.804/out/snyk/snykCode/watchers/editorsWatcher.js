"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const vscode = __importStar(require("vscode"));
class SnykEditorsWatcher {
    constructor() {
        this.currentTextEditors = {};
    }
    createEditorInfo(editor) {
        const path = editor.document.fileName;
        const workspacePath = (vscode.workspace.workspaceFolders || [])
            .map(f => f.uri.fsPath)
            .find(p => editor.document.fileName.includes(p));
        this.currentTextEditors[editor.document.fileName] = {
            fullPath: path,
            workspace: workspacePath || '',
            lineCount: {
                current: editor.document.lineCount,
                prevOffset: 0,
            },
            contentChanges: [],
            document: editor.document,
        };
    }
    watchEditorsNavChange() {
        vscode.window.onDidChangeActiveTextEditor((editor) => {
            if (editor && !this.currentTextEditors[editor.document.fileName]) {
                this.createEditorInfo(editor);
            }
        });
    }
    watchClosingEditor() {
        vscode.workspace.onDidCloseTextDocument((document) => {
            delete this.currentTextEditors[document.fileName];
        });
    }
    watchEditorCodeChanges(extension) {
        vscode.workspace.onDidChangeTextDocument((event) => {
            const currentEditorFileName = event.document.fileName;
            if (this.currentTextEditors[currentEditorFileName] && event.contentChanges && event.contentChanges.length) {
                const curentLineCount = this.currentTextEditors[currentEditorFileName].lineCount.current;
                this.currentTextEditors[currentEditorFileName] = {
                    ...this.currentTextEditors[currentEditorFileName],
                    lineCount: {
                        current: event.document.lineCount,
                        prevOffset: event.document.lineCount - curentLineCount,
                    },
                    contentChanges: [...event.contentChanges],
                    document: event.document,
                };
                void extension.snykCodeOld.analyzer.updateReviewResultsPositions(extension, this.currentTextEditors[currentEditorFileName]);
            }
        });
    }
    async prepareWatchers(extension) {
        for await (const editor of vscode.window.visibleTextEditors) {
            this.createEditorInfo(editor);
        }
        this.watchEditorsNavChange();
        this.watchClosingEditor();
        this.watchEditorCodeChanges(extension);
    }
    activate(extension) {
        void this.prepareWatchers(extension);
    }
}
exports.default = SnykEditorsWatcher;
//# sourceMappingURL=editorsWatcher.js.map