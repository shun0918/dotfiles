"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FalsePositiveWebviewProvider = void 0;
const vscode = __importStar(require("vscode"));
const commands_1 = require("../../../common/constants/commands");
const views_1 = require("../../../common/constants/views");
const errorHandler_1 = require("../../../common/error/errorHandler");
const nonce_1 = require("../../../common/views/nonce");
const webviewPanelSerializer_1 = require("../../../common/views/webviewPanelSerializer");
const webviewProvider_1 = require("../../../common/views/webviewProvider");
const error_1 = require("../../messages/error");
var FalsePositiveViewEventMessageType;
(function (FalsePositiveViewEventMessageType) {
    FalsePositiveViewEventMessageType["OpenBrowser"] = "openBrowser";
    FalsePositiveViewEventMessageType["Close"] = "close";
    FalsePositiveViewEventMessageType["Send"] = "send";
})(FalsePositiveViewEventMessageType || (FalsePositiveViewEventMessageType = {}));
class FalsePositiveWebviewProvider extends webviewProvider_1.WebviewProvider {
    constructor(codeService, window, context, logger, analytics) {
        super(context, logger);
        this.codeService = codeService;
        this.window = window;
        this.context = context;
        this.logger = logger;
        this.analytics = analytics;
    }
    activate() {
        this.context.addDisposables(this.window.registerWebviewPanelSerializer(views_1.SNYK_VIEW_FALSE_POSITIVE_CODE, new webviewPanelSerializer_1.WebviewPanelSerializer(this)));
    }
    async showPanel(model) {
        try {
            if (this.panel) {
                this.panel.reveal(vscode.ViewColumn.One, true);
            }
            else {
                this.panel = vscode.window.createWebviewPanel(views_1.SNYK_VIEW_FALSE_POSITIVE_CODE, 'Snyk Report False Positive', {
                    viewColumn: vscode.ViewColumn.One,
                    preserveFocus: true,
                }, this.getWebviewOptions());
                this.registerListeners();
            }
            this.panel.webview.html = this.getHtmlForWebview(this.panel.webview);
            await this.panel.webview.postMessage({ type: 'set', args: model });
            this.analytics.logFalsePositiveIsDisplayed();
        }
        catch (e) {
            errorHandler_1.ErrorHandler.handle(e, this.logger, error_1.messages.reportFalsePositiveViewShowFailed);
        }
    }
    registerListeners() {
        if (!this.panel)
            return;
        this.panel.onDidDispose(() => this.onPanelDispose(), null, this.disposables);
        this.panel.webview.onDidReceiveMessage(async (data) => {
            switch (data.type) {
                case FalsePositiveViewEventMessageType.Send:
                    // eslint-disable-next-line no-case-declarations
                    const { falsePositive, content, isSecurityTypeIssue, issueSeverity } = data.value;
                    await this.reportFalsePositive(falsePositive, content, isSecurityTypeIssue, issueSeverity);
                    break;
                case FalsePositiveViewEventMessageType.OpenBrowser:
                    void vscode.commands.executeCommand(commands_1.SNYK_OPEN_BROWSER_COMMAND, data.value);
                    break;
                case FalsePositiveViewEventMessageType.Close:
                    this.disposePanel();
                    break;
                default:
                    break;
            }
        }, null, this.disposables);
        this.panel.onDidChangeViewState(() => this.checkVisibility(), null, this.disposables);
    }
    async reportFalsePositive(falsePositive, content, isSecurityTypeIssue, issueSeverity) {
        falsePositive.content = content;
        await this.codeService.reportFalsePositive(falsePositive, isSecurityTypeIssue, issueSeverity);
    }
    getHtmlForWebview(webview) {
        const images = [
            ['dark-critical-severity', 'svg'],
            ['dark-high-severity', 'svg'],
            ['dark-medium-severity', 'svg'],
            ['dark-low-severity', 'svg'],
            ['warning', 'svg'],
        ].reduce((accumulator, [name, ext]) => {
            const uri = this.getWebViewUri('media', 'images', `${name}.${ext}`);
            if (!uri)
                throw new Error('Image missing.');
            accumulator[name] = uri.toString();
            return accumulator;
        }, {});
        const scriptUri = this.getWebViewUri('out', 'snyk', 'snykCode', 'views', 'falsePositive', 'falsePositiveWebviewScript.js');
        const styleUri = this.getWebViewUri('media', 'views', 'snykCode', 'falsePositive', 'falsePositive.css');
        const nonce = (0, nonce_1.getNonce)();
        return `<!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">

				<!--
					Use a content security policy to only allow loading images from https or from our extension directory,
					and only allow scripts that have a specific nonce.
				-->
				<meta http-equiv="Content-Security-Policy" content="default-src 'none'; style-src ${webview.cspSource}; img-src ${webview.cspSource} https:; script-src 'nonce-${nonce}';">

				<link href="${styleUri}" rel="stylesheet">
			</head>
			<body>
        <div class="suggestion">
          <section>
            <div class="severity">
              <img id="lowl" class="icon light-only hidden" src="${images['dark-low-severity']}" />
              <img id="lowd" class="icon dark-only hidden" src="${images['dark-low-severity']}" />
              <img id="mediuml" class="icon light-only hidden" src="${images['dark-medium-severity']}" />
              <img id="mediumd" class="icon dark-only hidden" src="${images['dark-medium-severity']}" />
              <img id="highl" class="icon light-only hidden" src="${images['dark-high-severity']}" />
              <img id="highd" class="icon dark-only hidden" src="${images['dark-high-severity']}" />
              <img id="criticall" class="icon light-only hidden" src="${images['dark-critical-severity']}" />
              <img id="criticald" class="icon dark-only hidden" src="${images['dark-critical-severity']}" />
              <span id="severity-text"></span>
            </div>
            <div class="suggestion-text"></div>
            <div class="identifiers"></div>
          </section>
          <section class="delimiter-top editor-section">
            <textarea class="editor"></textarea>
          </section>
          <section class="delimiter-top">
          <div class="warning">
            <img src="${images['warning']}" />
            <span>Please check the code. It will be uploaded to Snyk and manually reviewed by our engineers.</span>
          </div>
          </section>
          <section class="delimiter-top">
          <div class="actions">
            <button id="send" class="button">Send code</button>
            <button id="cancel" class="button secondary">Cancel <span id="line-position2"></span></button>
          </div>
        </div>
          </section>
        </div>
				<script nonce="${nonce}" src="${scriptUri}"></script>
			</body>
			</html>`;
    }
}
exports.FalsePositiveWebviewProvider = FalsePositiveWebviewProvider;
//# sourceMappingURL=falsePositiveWebviewProvider.js.map