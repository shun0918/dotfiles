"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IssueTreeProvider = void 0;
const types_1 = require("../../common/commands/types");
const commands_1 = require("../../common/constants/commands");
const issueTreeProvider_1 = require("../../common/views/issueTreeProvider");
const analysis_1 = require("../messages/analysis");
const issueUtils_1 = require("../utils/issueUtils");
class IssueTreeProvider extends issueTreeProvider_1.ProductIssueTreeProvider {
    constructor(contextService, codeService, configuration, languages, isSecurityType) {
        super(contextService, codeService, configuration, languages);
        this.contextService = contextService;
        this.codeService = codeService;
        this.configuration = configuration;
        this.languages = languages;
        this.isSecurityType = isSecurityType;
        this.getRunTestMessage = () => analysis_1.messages.runTest;
        this.getIssueTitle = (issue) => issue.additionalData.message;
    }
    shouldShowTree() {
        return this.contextService.shouldShowCodeAnalysis;
    }
    filterIssues(issues) {
        return issues.filter(i => i.additionalData.isSecurityType == this.isSecurityType);
    }
    getIssueRange(issue) {
        return issueUtils_1.IssueUtils.createVsCodeRange(issue.additionalData, this.languages);
    }
    getOpenIssueCommand(issue, folderPath, filePath) {
        return {
            command: commands_1.SNYK_OPEN_ISSUE_COMMAND,
            title: '',
            arguments: [
                {
                    issueType: types_1.OpenCommandIssueType.CodeIssue,
                    issue: {
                        id: issue.id,
                        folderPath,
                        filePath,
                        range: this.getIssueRange(issue),
                    },
                },
            ],
        };
    }
}
exports.IssueTreeProvider = IssueTreeProvider;
//# sourceMappingURL=issueTreeProvider.js.map