"use strict";
/**
 * This file is auto-generated by Amplitude.
 * To update run 'ampli pull visual-studio-code'
 *
 * Works with versions ^2.0.8 of @itly/sdk and @itly/plugin's
 * https://www.npmjs.com/search?q=%40itly
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WelcomeIsViewed = exports.WelcomeButtonIsClicked = exports.ScanModeIsSelected = exports.QuickFixIsDisplayed = exports.PluginIsInstalled = exports.IssueInTreeIsClicked = exports.IssueHoverIsDisplayed = exports.FalsePositiveIsSubmitted = exports.FalsePositiveIsDisplayed = exports.AuthenticateButtonIsClicked = exports.AnalysisIsTriggered = exports.AnalysisIsReady = exports.Loggers = exports.Validation = exports.Plugin = void 0;
/* tslint:disable */
/* eslint-disable */
const sdk_1 = require("@itly/sdk");
const plugin_schema_validator_1 = __importDefault(require("@itly/plugin-schema-validator"));
var sdk_2 = require("@itly/sdk");
Object.defineProperty(exports, "Plugin", { enumerable: true, get: function () { return sdk_2.Plugin; } });
Object.defineProperty(exports, "Validation", { enumerable: true, get: function () { return sdk_2.Validation; } });
Object.defineProperty(exports, "Loggers", { enumerable: true, get: function () { return sdk_2.Loggers; } });
class AnalysisIsReady {
    constructor(properties) {
        this.name = 'Analysis Is Ready';
        this.id = 'c9337edb-27a3-416e-a654-092fa4375feb';
        this.version = '3.0.0';
        this.properties = {
            ...properties,
            'itly': true,
        };
    }
}
exports.AnalysisIsReady = AnalysisIsReady;
class AnalysisIsTriggered {
    constructor(properties) {
        this.name = 'Analysis Is Triggered';
        this.id = 'dabf569e-219c-470f-8e31-6e029723f0cd';
        this.version = '3.0.0';
        this.properties = {
            ...properties,
            'itly': true,
        };
    }
}
exports.AnalysisIsTriggered = AnalysisIsTriggered;
class AuthenticateButtonIsClicked {
    constructor(properties) {
        this.name = 'Authenticate Button Is Clicked';
        this.id = '2220c25f-ba76-4d5b-92f7-6d0e1c6165be';
        this.version = '4.0.0';
        this.properties = {
            ...properties,
            'itly': true,
        };
    }
}
exports.AuthenticateButtonIsClicked = AuthenticateButtonIsClicked;
class FalsePositiveIsDisplayed {
    constructor(properties) {
        this.name = 'False Positive Is Displayed';
        this.id = '73047ba4-5e6b-4472-8d4e-1923fc7117f4';
        this.version = '4.0.0';
        this.properties = {
            ...properties,
            'itly': true,
        };
    }
}
exports.FalsePositiveIsDisplayed = FalsePositiveIsDisplayed;
class FalsePositiveIsSubmitted {
    constructor(properties) {
        this.name = 'False Positive Is Submitted';
        this.id = '299be947-f18c-41c4-96f8-33f4c8daa5a1';
        this.version = '4.0.0';
        this.properties = {
            ...properties,
            'itly': true,
        };
    }
}
exports.FalsePositiveIsSubmitted = FalsePositiveIsSubmitted;
class IssueHoverIsDisplayed {
    constructor(properties) {
        this.name = 'Issue Hover Is Displayed';
        this.id = '5bcc7fd8-6118-4777-b719-366cda263a13';
        this.version = '3.0.0';
        this.properties = {
            ...properties,
            'itly': true,
        };
    }
}
exports.IssueHoverIsDisplayed = IssueHoverIsDisplayed;
class IssueInTreeIsClicked {
    constructor(properties) {
        this.name = 'Issue In Tree Is Clicked';
        this.id = 'fae15d02-eab9-49bb-9833-18414e26058b';
        this.version = '3.0.0';
        this.properties = {
            ...properties,
            'itly': true,
        };
    }
}
exports.IssueInTreeIsClicked = IssueInTreeIsClicked;
class PluginIsInstalled {
    constructor(properties) {
        this.name = 'Plugin Is Installed';
        this.id = '7bb34693-366e-460e-8f4c-5b3f1c71888a';
        this.version = '2.0.0';
        this.properties = {
            ...properties,
            'itly': true,
        };
    }
}
exports.PluginIsInstalled = PluginIsInstalled;
class QuickFixIsDisplayed {
    constructor(properties) {
        this.name = 'Quick Fix Is Displayed';
        this.id = '170c1284-9ee6-457f-aa82-6c49e49cde93';
        this.version = '2.0.0';
        this.properties = {
            ...properties,
            'itly': true,
        };
    }
}
exports.QuickFixIsDisplayed = QuickFixIsDisplayed;
class ScanModeIsSelected {
    constructor(properties) {
        this.name = 'Scan Mode Is Selected';
        this.id = '41d49045-d336-46ac-b4c2-1a3ebb5c688a';
        this.version = '4.0.0';
        this.properties = {
            ...properties,
            'itly': true,
        };
    }
}
exports.ScanModeIsSelected = ScanModeIsSelected;
class WelcomeButtonIsClicked {
    constructor(properties) {
        this.name = 'Welcome Button Is Clicked';
        this.id = 'e570e72e-4974-481a-9838-66cca471656b';
        this.version = '4.0.0';
        this.properties = {
            ...properties,
            'itly': true,
        };
    }
}
exports.WelcomeButtonIsClicked = WelcomeButtonIsClicked;
class WelcomeIsViewed {
    constructor(properties) {
        this.name = 'Welcome Is Viewed';
        this.id = '91114669-bbab-4f58-a7dd-ea7c98c79221';
        this.version = '2.0.0';
        this.properties = {
            ...properties,
            'itly': true,
        };
    }
}
exports.WelcomeIsViewed = WelcomeIsViewed;
// prettier-ignore
class Itly {
    constructor() {
        this.itly = new sdk_1.ItlyNode();
    }
    /**
     * Initialize the Itly SDK. Call once when your application starts.
     * @param loadOptions Configuration options to initialize the Itly SDK with.
     */
    load(loadOptions = {}) {
        const { destinations = {}, plugins = [], ...options } = loadOptions;
        const destinationPlugins = destinations.all && destinations.all.disabled
            ? []
            : [];
        this.itly.load({
            ...options,
            plugins: [
                new plugin_schema_validator_1.default({
                    'group': { "type": "object", "properties": { "[Amplitude] Group ID": { "type": "object" }, "[Amplitude] Group name": { "type": "object" }, "$set": { "type": "object" }, "$unset": { "type": "object" }, "Account ARR": { "type": "object" }, "Account Plan": { "type": "object" }, "Billing Frequency": { "type": "object" }, "Code Licenses": { "type": "object" }, "Container Licenses": { "type": "object" }, "countFixesFirst30Days": { "type": "object" }, "countFixesFirst7Days": { "type": "object" }, "countFixesPast30Days": { "type": "object" }, "countFixesPast7Days": { "type": "object" }, "countFixesTotal": { "type": "object" }, "currentEngagementState": { "type": "object" }, "dateLastEngagementStateChange": { "type": "object" }, "daysSinceLastEngagementStateChange": { "type": "object" }, "DB Feed Licenses": { "type": "object" }, "Free Trial End Date": { "type": "object" }, "Free Trial Start Date": { "type": "object" }, "groupId": { "type": "string" }, "groupName": { "type": "string" }, "groupType": { "enum": ["org", "group", "account"] }, "hasFixFirst30Days": { "type": "object" }, "hasFixFirst7Days": { "type": "object" }, "hasFixPast30Days": { "type": "object" }, "hasFixPast7Days": { "type": "object" }, "IAC Licenses": { "type": "object" }, "id": { "type": "object" }, "internalName": { "type": "object" }, "isPassthrough": { "type": "object" }, "name": { "type": "object" }, "Open Source Licenses": { "type": "object" }, "plan": { "type": "string" }, "priorEngagementState": { "type": "object" }, "projectTypes": { "type": "array", "items": { "type": "string" }, "uniqueItems": true } }, "additionalProperties": false, "required": [] },
                    'identify': { "type": "object", "properties": { "accountType": { "enum": ["user", "service", "app-instance", "automated-test-user"] }, "adminLink": { "type": "string" }, "authProvider": { "type": "string" }, "createdAt": { "type": "number" }, "email": { "type": "string" }, "hasFirstIntegration": { "type": "boolean" }, "hasFirstProject": { "type": "boolean" }, "hasPersonalEmail": { "type": "boolean" }, "isAppUIBetaEnabled": { "type": "boolean" }, "isNonUser": { "type": "boolean" }, "isSnyk": { "type": "boolean" }, "isSnykAdmin": { "type": "boolean" }, "learnPreferredEcosystems": { "type": "array", "items": { "type": "string" }, "uniqueItems": true }, "productUpdatesConsent": { "type": "boolean" }, "productUpdatesConsentIsDisplayed": { "type": "boolean" }, "user_id": { "type": "string" }, "username": { "type": "string" }, "utm_campaign": { "type": "string" }, "utm_content": { "type": "string" }, "utm_medium": { "type": "string" }, "utm_source": { "type": "string" }, "utm_term": { "type": "string" } }, "additionalProperties": false, "required": [] },
                    'page': { "type": "object", "properties": { "ecosystem": { "type": "string" }, "package": { "type": "string" }, "packageManager": { "type": "string" }, "packageVersion": { "type": "string" }, "path": { "type": "string" }, "referrer": { "type": "string" }, "search": { "type": "string" }, "title": { "type": "string" }, "url": { "type": "string" }, "vulnerabilityId": { "type": "string" } }, "additionalProperties": false, "required": [] },
                    'Analysis Is Ready': { "type": "object", "properties": { "analysisType": { "enum": ["Snyk Advisor", "Snyk Code Quality", "Snyk Code Security", "Snyk Open Source", "Snyk Container", "Snyk Infrastructure as Code"] }, "durationInSeconds": { "type": "number" }, "fileCount": { "type": "integer" }, "ide": { "enum": ["Visual Studio Code", "Visual Studio", "Eclipse", "JetBrains", "Other"] }, "itly": { "const": true }, "osArch": { "type": "string" }, "osPlatform": { "type": "string" }, "result": { "enum": ["Success", "Error"] }, "runtimeName": { "type": "string" }, "runtimeVersion": { "type": "string", "minLength": 1 } }, "additionalProperties": false, "required": ["analysisType", "ide", "itly", "result"] },
                    'Analysis Is Triggered': { "type": "object", "properties": { "analysisType": { "type": "array", "items": { "type": "string" }, "minItems": 1, "uniqueItems": true }, "ide": { "enum": ["Visual Studio Code", "Visual Studio", "Eclipse", "JetBrains", "Other"] }, "itly": { "const": true }, "osArch": { "type": "string" }, "osPlatform": { "type": "string" }, "runtimeName": { "type": "string" }, "runtimeVersion": { "type": "string", "minLength": 1 }, "triggeredByUser": { "type": "boolean" } }, "additionalProperties": false, "required": ["analysisType", "ide", "itly", "triggeredByUser"] },
                    'Authenticate Button Is Clicked': { "type": "object", "properties": { "eventSource": { "enum": ["Advisor", "App", "Learn", "IDE", "Website", "CodeSnippets"] }, "ide": { "enum": ["Visual Studio Code", "Visual Studio", "Eclipse", "JetBrains", "Other"] }, "itly": { "const": true }, "osArch": { "type": "string" }, "osPlatform": { "type": "string" }, "runtimeName": { "type": "string" }, "runtimeVersion": { "type": "string", "minLength": 1 } }, "additionalProperties": false, "required": ["ide", "itly"] },
                    'False Positive Is Displayed': { "type": "object", "properties": { "eventSource": { "enum": ["Advisor", "App", "Learn", "IDE", "Website", "CodeSnippets"] }, "ide": { "enum": ["Visual Studio Code", "Visual Studio", "Eclipse", "JetBrains", "Other"] }, "itly": { "const": true }, "osArch": { "type": "string" }, "osPlatform": { "type": "string" }, "runtimeName": { "type": "string" }, "runtimeVersion": { "type": "string", "minLength": 1 } }, "additionalProperties": false, "required": ["ide", "itly"] },
                    'False Positive Is Submitted': { "type": "object", "properties": { "eventSource": { "enum": ["Advisor", "App", "Learn", "IDE", "Website", "CodeSnippets"] }, "ide": { "enum": ["Visual Studio Code", "Visual Studio", "Eclipse", "JetBrains", "Other"] }, "issueId": { "type": "string" }, "issueType": { "enum": ["Advisor", "Code Quality Issue", "Code Security Vulnerability", "Licence Issue", "Open Source Vulnerability", "Infrastructure as Code Issue", "Container Vulnerability"] }, "itly": { "const": true }, "osArch": { "type": "string" }, "osPlatform": { "type": "string" }, "runtimeName": { "type": "string" }, "runtimeVersion": { "type": "string", "minLength": 1 }, "severity": { "enum": ["High", "Medium", "Low", "Critical"] } }, "additionalProperties": false, "required": ["ide", "itly"] },
                    'Issue Hover Is Displayed': { "type": "object", "properties": { "ide": { "enum": ["Visual Studio Code", "Visual Studio", "Eclipse", "JetBrains", "Other"] }, "issueId": { "type": "string" }, "issueType": { "enum": ["Advisor", "Code Quality Issue", "Code Security Vulnerability", "Licence Issue", "Open Source Vulnerability", "Infrastructure as Code Issue", "Container Vulnerability"] }, "itly": { "const": true }, "osArch": { "type": "string" }, "osPlatform": { "type": "string" }, "runtimeName": { "type": "string" }, "runtimeVersion": { "type": "string", "minLength": 1 }, "severity": { "enum": ["High", "Medium", "Low", "Critical"] } }, "additionalProperties": false, "required": ["ide", "itly"] },
                    'Issue In Tree Is Clicked': { "type": "object", "properties": { "ide": { "enum": ["Visual Studio Code", "Visual Studio", "Eclipse", "JetBrains", "Other"] }, "issueId": { "type": "string" }, "issueType": { "enum": ["Advisor", "Code Quality Issue", "Code Security Vulnerability", "Licence Issue", "Open Source Vulnerability", "Infrastructure as Code Issue", "Container Vulnerability"] }, "itly": { "const": true }, "osArch": { "type": "string" }, "osPlatform": { "type": "string" }, "runtimeName": { "type": "string" }, "runtimeVersion": { "type": "string", "minLength": 1 }, "severity": { "enum": ["High", "Medium", "Low", "Critical"] } }, "additionalProperties": false, "required": ["ide", "itly"] },
                    'Plugin Is Installed': { "type": "object", "properties": { "ide": { "enum": ["Visual Studio Code", "Visual Studio", "Eclipse", "JetBrains", "Other"] }, "itly": { "const": true }, "osArch": { "type": "string" }, "osPlatform": { "type": "string" }, "runtimeName": { "type": "string" }, "runtimeVersion": { "type": "string", "minLength": 1 } }, "additionalProperties": false, "required": ["ide", "itly"] },
                    'Quick Fix Is Displayed': { "type": "object", "properties": { "ide": { "enum": ["Visual Studio Code", "Visual Studio", "Eclipse", "JetBrains", "Other"] }, "itly": { "const": true }, "osArch": { "type": "string" }, "osPlatform": { "type": "string" }, "quickFixType": { "type": "array", "items": { "type": "string" }, "minItems": 1, "uniqueItems": true }, "runtimeName": { "type": "string" }, "runtimeVersion": { "type": "string", "minLength": 1 } }, "additionalProperties": false, "required": ["ide", "itly", "quickFixType"] },
                    'Scan Mode Is Selected': { "type": "object", "properties": { "eventSource": { "enum": ["Advisor", "App", "Learn", "IDE", "Website", "CodeSnippets"] }, "ide": { "enum": ["Visual Studio Code", "Visual Studio", "Eclipse", "JetBrains", "Other"] }, "itly": { "const": true }, "osArch": { "type": "string" }, "osPlatform": { "type": "string" }, "runtimeName": { "type": "string" }, "runtimeVersion": { "type": "string", "minLength": 1 }, "scanMode": { "enum": ["paused", "auto", "manual", "throttled"] } }, "additionalProperties": false, "required": ["ide", "itly", "scanMode"] },
                    'Welcome Button Is Clicked': { "type": "object", "properties": { "eventSource": { "enum": ["Advisor", "App", "Learn", "IDE", "Website", "CodeSnippets"] }, "ide": { "enum": ["Visual Studio Code", "Visual Studio", "Eclipse", "JetBrains", "Other"] }, "itly": { "const": true }, "osArch": { "type": "string" }, "osPlatform": { "type": "string" }, "runtimeName": { "type": "string" }, "runtimeVersion": { "type": "string", "minLength": 1 } }, "additionalProperties": false, "required": ["ide", "itly"] },
                    'Welcome Is Viewed': { "type": "object", "properties": { "ide": { "enum": ["Visual Studio Code", "Visual Studio", "Eclipse", "JetBrains", "Other"] }, "itly": { "const": true }, "osArch": { "type": "string" }, "osPlatform": { "type": "string" }, "runtimeName": { "type": "string" }, "runtimeVersion": { "type": "string", "minLength": 1 } }, "additionalProperties": false, "required": ["ide", "itly"] },
                }),
                ...destinationPlugins,
                ...plugins,
            ],
        });
    }
    /**
     * Alias a user ID to another user ID.
     * @param userId The user's new ID.
     * @param previousId The user's previous ID.
     * @param options Options for this alias call.
     */
    alias(userId, previousId, options) {
        this.itly.alias(userId, previousId, options);
    }
    /**
     * Identify a user and set or update that user's properties.
     * @param userId The user's ID.
     * @param properties The user's properties.
     * @param options Options for this identify call.
     */
    identify(userId, properties, options) {
        this.itly.identify(userId, properties, options);
    }
    /**
     * Associate a user with a group and set or update that group's properties.
     * @param userId The user's ID.
     * @param groupId The group's ID.
     * @param properties The group's properties.
     * @param options Options for this group call.
     */
    group(userId, groupId, properties, options) {
        this.itly.group(userId, groupId, properties, options);
    }
    /**
     * Triggered when the analysis is loaded within the IDE.
     *
     * Owner: Georgi Mitev
     * @param userId The user's ID.
     * @param properties The event's properties (e.g. analysisType)
     * @param options Options for this track call.
     */
    analysisIsReady(userId, properties, options) {
        this.itly.track(userId, new AnalysisIsReady(properties), options);
    }
    /**
     * User triggers an analysis or analysis is automatically triggered.
     *
     * Owner: Georgi Mitev
     * @param userId The user's ID.
     * @param properties The event's properties (e.g. analysisType)
     * @param options Options for this track call.
     */
    analysisIsTriggered(userId, properties, options) {
        this.itly.track(userId, new AnalysisIsTriggered(properties), options);
    }
    /**
     * This Event fires when the authenticate button is clicked.
     *
     * Owner: Bastian Doetsch
     * @param userId The user's ID.
     * @param properties The event's properties (e.g. eventSource)
     * @param options Options for this track call.
     */
    authenticateButtonIsClicked(userId, properties, options) {
        this.itly.track(userId, new AuthenticateButtonIsClicked(properties), options);
    }
    /**
     * This event fires when the "Report false positive" view is shown in IDE.
     *
     * Owner: Michel Kaporin
     * @param userId The user's ID.
     * @param properties The event's properties (e.g. eventSource)
     * @param options Options for this track call.
     */
    falsePositiveIsDisplayed(userId, properties, options) {
        this.itly.track(userId, new FalsePositiveIsDisplayed(properties), options);
    }
    /**
     * This event fires when false positive is reported from IDE.
     *
     * Owner: Michel Kaporin
     * @param userId The user's ID.
     * @param properties The event's properties (e.g. eventSource)
     * @param options Options for this track call.
     */
    falsePositiveIsSubmitted(userId, properties, options) {
        this.itly.track(userId, new FalsePositiveIsSubmitted(properties), options);
    }
    /**
     * Triggered when issue hover is displayed in the IDE editor.
     *
     * Owner: Michel Kaporin
     * @param userId The user's ID.
     * @param properties The event's properties (e.g. ide)
     * @param options Options for this track call.
     */
    issueHoverIsDisplayed(userId, properties, options) {
        this.itly.track(userId, new IssueHoverIsDisplayed(properties), options);
    }
    /**
     * Triggered when the user selects an issue from the issues list and the issue is loaded.
     *
     * Owner: Georgi Mitev
     * @param userId The user's ID.
     * @param properties The event's properties (e.g. ide)
     * @param options Options for this track call.
     */
    issueInTreeIsClicked(userId, properties, options) {
        this.itly.track(userId, new IssueInTreeIsClicked(properties), options);
    }
    /**
     * Triggered when the user installs the plugin.
     *
     * Owner: Georgi Mitev
     * @param userId The user's ID.
     * @param properties The event's properties (e.g. ide)
     * @param options Options for this track call.
     */
    pluginIsInstalled(userId, properties, options) {
        this.itly.track(userId, new PluginIsInstalled(properties), options);
    }
    /**
     * Triggered when quick fix options are displayed to the user in IDE.
     *
     * Owner: Michel Kaporin
     * @param userId The user's ID.
     * @param properties The event's properties (e.g. ide)
     * @param options Options for this track call.
     */
    quickFixIsDisplayed(userId, properties, options) {
        this.itly.track(userId, new QuickFixIsDisplayed(properties), options);
    }
    /**
     * Owner: Michel Kaporin
     * @param userId The user's ID.
     * @param properties The event's properties (e.g. eventSource)
     * @param options Options for this track call.
     */
    scanModeIsSelected(userId, properties, options) {
        this.itly.track(userId, new ScanModeIsSelected(properties), options);
    }
    /**
     * This event fires when the "Check it out" button is clicked in welcome notification.
     *
     * Owner: Michel Kaporin
     * @param userId The user's ID.
     * @param properties The event's properties (e.g. eventSource)
     * @param options Options for this track call.
     */
    welcomeButtonIsClicked(userId, properties, options) {
        this.itly.track(userId, new WelcomeButtonIsClicked(properties), options);
    }
    /**
     * User installs the IDE plugin and see Snyk's welcome screen.
     *
     * Owner: Georgi Mitev
     * @param userId The user's ID.
     * @param properties The event's properties (e.g. ide)
     * @param options Options for this track call.
     */
    welcomeIsViewed(userId, properties, options) {
        this.itly.track(userId, new WelcomeIsViewed(properties), options);
    }
    /**
     * Track any event.
     * @param userId The user's ID.
     * @param event The event to track.
     * @param options Options for this track call.
     */
    track(userId, event, options) {
        this.itly.track(userId, event, options);
    }
    // reset() N/A for Node.js
    async flush() {
        await this.itly.flush();
    }
}
exports.default = new Itly();
//# sourceMappingURL=index.js.map