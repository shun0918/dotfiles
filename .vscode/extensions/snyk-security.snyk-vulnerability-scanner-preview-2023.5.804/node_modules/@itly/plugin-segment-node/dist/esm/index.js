var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/* eslint-disable no-unused-vars, class-methods-use-this */
import { RequestLoggerPlugin, } from '@itly/sdk';
import Segment from 'analytics-node';
/**
 * Segment Node Plugin for Iteratively SDK
 */
var SegmentPlugin = /** @class */ (function (_super) {
    __extends(SegmentPlugin, _super);
    function SegmentPlugin(writeKey, options) {
        var _this = _super.call(this, 'segment') || this;
        _this.writeKey = writeKey;
        _this.options = options;
        return _this;
    }
    SegmentPlugin.prototype.load = function (options) {
        _super.prototype.load.call(this, options);
        this.segment = this.createSegment();
    };
    SegmentPlugin.prototype.createSegment = function () {
        return new Segment(this.writeKey, this.options);
    };
    SegmentPlugin.prototype.alias = function (userId, previousId, options) {
        var _a = options !== null && options !== void 0 ? options : {}, callback = _a.callback, segmentOptions = _a.options;
        var payload = __assign(__assign({}, segmentOptions), { userId: userId,
            previousId: previousId });
        var responseLogger = this.logger.logRequest('alias', JSON.stringify(payload));
        this.segment.alias(payload, this.wrapCallback(responseLogger, callback));
    };
    SegmentPlugin.prototype.identify = function (userId, properties, options) {
        var _a = options !== null && options !== void 0 ? options : {}, callback = _a.callback, segmentOptions = _a.options;
        var payload = __assign(__assign({}, segmentOptions), { userId: userId, traits: __assign({}, properties) });
        var responseLogger = this.logger.logRequest('identify', JSON.stringify(payload));
        this.segment.identify(payload, this.wrapCallback(responseLogger, callback));
    };
    SegmentPlugin.prototype.group = function (userId, groupId, properties, options) {
        var _a = options !== null && options !== void 0 ? options : {}, callback = _a.callback, segmentOptions = _a.options;
        var payload = __assign(__assign({}, segmentOptions), { userId: userId,
            groupId: groupId, traits: properties });
        var responseLogger = this.logger.logRequest('group', JSON.stringify(payload));
        this.segment.group(payload, this.wrapCallback(responseLogger, callback));
    };
    SegmentPlugin.prototype.page = function (userId, category, name, properties, options) {
        var _a = options !== null && options !== void 0 ? options : {}, callback = _a.callback, segmentOptions = _a.options;
        var payload = __assign(__assign({}, segmentOptions), { userId: userId,
            category: category,
            name: name,
            properties: properties });
        var responseLogger = this.logger.logRequest('page', JSON.stringify(payload));
        this.segment.page(payload, this.wrapCallback(responseLogger, callback));
    };
    SegmentPlugin.prototype.track = function (userId, _a, options) {
        var name = _a.name, properties = _a.properties;
        var _b = options !== null && options !== void 0 ? options : {}, callback = _b.callback, segmentOptions = _b.options;
        var payload = __assign(__assign({}, segmentOptions), { userId: userId, event: name, properties: __assign({}, properties) });
        var responseLogger = this.logger.logRequest('track', JSON.stringify(payload));
        this.segment.track(payload, this.wrapCallback(responseLogger, callback));
    };
    SegmentPlugin.prototype.flush = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.segment.flush(function (err) {
                if (err) {
                    return reject(err);
                }
                return resolve();
            });
        });
    };
    SegmentPlugin.prototype.wrapCallback = function (responseLogger, callback) {
        return function (err) {
            if (err == null) {
                responseLogger.success('success');
            }
            else {
                responseLogger.error(err.toString());
            }
            callback === null || callback === void 0 ? void 0 : callback(err);
        };
    };
    return SegmentPlugin;
}(RequestLoggerPlugin));
export { SegmentPlugin };
export default SegmentPlugin;
