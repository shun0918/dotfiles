/* eslint-disable no-unused-vars, class-methods-use-this, import/extensions, import/no-unresolved */
import { Itly as ItlyBase, Loggers, Plugin, Validation, } from './base';
import { RequestLoggerPlugin, RequestLogger, } from './internal/RequestLogger';
export { Plugin, Validation, Loggers, RequestLoggerPlugin, RequestLogger, };
// Itly Browser SDK
var Itly = /** @class */ (function () {
    function Itly() {
        var _this = this;
        /**
         * Initialize the Itly SDK. Call once when your application starts.
         * @param loadOptions Configuration options to initialize the Itly SDK with.
         */
        this.load = function (loadOptions) { return _this.itly.load(loadOptions); };
        /**
         * Alias a user ID to another user ID.
         * @param userId The user's new ID.
         * @param previousId The user's previous ID.
         * @param options Options for this alias call.
         */
        this.alias = function (userId, previousId, options) { return _this.itly.alias(userId, previousId, options); };
        /**
         * Identify a user and set or update that user's properties.
         * @param userId The user's ID.
         * @param identifyProperties The user's properties.
         * @param options Options for this identify call.
         */
        this.identify = function (userId, identifyProperties, options) {
            if (userId != null && typeof (userId) === 'object') {
                // eslint-disable-next-line no-param-reassign
                options = identifyProperties;
                // eslint-disable-next-line no-param-reassign
                identifyProperties = userId;
                // eslint-disable-next-line no-param-reassign
                userId = undefined;
            }
            _this.itly.identify(userId, identifyProperties, options);
        };
        /**
         * Associate the current user with a group and set or update that group's properties.
         * @param groupId The group's ID.
         * @param groupProperties The group's properties.
         * @param options Options for this group call.
         */
        this.group = function (groupId, groupProperties, options) { return _this.itly.group(undefined, groupId, groupProperties, options); };
        /**
         * Track a page view.
         * @param category The page's category.
         * @param name The page's name.
         * @param pageProperties The page's properties.
         * @param options Options for this page call.
         */
        this.page = function (category, name, pageProperties, options) { return _this.itly.page(undefined, category, name, pageProperties, options); };
        /**
         * Track any event.
         * @param event The event.
         * @param event.name The event's name.
         * @param event.properties The event's properties.
         * @param event.id The event's ID.
         * @param event.version The event's version.
         * @param options Options for this track call.
         */
        this.track = function (event, options) { return _this.itly.track(undefined, event, options); };
        /**
         * Reset (e.g. on logout) all analytics state for the current user and group.
         */
        this.reset = function () { return _this.itly.reset(); };
        /**
         * Flush pending events.
         */
        this.flush = function () { return _this.itly.flush(); };
        this.itly = new ItlyBase();
    }
    return Itly;
}());
export { Itly };
export { Itly as ItlyBrowser };
export default Itly;
