(function (root, factory) {
  if (typeof define === 'function' && define.amd)
    define(['exports', './kotlin-kotlin-stdlib-js-ir.js'], factory);
  else if (typeof exports === 'object')
    factory(module.exports, require('./kotlin-kotlin-stdlib-js-ir.js'));
  else {
    if (typeof this['kotlin-kotlin-stdlib-js-ir'] === 'undefined') {
      throw new Error("Error loading module 'experiment-evaluation-evaluation-core'. Its dependency 'kotlin-kotlin-stdlib-js-ir' was not found. Please, check whether 'kotlin-kotlin-stdlib-js-ir' is loaded prior to 'experiment-evaluation-evaluation-core'.");
    }
    root['experiment-evaluation-evaluation-core'] = factory(typeof this['experiment-evaluation-evaluation-core'] === 'undefined' ? {} : this['experiment-evaluation-evaluation-core'], this['kotlin-kotlin-stdlib-js-ir']);
  }
}(this, function (_, kotlin_kotlin) {
  'use strict';
  //region block: imports
  var imul = Math.imul;
  var hashCode = kotlin_kotlin.$_$.y;
  var THROW_CCE = kotlin_kotlin.$_$.m1;
  var equals = kotlin_kotlin.$_$.v;
  var classMeta = kotlin_kotlin.$_$.t;
  var ArrayList_init_$Create$ = kotlin_kotlin.$_$.c;
  var Unit_getInstance = kotlin_kotlin.$_$.i;
  var Map = kotlin_kotlin.$_$.k;
  var isInterface = kotlin_kotlin.$_$.b1;
  var Long = kotlin_kotlin.$_$.l1;
  var toLong = kotlin_kotlin.$_$.e1;
  var charSequenceLength = kotlin_kotlin.$_$.s;
  var LinkedHashSet_init_$Create$ = kotlin_kotlin.$_$.e;
  var contains = kotlin_kotlin.$_$.l;
  var LinkedHashMap_init_$Create$ = kotlin_kotlin.$_$.d;
  var RuntimeException_init_$Create$ = kotlin_kotlin.$_$.h;
  var encodeToByteArray = kotlin_kotlin.$_$.h1;
  var interfaceMeta = kotlin_kotlin.$_$.z;
  var objectMeta = kotlin_kotlin.$_$.d1;
  var getStringHashCode = kotlin_kotlin.$_$.x;
  var Enum = kotlin_kotlin.$_$.j1;
  var println = kotlin_kotlin.$_$.q;
  var rotateLeft = kotlin_kotlin.$_$.o1;
  var IllegalArgumentException = kotlin_kotlin.$_$.k1;
  var IllegalArgumentException_init_$Create$ = kotlin_kotlin.$_$.g;
  var hashSetOf = kotlin_kotlin.$_$.m;
  var to = kotlin_kotlin.$_$.q1;
  var mapOf = kotlin_kotlin.$_$.n;
  var toString = kotlin_kotlin.$_$.p1;
  var toString_0 = kotlin_kotlin.$_$.f1;
  var removeSurrounding = kotlin_kotlin.$_$.i1;
  var startsWith$default = kotlin_kotlin.$_$.a;
  var Collection = kotlin_kotlin.$_$.j;
  var contains_0 = kotlin_kotlin.$_$.g1;
  var compareTo = kotlin_kotlin.$_$.u;
  var getNumberHashCode = kotlin_kotlin.$_$.w;
  //endregion
  //region block: pre-declaration
  EvaluationMode.prototype = Object.create(Enum.prototype);
  EvaluationMode.prototype.constructor = EvaluationMode;
  Operator.prototype = Object.create(Enum.prototype);
  Operator.prototype.constructor = Operator;
  //endregion
  function Allocation(percentage, weights) {
    this.i9_1 = percentage;
    this.j9_1 = weights;
  }
  Allocation.prototype.k9 = function () {
    return this.i9_1;
  };
  Allocation.prototype.toString = function () {
    return 'Allocation(percentage=' + this.i9_1 + ', weights=' + this.j9_1 + ')';
  };
  Allocation.prototype.hashCode = function () {
    var result = this.i9_1;
    result = imul(result, 31) + (this.j9_1 == null ? 0 : hashCode(this.j9_1)) | 0;
    return result;
  };
  Allocation.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof Allocation))
      return false;
    var tmp0_other_with_cast = other instanceof Allocation ? other : THROW_CCE();
    if (!(this.i9_1 === tmp0_other_with_cast.i9_1))
      return false;
    if (!equals(this.j9_1, tmp0_other_with_cast.j9_1))
      return false;
    return true;
  };
  Allocation.$metadata$ = classMeta('Allocation');
  function getVariantDistribution(_this__u8e3s4, variants) {
    var tmp$ret$0;
    {
      tmp$ret$0 = ArrayList_init_$Create$();
    }
    var distribution = tmp$ret$0;
    var totalWeight = getTotalWeightForVariants(_this__u8e3s4, variants);
    if (totalWeight.equals(new Long(0, 0))) {
      var pct = 1.0 / variants.c();
      var inductionVariable = 0;
      var last = variants.c() - 1 | 0;
      if (inductionVariable <= last)
        do {
          var i = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          distribution.a(new VariantDistribution(variants.f(i), pct, (i + 1 | 0) * pct));
        }
         while (inductionVariable <= last);
    } else {
      var cumulativeWeight = 0;
      var cumulativePct = 0.0;
      var tmp1_iterator = variants.d();
      while (tmp1_iterator.g()) {
        var variant = tmp1_iterator.e();
        var pct_0 = 0.0;
        var tmp2_safe_receiver = _this__u8e3s4.j9_1;
        var tmp;
        if (tmp2_safe_receiver == null) {
          tmp = null;
        } else {
          var tmp$ret$1;
          {
            var tmp0_get = variant.l9_1;
            tmp$ret$1 = ((!(tmp2_safe_receiver == null) ? isInterface(tmp2_safe_receiver, Map) : false) ? tmp2_safe_receiver : THROW_CCE()).c1(tmp0_get);
          }
          tmp = tmp$ret$1;
        }
        var tmp3_elvis_lhs = tmp;
        var variantRolloutWeight = tmp3_elvis_lhs == null ? 0 : tmp3_elvis_lhs;
        if (variantRolloutWeight > 0) {
          cumulativeWeight = cumulativeWeight + variantRolloutWeight | 0;
          pct_0 = variantRolloutWeight / totalWeight.u8();
          cumulativePct = cumulativeWeight / totalWeight.u8();
        }
        distribution.a(new VariantDistribution(variant, pct_0, cumulativePct));
      }
    }
    return distribution;
  }
  function getTotalWeightForVariants(_this__u8e3s4, variants) {
    var totalWeight = new Long(0, 0);
    if (!(_this__u8e3s4.j9_1 == null)) {
      var tmp0_iterator = variants.d();
      while (tmp0_iterator.g()) {
        var variant = tmp0_iterator.e();
        var tmp$ret$1;
        {
          var tmp2_plus = totalWeight;
          var tmp$ret$0;
          {
            var tmp0_get = _this__u8e3s4.j9_1;
            var tmp1_get = variant.l9_1;
            tmp$ret$0 = ((!(tmp0_get == null) ? isInterface(tmp0_get, Map) : false) ? tmp0_get : THROW_CCE()).c1(tmp1_get);
          }
          var tmp1_elvis_lhs = tmp$ret$0;
          var tmp3_plus = tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
          tmp$ret$1 = tmp2_plus.a9(toLong(tmp3_plus));
        }
        totalWeight = tmp$ret$1;
      }
    }
    return totalWeight;
  }
  function scaled($this, pct, max) {
    var tmp$ret$0;
    {
      tmp$ret$0 = max.a9(new Long(1, 0));
    }
    return pct * tmp$ret$0.u8();
  }
  function checkEnabled($this, flag) {
    var tmp;
    if (!flag.o9_1) {
      var tmp_0 = Variant_init_$Create$(flag.r9_1, null, 2, null);
      Companion_getInstance();
      tmp = new EvaluationResult(tmp_0, 'flag-disabled');
    } else {
      tmp = null;
    }
    return tmp;
  }
  function checkEmptyUser($this, flag, user) {
    if (user == null) {
      var variant = getFullyRolledOutVariantIfPresent($this, flag.v9_1.aa_1, flag.s9_1);
      var tmp;
      if (!(variant == null)) {
        Companion_getInstance();
        tmp = new EvaluationResult(variant, 'missing-user-fully-rolled-out-variant');
      } else {
        var tmp_0 = Variant_init_$Create$(flag.r9_1, null, 2, null);
        Companion_getInstance();
        tmp = new EvaluationResult(tmp_0, 'missing-user-default-variant');
      }
      return tmp;
    }
    return null;
  }
  function checkSegmentRules($this, flag, user, bucketingValue, excludedVariantsForUser) {
    var tmp;
    if (!(flag.w9_1 == null)) {
      var tmp$ret$0;
      {
        var tmp0_isNotEmpty = flag.w9_1;
        tmp$ret$0 = !tmp0_isNotEmpty.i();
      }
      tmp = tmp$ret$0;
    } else {
      tmp = false;
    }
    if (tmp) {
      var tmp0_iterator = flag.w9_1.d();
      $l$loop: while (tmp0_iterator.g()) {
        var segTargetingConfig = tmp0_iterator.e();
        if (!match(segTargetingConfig, user)) {
          continue $l$loop;
        }
        var tmp_0;
        var tmp$ret$1;
        {
          var tmp1_isNullOrEmpty = segTargetingConfig.ba_1;
          {
          }
          tmp$ret$1 = tmp1_isNullOrEmpty == null ? true : charSequenceLength(tmp1_isNullOrEmpty) === 0;
        }
        if (tmp$ret$1) {
          tmp_0 = bucketingValue;
        } else {
          var tmp1_safe_receiver = user;
          tmp_0 = tmp1_safe_receiver == null ? null : getBucketingValue(tmp1_safe_receiver, segTargetingConfig.ba_1);
        }
        var resolvedBucketingValue = tmp_0;
        var variant = $this.ca(flag.s9_1, segTargetingConfig.aa_1, flag.r9_1, excludedVariantsForUser, flag.q9_1, resolvedBucketingValue);
        return new EvaluationResult(variant, segTargetingConfig.y9_1);
      }
    }
    return null;
  }
  function checkAllUsersRule($this, flag, user, bucketingValue, excludedVariantsForUser) {
    var fullyRolledOutVariant = getFullyRolledOutVariantIfPresent($this, flag.v9_1.aa_1, flag.s9_1);
    if (!(fullyRolledOutVariant == null)) {
      if (!excludedVariantsForUser.h(fullyRolledOutVariant.l9_1)) {
        Companion_getInstance();
        return new EvaluationResult(fullyRolledOutVariant, 'fully-rolled-out-variant');
      }
    }
    var bucketingKey = flag.v9_1.ba_1;
    var tmp;
    var tmp$ret$0;
    {
      {
      }
      tmp$ret$0 = bucketingKey == null ? true : charSequenceLength(bucketingKey) === 0;
    }
    if (tmp$ret$0) {
      tmp = bucketingValue;
    } else {
      var tmp0_safe_receiver = user;
      tmp = tmp0_safe_receiver == null ? null : getBucketingValue(tmp0_safe_receiver, bucketingKey);
    }
    var resolvedBucketingValue = tmp;
    var variant = $this.ca(flag.s9_1, flag.v9_1.aa_1, flag.r9_1, excludedVariantsForUser, flag.q9_1, resolvedBucketingValue);
    Companion_getInstance();
    return new EvaluationResult(variant, 'default-segment');
  }
  function getExclusions($this, flag, user) {
    var tmp$ret$0;
    {
      tmp$ret$0 = LinkedHashSet_init_$Create$();
    }
    var excludedVariantsForUser = tmp$ret$0;
    if (flag.t9_1 == null) {
      return excludedVariantsForUser;
    }
    var tmp0_iterator = flag.s9_1.d();
    $l$loop: while (tmp0_iterator.g()) {
      var variant = tmp0_iterator.e();
      var tmp$ret$1;
      {
        var tmp0_get = flag.t9_1;
        var tmp1_get = variant.l9_1;
        tmp$ret$1 = ((!(tmp0_get == null) ? isInterface(tmp0_get, Map) : false) ? tmp0_get : THROW_CCE()).c1(tmp1_get);
      }
      var tmp1_elvis_lhs = tmp$ret$1;
      var tmp;
      if (tmp1_elvis_lhs == null) {
        continue $l$loop;
      } else {
        tmp = tmp1_elvis_lhs;
      }
      var exclusions = tmp;
      if (contains(exclusions, user.da_1) ? true : contains(exclusions, user.ea_1)) {
        excludedVariantsForUser.a(variant.l9_1);
      }
    }
    return excludedVariantsForUser;
  }
  function checkInclusions($this, flag, user, excludedVariantsForUser) {
    if (flag.u9_1 == null) {
      return null;
    }
    var tmp0_iterator = flag.s9_1.d();
    $l$loop_0: while (tmp0_iterator.g()) {
      var variant = tmp0_iterator.e();
      var tmp$ret$0;
      {
        var tmp0_get = flag.u9_1;
        var tmp1_get = variant.l9_1;
        tmp$ret$0 = ((!(tmp0_get == null) ? isInterface(tmp0_get, Map) : false) ? tmp0_get : THROW_CCE()).c1(tmp1_get);
      }
      var tmp1_elvis_lhs = tmp$ret$0;
      var tmp;
      if (tmp1_elvis_lhs == null) {
        continue $l$loop_0;
      } else {
        tmp = tmp1_elvis_lhs;
      }
      var inclusions = tmp;
      if (excludedVariantsForUser.h(variant.l9_1)) {
        continue $l$loop_0;
      }
      if (contains(inclusions, user.da_1) ? true : contains(inclusions, user.ea_1)) {
        Companion_getInstance();
        return new EvaluationResult(variant, 'inclusion-list');
      }
    }
    return null;
  }
  function getFullyRolledOutVariantIfPresent($this, allocations, variants) {
    var tmp$ret$1;
    {
      var sum = 0;
      var tmp0_iterator = allocations.d();
      while (tmp0_iterator.g()) {
        var element = tmp0_iterator.e();
        var tmp = sum;
        var tmp$ret$0;
        {
          tmp$ret$0 = element.i9_1;
        }
        sum = tmp + tmp$ret$0 | 0;
      }
      tmp$ret$1 = sum;
    }
    var totalAllocationPercentage = tmp$ret$1;
    if (totalAllocationPercentage < 10000) {
      return null;
    }
    if (variants.c() === 1) {
      return variants.f(0);
    }
    var tmp0_elvis_lhs = allocations.f(0).j9_1;
    var tmp_0;
    if (tmp0_elvis_lhs == null) {
      return null;
    } else {
      tmp_0 = tmp0_elvis_lhs;
    }
    var weights = tmp_0;
    var fullyRolledOutVariant = null;
    var variantsWithWeights = 0;
    var tmp1_iterator = variants.d();
    while (tmp1_iterator.g()) {
      var variant = tmp1_iterator.e();
      var tmp$ret$2;
      {
        var tmp0_get = variant.l9_1;
        tmp$ret$2 = (isInterface(weights, Map) ? weights : THROW_CCE()).c1(tmp0_get);
      }
      var tmp2_elvis_lhs = tmp$ret$2;
      if ((tmp2_elvis_lhs == null ? 0 : tmp2_elvis_lhs) > 0) {
        fullyRolledOutVariant = variant;
        var tmp3 = variantsWithWeights;
        variantsWithWeights = tmp3 + 1 | 0;
      }
    }
    if (variantsWithWeights === 1) {
      return fullyRolledOutVariant;
    }
    return null;
  }
  function EvaluationEngineImpl() {
  }
  EvaluationEngineImpl.prototype.ya = function (flags, user) {
    var tmp$ret$0;
    {
      tmp$ret$0 = LinkedHashMap_init_$Create$();
    }
    var result = tmp$ret$0;
    var tmp0_iterator = flags.d();
    while (tmp0_iterator.g()) {
      var flag = tmp0_iterator.e();
      var evalResult = this.za(flag, user);
      var flagResult = FlagResult_init_$Create$(flag, evalResult);
      {
        var tmp0_set = flag.n9_1;
        result.j1(tmp0_set, flagResult);
      }
    }
    return result;
  };
  EvaluationEngineImpl.prototype.za = function (flag, user) {
    var tmp0_elvis_lhs = checkEnabled(this, flag);
    var result = tmp0_elvis_lhs == null ? checkEmptyUser(this, flag, user) : tmp0_elvis_lhs;
    if (!(result == null)) {
      return result;
    }
    if (user == null) {
      throw RuntimeException_init_$Create$('User should always be non-null at this point.');
    }
    var excludedVariantsForUser = getExclusions(this, flag, user);
    result = checkInclusions(this, flag, user, excludedVariantsForUser);
    if (!(result == null)) {
      return result;
    }
    var bucketingValue = getBucketingValue(user, flag.p9_1);
    var tmp1_elvis_lhs = checkSegmentRules(this, flag, user, bucketingValue, excludedVariantsForUser);
    result = tmp1_elvis_lhs == null ? checkAllUsersRule(this, flag, user, bucketingValue, excludedVariantsForUser) : tmp1_elvis_lhs;
    return result;
  };
  EvaluationEngineImpl.prototype.ab = function (key) {
    var data = encodeToByteArray(key);
    var value = Murmur3_getInstance().hb(data, data.length, 0);
    return toLong(value).g9(new Long(-1, 0));
  };
  EvaluationEngineImpl.prototype.ca = function (variants, allocations, defaultValue, excludedVariantsForUser, bucketingSalt, bucketingValue) {
    var tmp$ret$0;
    {
      {
      }
      tmp$ret$0 = bucketingValue == null ? true : charSequenceLength(bucketingValue) === 0;
    }
    if (tmp$ret$0) {
      var tmp0_elvis_lhs = getFullyRolledOutVariantIfPresent(this, allocations, variants);
      var tmp;
      if (tmp0_elvis_lhs == null) {
        tmp = Variant_init_$Create$(defaultValue, null, 2, null);
      } else {
        tmp = tmp0_elvis_lhs;
      }
      return tmp;
    }
    var keyToHash = '' + bucketingSalt + '/' + bucketingValue;
    var hash = this.ab(keyToHash);
    var tmp$ret$1;
    {
      tmp$ret$1 = hash.d9(new Long(100, 0));
    }
    var bucket = tmp$ret$1;
    var tmp$ret$3;
    {
      var tmp$ret$2;
      {
        var tmp0_floorDiv = new Long(100, 0);
        var q = hash.w1(tmp0_floorDiv);
        if (hash.z1(tmp0_floorDiv).a2(new Long(0, 0)) < 0 ? !q.y1(tmp0_floorDiv).equals(hash) : false) {
          var tmp0 = q;
          q = tmp0.x1();
        }
        tmp$ret$2 = q;
      }
      tmp$ret$3 = tmp$ret$2;
    }
    var variantHash = tmp$ret$3;
    var minBucket;
    var maxBucket = new Long(0, 0);
    var tmp1_iterator = allocations.d();
    $l$loop: while (tmp1_iterator.g()) {
      var allocation = tmp1_iterator.e();
      minBucket = maxBucket;
      maxBucket = maxBucket.a9(toLong(allocation.i9_1 / 100 | 0));
      if (minBucket.a2(bucket) <= 0 ? bucket.a2(maxBucket) < 0 : false) {
        var distribution = getVariantDistribution(allocation, variants);
        if (distribution.i()) {
          continue $l$loop;
        }
        var upperBound;
        var tmp2_iterator = distribution.d();
        $l$loop_1: while (tmp2_iterator.g()) {
          var slice = tmp2_iterator.e();
          if (slice.jb_1 <= 0.0) {
            continue $l$loop_1;
          }
          upperBound = scaled(this, slice.kb_1, new Long(42949672, 0));
          if (variantHash.u8() >= upperBound) {
            continue $l$loop_1;
          }
          var tmp_0;
          if (excludedVariantsForUser.h(slice.ib_1.l9_1)) {
            tmp_0 = Variant_init_$Create$(defaultValue, null, 2, null);
          } else {
            tmp_0 = slice.ib_1;
          }
          return tmp_0;
        }
      }
    }
    return Variant_init_$Create$(defaultValue, null, 2, null);
  };
  EvaluationEngineImpl.$metadata$ = classMeta('EvaluationEngineImpl', [EvaluationEngine]);
  function EvaluationEngine() {
  }
  EvaluationEngine.$metadata$ = interfaceMeta('EvaluationEngine');
  function Companion() {
    Companion_instance = this;
    this.lb_1 = 'missing-user-fully-rolled-out-variant';
    this.mb_1 = 'missing-user-default-variant';
    this.nb_1 = 'fully-rolled-out-variant';
    this.ob_1 = 'default-segment';
    this.pb_1 = 'inclusion-list';
    this.qb_1 = 'flag-disabled';
  }
  Companion.$metadata$ = objectMeta('Companion');
  var Companion_instance;
  function Companion_getInstance() {
    if (Companion_instance == null)
      new Companion();
    return Companion_instance;
  }
  function EvaluationResult(variant, description) {
    Companion_getInstance();
    this.rb_1 = variant;
    this.sb_1 = description;
  }
  EvaluationResult.prototype.toString = function () {
    return 'EvaluationResult(variant=' + this.rb_1 + ', description=' + this.sb_1 + ')';
  };
  EvaluationResult.prototype.hashCode = function () {
    var result = this.rb_1.hashCode();
    result = imul(result, 31) + getStringHashCode(this.sb_1) | 0;
    return result;
  };
  EvaluationResult.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof EvaluationResult))
      return false;
    var tmp0_other_with_cast = other instanceof EvaluationResult ? other : THROW_CCE();
    if (!this.rb_1.equals(tmp0_other_with_cast.rb_1))
      return false;
    if (!(this.sb_1 === tmp0_other_with_cast.sb_1))
      return false;
    return true;
  };
  EvaluationResult.$metadata$ = classMeta('EvaluationResult');
  var EvaluationMode_LOCAL_instance;
  var EvaluationMode_REMOTE_instance;
  var EvaluationMode_entriesInitialized;
  function EvaluationMode_initEntries() {
    if (EvaluationMode_entriesInitialized)
      return Unit_getInstance();
    EvaluationMode_entriesInitialized = true;
    EvaluationMode_LOCAL_instance = new EvaluationMode('LOCAL', 0, 'local');
    EvaluationMode_REMOTE_instance = new EvaluationMode('REMOTE', 1, 'remote');
  }
  function EvaluationMode(name, ordinal, value) {
    Enum.call(this, name, ordinal);
    this.vb_1 = value;
  }
  EvaluationMode.$metadata$ = classMeta('EvaluationMode', undefined, undefined, undefined, undefined, Enum.prototype);
  function EvaluationMode_LOCAL_getInstance() {
    EvaluationMode_initEntries();
    return EvaluationMode_LOCAL_instance;
  }
  function EvaluationMode_REMOTE_getInstance() {
    EvaluationMode_initEntries();
    return EvaluationMode_REMOTE_instance;
  }
  function FlagConfig(flagKey, enabled, bucketingKey, bucketingSalt, defaultValue, variants, variantsExclusions, variantsInclusions, allUsersTargetingConfig, customSegmentTargetingConfigs, evalMode) {
    this.n9_1 = flagKey;
    this.o9_1 = enabled;
    this.p9_1 = bucketingKey;
    this.q9_1 = bucketingSalt;
    this.r9_1 = defaultValue;
    this.s9_1 = variants;
    this.t9_1 = variantsExclusions;
    this.u9_1 = variantsInclusions;
    this.v9_1 = allUsersTargetingConfig;
    this.w9_1 = customSegmentTargetingConfigs;
    this.x9_1 = evalMode;
  }
  FlagConfig.prototype.toString = function () {
    return 'FlagConfig(flagKey=' + this.n9_1 + ', enabled=' + this.o9_1 + ', bucketingKey=' + this.p9_1 + ', bucketingSalt=' + this.q9_1 + ', defaultValue=' + this.r9_1 + ', variants=' + this.s9_1 + ', variantsExclusions=' + this.t9_1 + ', variantsInclusions=' + this.u9_1 + ', allUsersTargetingConfig=' + this.v9_1 + ', customSegmentTargetingConfigs=' + this.w9_1 + ', evalMode=' + this.x9_1 + ')';
  };
  FlagConfig.prototype.hashCode = function () {
    var result = getStringHashCode(this.n9_1);
    result = imul(result, 31) + (this.o9_1 | 0) | 0;
    result = imul(result, 31) + getStringHashCode(this.p9_1) | 0;
    result = imul(result, 31) + (this.q9_1 == null ? 0 : getStringHashCode(this.q9_1)) | 0;
    result = imul(result, 31) + (this.r9_1 == null ? 0 : getStringHashCode(this.r9_1)) | 0;
    result = imul(result, 31) + hashCode(this.s9_1) | 0;
    result = imul(result, 31) + (this.t9_1 == null ? 0 : hashCode(this.t9_1)) | 0;
    result = imul(result, 31) + (this.u9_1 == null ? 0 : hashCode(this.u9_1)) | 0;
    result = imul(result, 31) + this.v9_1.hashCode() | 0;
    result = imul(result, 31) + (this.w9_1 == null ? 0 : hashCode(this.w9_1)) | 0;
    result = imul(result, 31) + this.x9_1.hashCode() | 0;
    return result;
  };
  FlagConfig.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof FlagConfig))
      return false;
    var tmp0_other_with_cast = other instanceof FlagConfig ? other : THROW_CCE();
    if (!(this.n9_1 === tmp0_other_with_cast.n9_1))
      return false;
    if (!(this.o9_1 === tmp0_other_with_cast.o9_1))
      return false;
    if (!(this.p9_1 === tmp0_other_with_cast.p9_1))
      return false;
    if (!(this.q9_1 == tmp0_other_with_cast.q9_1))
      return false;
    if (!(this.r9_1 == tmp0_other_with_cast.r9_1))
      return false;
    if (!equals(this.s9_1, tmp0_other_with_cast.s9_1))
      return false;
    if (!equals(this.t9_1, tmp0_other_with_cast.t9_1))
      return false;
    if (!equals(this.u9_1, tmp0_other_with_cast.u9_1))
      return false;
    if (!this.v9_1.equals(tmp0_other_with_cast.v9_1))
      return false;
    if (!equals(this.w9_1, tmp0_other_with_cast.w9_1))
      return false;
    if (!this.x9_1.equals(tmp0_other_with_cast.x9_1))
      return false;
    return true;
  };
  FlagConfig.$metadata$ = classMeta('FlagConfig');
  function get_DEFAULT_BUCKETING_KEY() {
    return DEFAULT_BUCKETING_KEY;
  }
  var DEFAULT_BUCKETING_KEY;
  function FlagResult_init_$Init$(flagConfig, evaluationResult, $this) {
    FlagResult.call($this, evaluationResult.rb_1, evaluationResult.sb_1, flagConfig.r9_1 == evaluationResult.rb_1.l9_1);
    return $this;
  }
  function FlagResult_init_$Create$(flagConfig, evaluationResult) {
    return FlagResult_init_$Init$(flagConfig, evaluationResult, Object.create(FlagResult.prototype));
  }
  function FlagResult(variant, description, isDefaultVariant) {
    this.wb_1 = variant;
    this.xb_1 = description;
    this.yb_1 = isDefaultVariant;
  }
  FlagResult.prototype.zb = function () {
    return this.wb_1;
  };
  FlagResult.prototype.ac = function () {
    return this.yb_1;
  };
  FlagResult.prototype.toString = function () {
    return 'FlagResult(variant=' + this.wb_1 + ', description=' + this.xb_1 + ', isDefaultVariant=' + this.yb_1 + ')';
  };
  FlagResult.prototype.hashCode = function () {
    var result = this.wb_1.hashCode();
    result = imul(result, 31) + getStringHashCode(this.xb_1) | 0;
    result = imul(result, 31) + (this.yb_1 | 0) | 0;
    return result;
  };
  FlagResult.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof FlagResult))
      return false;
    var tmp0_other_with_cast = other instanceof FlagResult ? other : THROW_CCE();
    if (!this.wb_1.equals(tmp0_other_with_cast.wb_1))
      return false;
    if (!(this.xb_1 === tmp0_other_with_cast.xb_1))
      return false;
    if (!(this.yb_1 === tmp0_other_with_cast.yb_1))
      return false;
    return true;
  };
  FlagResult.$metadata$ = classMeta('FlagResult');
  function Logger() {
    Logger_instance = this;
    this.bc_1 = false;
    this.cc_1 = 'Evaluation';
  }
  Logger.prototype.dc = function (msg) {
    if (this.bc_1) {
      println('DEBUG [' + this.cc_1 + '] ' + msg);
    }
  };
  Logger.prototype.ec = function (msg, e) {
    if (e == null) {
      println('ERROR [' + this.cc_1 + '] ' + msg);
    } else {
      println('ERROR [' + this.cc_1 + '] ' + msg + '\n' + e);
    }
  };
  Logger.$metadata$ = objectMeta('Logger', [ILogger]);
  var Logger_instance;
  function Logger_getInstance() {
    if (Logger_instance == null)
      new Logger();
    return Logger_instance;
  }
  function ILogger() {
  }
  ILogger.$metadata$ = interfaceMeta('ILogger');
  function mix32($this, k, hash) {
    var kResult = k;
    var hashResult = hash;
    kResult = imul(kResult, -862048943);
    kResult = rotateLeft(kResult, 15);
    kResult = imul(kResult, 461845907);
    hashResult = hashResult ^ kResult;
    return imul(rotateLeft(hashResult, 13), 5) + -430675100 | 0;
  }
  function fmix32($this, hash) {
    var hashResult = hash;
    hashResult = hashResult ^ (hashResult >>> 16 | 0);
    hashResult = imul(hashResult, -2048144789);
    hashResult = hashResult ^ (hashResult >>> 13 | 0);
    hashResult = imul(hashResult, -1028477387);
    hashResult = hashResult ^ (hashResult >>> 16 | 0);
    return hashResult;
  }
  function Murmur3() {
    Murmur3_instance = this;
    this.bb_1 = -862048943;
    this.cb_1 = 461845907;
    this.db_1 = 15;
    this.eb_1 = 13;
    this.fb_1 = 5;
    this.gb_1 = -430675100;
  }
  Murmur3.prototype.hb = function (data, length, seed) {
    var hash = seed;
    var nblocks = length >> 2;
    var inductionVariable = 0;
    if (inductionVariable < nblocks)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var index = i << 2;
        var k = readIntLe(data, index);
        hash = mix32(this, k, hash);
      }
       while (inductionVariable < nblocks);
    var index_0 = nblocks << 2;
    var k1 = 0;
    var tmp1_subject = length - index_0 | 0;
    switch (tmp1_subject) {
      case 3:
        k1 = k1 ^ (data[index_0 + 2 | 0] & 255) << 16;
        k1 = k1 ^ (data[index_0 + 1 | 0] & 255) << 8;
        k1 = k1 ^ data[index_0] & 255;
        k1 = imul(k1, -862048943);
        k1 = rotateLeft(k1, 15);
        k1 = imul(k1, 461845907);
        hash = hash ^ k1;
        break;
      case 2:
        k1 = k1 ^ (data[index_0 + 1 | 0] & 255) << 8;
        k1 = k1 ^ data[index_0] & 255;
        k1 = imul(k1, -862048943);
        k1 = rotateLeft(k1, 15);
        k1 = imul(k1, 461845907);
        hash = hash ^ k1;
        break;
      case 1:
        k1 = k1 ^ data[index_0] & 255;
        k1 = imul(k1, -862048943);
        k1 = rotateLeft(k1, 15);
        k1 = imul(k1, 461845907);
        hash = hash ^ k1;
        break;
    }
    hash = hash ^ length;
    return fmix32(this, hash);
  };
  Murmur3.$metadata$ = objectMeta('Murmur3');
  var Murmur3_instance;
  function Murmur3_getInstance() {
    if (Murmur3_instance == null)
      new Murmur3();
    return Murmur3_instance;
  }
  function readIntLe(_this__u8e3s4, index) {
    return reverseBytes((_this__u8e3s4[index] & 255) << 24 | (_this__u8e3s4[index + 1 | 0] & 255) << 16 | (_this__u8e3s4[index + 2 | 0] & 255) << 8 | _this__u8e3s4[index + 3 | 0] & 255);
  }
  function reverseBytes(_this__u8e3s4) {
    return (_this__u8e3s4 & -16777216) >>> 24 | 0 | ((_this__u8e3s4 & 16711680) >>> 8 | 0) | (_this__u8e3s4 & 65280) << 8 | (_this__u8e3s4 & 255) << 24;
  }
  var Operator_IS_instance;
  var Operator_IS_NOT_instance;
  var Operator_CONTAINS_instance;
  var Operator_DOES_NOT_CONTAIN_instance;
  var Operator_LESS_THAN_instance;
  var Operator_LESS_THAN_EQUALS_instance;
  var Operator_GREATER_THAN_instance;
  var Operator_GREATER_THAN_EQUALS_instance;
  var Operator_SET_IS_instance;
  var Operator_SET_IS_NOT_instance;
  var Operator_CSS_MATCH_instance;
  var Operator_GLOB_MATCH_instance;
  var Operator_SET_CONTAINS_instance;
  var Operator_SET_DOES_NOT_CONTAIN_instance;
  var Operator_GLOB_DOES_NOT_MATCH_instance;
  var Operator_VERSION_LESS_THAN_instance;
  var Operator_VERSION_LESS_THAN_EQUALS_instance;
  var Operator_VERSION_GREATER_THAN_instance;
  var Operator_VERSION_GREATER_THAN_EQUALS_instance;
  var Operator_HAS_PREFIX_instance;
  var Operator_entriesInitialized;
  function Operator_initEntries() {
    if (Operator_entriesInitialized)
      return Unit_getInstance();
    Operator_entriesInitialized = true;
    Operator_IS_instance = new Operator('IS', 0, 1);
    Operator_IS_NOT_instance = new Operator('IS_NOT', 1, 2);
    Operator_CONTAINS_instance = new Operator('CONTAINS', 2, 3);
    Operator_DOES_NOT_CONTAIN_instance = new Operator('DOES_NOT_CONTAIN', 3, 4);
    Operator_LESS_THAN_instance = new Operator('LESS_THAN', 4, 5);
    Operator_LESS_THAN_EQUALS_instance = new Operator('LESS_THAN_EQUALS', 5, 6);
    Operator_GREATER_THAN_instance = new Operator('GREATER_THAN', 6, 7);
    Operator_GREATER_THAN_EQUALS_instance = new Operator('GREATER_THAN_EQUALS', 7, 8);
    Operator_SET_IS_instance = new Operator('SET_IS', 8, 9);
    Operator_SET_IS_NOT_instance = new Operator('SET_IS_NOT', 9, 10);
    Operator_CSS_MATCH_instance = new Operator('CSS_MATCH', 10, 11);
    Operator_GLOB_MATCH_instance = new Operator('GLOB_MATCH', 11, 12);
    Operator_SET_CONTAINS_instance = new Operator('SET_CONTAINS', 12, 13);
    Operator_SET_DOES_NOT_CONTAIN_instance = new Operator('SET_DOES_NOT_CONTAIN', 13, 14);
    Operator_GLOB_DOES_NOT_MATCH_instance = new Operator('GLOB_DOES_NOT_MATCH', 14, 15);
    Operator_VERSION_LESS_THAN_instance = new Operator('VERSION_LESS_THAN', 15, 16);
    Operator_VERSION_LESS_THAN_EQUALS_instance = new Operator('VERSION_LESS_THAN_EQUALS', 16, 17);
    Operator_VERSION_GREATER_THAN_instance = new Operator('VERSION_GREATER_THAN', 17, 18);
    Operator_VERSION_GREATER_THAN_EQUALS_instance = new Operator('VERSION_GREATER_THAN_EQUALS', 18, 19);
    Operator_HAS_PREFIX_instance = new Operator('HAS_PREFIX', 19, 20);
  }
  function Operator(name, ordinal, value) {
    Enum.call(this, name, ordinal);
    this.hc_1 = value;
  }
  Operator.$metadata$ = classMeta('Operator', undefined, undefined, undefined, undefined, Enum.prototype);
  function Operator_IS_getInstance() {
    Operator_initEntries();
    return Operator_IS_instance;
  }
  function Operator_IS_NOT_getInstance() {
    Operator_initEntries();
    return Operator_IS_NOT_instance;
  }
  function Operator_CONTAINS_getInstance() {
    Operator_initEntries();
    return Operator_CONTAINS_instance;
  }
  function Operator_DOES_NOT_CONTAIN_getInstance() {
    Operator_initEntries();
    return Operator_DOES_NOT_CONTAIN_instance;
  }
  function Operator_LESS_THAN_getInstance() {
    Operator_initEntries();
    return Operator_LESS_THAN_instance;
  }
  function Operator_LESS_THAN_EQUALS_getInstance() {
    Operator_initEntries();
    return Operator_LESS_THAN_EQUALS_instance;
  }
  function Operator_GREATER_THAN_getInstance() {
    Operator_initEntries();
    return Operator_GREATER_THAN_instance;
  }
  function Operator_GREATER_THAN_EQUALS_getInstance() {
    Operator_initEntries();
    return Operator_GREATER_THAN_EQUALS_instance;
  }
  function Operator_SET_IS_getInstance() {
    Operator_initEntries();
    return Operator_SET_IS_instance;
  }
  function Operator_SET_IS_NOT_getInstance() {
    Operator_initEntries();
    return Operator_SET_IS_NOT_instance;
  }
  function Operator_CSS_MATCH_getInstance() {
    Operator_initEntries();
    return Operator_CSS_MATCH_instance;
  }
  function Operator_GLOB_MATCH_getInstance() {
    Operator_initEntries();
    return Operator_GLOB_MATCH_instance;
  }
  function Operator_SET_CONTAINS_getInstance() {
    Operator_initEntries();
    return Operator_SET_CONTAINS_instance;
  }
  function Operator_SET_DOES_NOT_CONTAIN_getInstance() {
    Operator_initEntries();
    return Operator_SET_DOES_NOT_CONTAIN_instance;
  }
  function Operator_GLOB_DOES_NOT_MATCH_getInstance() {
    Operator_initEntries();
    return Operator_GLOB_DOES_NOT_MATCH_instance;
  }
  function Operator_VERSION_LESS_THAN_getInstance() {
    Operator_initEntries();
    return Operator_VERSION_LESS_THAN_instance;
  }
  function Operator_VERSION_LESS_THAN_EQUALS_getInstance() {
    Operator_initEntries();
    return Operator_VERSION_LESS_THAN_EQUALS_instance;
  }
  function Operator_VERSION_GREATER_THAN_getInstance() {
    Operator_initEntries();
    return Operator_VERSION_GREATER_THAN_instance;
  }
  function Operator_VERSION_GREATER_THAN_EQUALS_getInstance() {
    Operator_initEntries();
    return Operator_VERSION_GREATER_THAN_EQUALS_instance;
  }
  function Operator_HAS_PREFIX_getInstance() {
    Operator_initEntries();
    return Operator_HAS_PREFIX_instance;
  }
  function get_VERSION_USER_PROPS() {
    init_properties_SegmentTargetingConfig_kt_inm18a();
    return VERSION_USER_PROPS;
  }
  var VERSION_USER_PROPS;
  function get_VERSION_OPERATOR_MAP() {
    init_properties_SegmentTargetingConfig_kt_inm18a();
    return VERSION_OPERATOR_MAP;
  }
  var VERSION_OPERATOR_MAP;
  function SegmentTargetingConfig(name, conditions, allocations, bucketingKey) {
    this.y9_1 = name;
    this.z9_1 = conditions;
    this.aa_1 = allocations;
    this.ba_1 = bucketingKey;
  }
  SegmentTargetingConfig.prototype.toString = function () {
    return 'SegmentTargetingConfig(name=' + this.y9_1 + ', conditions=' + this.z9_1 + ', allocations=' + this.aa_1 + ', bucketingKey=' + this.ba_1 + ')';
  };
  SegmentTargetingConfig.prototype.hashCode = function () {
    var result = getStringHashCode(this.y9_1);
    result = imul(result, 31) + hashCode(this.z9_1) | 0;
    result = imul(result, 31) + hashCode(this.aa_1) | 0;
    result = imul(result, 31) + (this.ba_1 == null ? 0 : getStringHashCode(this.ba_1)) | 0;
    return result;
  };
  SegmentTargetingConfig.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof SegmentTargetingConfig))
      return false;
    var tmp0_other_with_cast = other instanceof SegmentTargetingConfig ? other : THROW_CCE();
    if (!(this.y9_1 === tmp0_other_with_cast.y9_1))
      return false;
    if (!equals(this.z9_1, tmp0_other_with_cast.z9_1))
      return false;
    if (!equals(this.aa_1, tmp0_other_with_cast.aa_1))
      return false;
    if (!(this.ba_1 == tmp0_other_with_cast.ba_1))
      return false;
    return true;
  };
  SegmentTargetingConfig.$metadata$ = classMeta('SegmentTargetingConfig');
  function match(_this__u8e3s4, user) {
    init_properties_SegmentTargetingConfig_kt_inm18a();
    return match_0(_this__u8e3s4.z9_1, user);
  }
  function match_0(_this__u8e3s4, user) {
    init_properties_SegmentTargetingConfig_kt_inm18a();
    if (user == null) {
      return false;
    }
    Logger_getInstance().dc('User: ' + user + ' to be matched against filters for segment: ' + _this__u8e3s4);
    var tmp0_iterator = _this__u8e3s4.d();
    while (tmp0_iterator.g()) {
      var filter = tmp0_iterator.e();
      if (isCohortFilter(filter)) {
        var userMatchesCohortFilter = matchesCohortUserPropFilter(user, filter);
        Logger_getInstance().dc('User: ' + user + ' returned: ' + userMatchesCohortFilter + ' for cohort match for filter: ' + filter);
        if (!userMatchesCohortFilter) {
          return false;
        }
      } else {
        var tmp;
        if (get_VERSION_USER_PROPS().h(filter.ic_1)) {
          tmp = toVersionOperator(filter.jc_1);
        } else {
          tmp = filter.jc_1;
        }
        var op = tmp;
        var matchFilter = new StringMatchColumnFilter(filter.ic_1, op, filter.kc_1);
        var userPropValue = getProperty(user, filter.ic_1);
        var tmp_0;
        if (userPropValue == null) {
          tmp_0 = matchesNull(matchFilter);
        } else {
          var tmp_1;
          try {
            tmp_1 = matches(matchFilter, userPropValue);
          } catch ($p) {
            var tmp_2;
            if ($p instanceof IllegalArgumentException) {
              Logger_getInstance().ec('failed to match filter ' + matchFilter, $p);
              tmp_2 = false;
            } else {
              throw $p;
            }
            tmp_1 = tmp_2;
          }
          tmp_0 = tmp_1;
        }
        var matchesFilter = tmp_0;
        if (!matchesFilter) {
          return false;
        }
      }
    }
    Logger_getInstance().dc('User: ' + user + ' matches all filters for segment: ' + _this__u8e3s4);
    return true;
  }
  function matchesCohortUserPropFilter(_this__u8e3s4, userFilter) {
    init_properties_SegmentTargetingConfig_kt_inm18a();
    var tmp0_subject = userFilter.jc_1;
    var tmp0 = tmp0_subject.q8();
    var tmp;
    switch (tmp0) {
      case 0:
        tmp = belongsToCohort(_this__u8e3s4, userFilter.kc_1);
        break;
      case 1:
        tmp = !belongsToCohort(_this__u8e3s4, userFilter.kc_1);
        break;
      default:
        throw IllegalArgumentException_init_$Create$('Not supported for cohorts');
    }
    return tmp;
  }
  function toVersionOperator(_this__u8e3s4) {
    init_properties_SegmentTargetingConfig_kt_inm18a();
    var tmp0_elvis_lhs = get_VERSION_OPERATOR_MAP().c1(_this__u8e3s4);
    return tmp0_elvis_lhs == null ? _this__u8e3s4 : tmp0_elvis_lhs;
  }
  function belongsToCohort(_this__u8e3s4, filterCohortIds) {
    init_properties_SegmentTargetingConfig_kt_inm18a();
    if (filterCohortIds.i()) {
      return true;
    }
    var tmp;
    if (_this__u8e3s4 == null) {
      tmp = true;
    } else {
      var tmp$ret$0;
      {
        var tmp0_isNullOrEmpty = _this__u8e3s4.wa_1;
        {
        }
        tmp$ret$0 = tmp0_isNullOrEmpty == null ? true : tmp0_isNullOrEmpty.i();
      }
      tmp = tmp$ret$0;
    }
    if (tmp) {
      return false;
    }
    var tmp0_iterator = filterCohortIds.d();
    while (tmp0_iterator.g()) {
      var cohortId = tmp0_iterator.e();
      if (_this__u8e3s4.wa_1.h(cohortId)) {
        return true;
      }
    }
    return false;
  }
  var properties_initialized_SegmentTargetingConfig_kt_ld7wgy;
  function init_properties_SegmentTargetingConfig_kt_inm18a() {
    if (properties_initialized_SegmentTargetingConfig_kt_ld7wgy) {
    } else {
      properties_initialized_SegmentTargetingConfig_kt_ld7wgy = true;
      VERSION_USER_PROPS = hashSetOf(['version', 'start_version']);
      VERSION_OPERATOR_MAP = mapOf([to(Operator_LESS_THAN_getInstance(), Operator_VERSION_LESS_THAN_getInstance()), to(Operator_LESS_THAN_EQUALS_getInstance(), Operator_VERSION_LESS_THAN_EQUALS_getInstance()), to(Operator_GREATER_THAN_getInstance(), Operator_VERSION_GREATER_THAN_getInstance()), to(Operator_GREATER_THAN_EQUALS_getInstance(), Operator_VERSION_GREATER_THAN_EQUALS_getInstance())]);
    }
  }
  function SkylabUser_init_$Init$(userId, deviceId, amplitudeId, country, region, dma, city, language, platform, version, startVersion, os, deviceManufacturer, deviceBrand, deviceModel, deviceFamily, deviceType, carrier, library, cohortIds, userProperties, $mask0, $marker, $this) {
    if (!(($mask0 & 1) === 0))
      userId = null;
    if (!(($mask0 & 2) === 0))
      deviceId = null;
    if (!(($mask0 & 4) === 0))
      amplitudeId = new Long(0, 0);
    if (!(($mask0 & 8) === 0))
      country = null;
    if (!(($mask0 & 16) === 0))
      region = null;
    if (!(($mask0 & 32) === 0))
      dma = null;
    if (!(($mask0 & 64) === 0))
      city = null;
    if (!(($mask0 & 128) === 0))
      language = null;
    if (!(($mask0 & 256) === 0))
      platform = null;
    if (!(($mask0 & 512) === 0))
      version = null;
    if (!(($mask0 & 1024) === 0))
      startVersion = null;
    if (!(($mask0 & 2048) === 0))
      os = null;
    if (!(($mask0 & 4096) === 0))
      deviceManufacturer = null;
    if (!(($mask0 & 8192) === 0))
      deviceBrand = null;
    if (!(($mask0 & 16384) === 0))
      deviceModel = null;
    if (!(($mask0 & 32768) === 0))
      deviceFamily = null;
    if (!(($mask0 & 65536) === 0))
      deviceType = null;
    if (!(($mask0 & 131072) === 0))
      carrier = null;
    if (!(($mask0 & 262144) === 0))
      library = null;
    if (!(($mask0 & 524288) === 0))
      cohortIds = null;
    if (!(($mask0 & 1048576) === 0))
      userProperties = null;
    SkylabUser.call($this, userId, deviceId, amplitudeId, country, region, dma, city, language, platform, version, startVersion, os, deviceManufacturer, deviceBrand, deviceModel, deviceFamily, deviceType, carrier, library, cohortIds, userProperties);
    return $this;
  }
  function SkylabUser_init_$Create$(userId, deviceId, amplitudeId, country, region, dma, city, language, platform, version, startVersion, os, deviceManufacturer, deviceBrand, deviceModel, deviceFamily, deviceType, carrier, library, cohortIds, userProperties, $mask0, $marker) {
    return SkylabUser_init_$Init$(userId, deviceId, amplitudeId, country, region, dma, city, language, platform, version, startVersion, os, deviceManufacturer, deviceBrand, deviceModel, deviceFamily, deviceType, carrier, library, cohortIds, userProperties, $mask0, $marker, Object.create(SkylabUser.prototype));
  }
  function Keys() {
    Keys_instance = this;
    this.lc_1 = 'id';
    this.mc_1 = 'user_id';
    this.nc_1 = 'device_id';
    this.oc_1 = 'amplitude_id';
    this.pc_1 = 'device_family';
    this.qc_1 = 'device_type';
    this.rc_1 = 'device_manufacturer';
    this.sc_1 = 'device_brand';
    this.tc_1 = 'device_model';
    this.uc_1 = 'country';
    this.vc_1 = 'region';
    this.wc_1 = 'dma';
    this.xc_1 = 'city';
    this.yc_1 = 'language';
    this.zc_1 = 'platform';
    this.ad_1 = 'version';
    this.bd_1 = 'start_version';
    this.cd_1 = 'os';
    this.dd_1 = 'carrier';
    this.ed_1 = 'user_properties';
    this.fd_1 = 'cohort_ids';
    this.gd_1 = 'library';
  }
  Keys.$metadata$ = objectMeta('Keys');
  var Keys_instance;
  function Keys_getInstance() {
    if (Keys_instance == null)
      new Keys();
    return Keys_instance;
  }
  function SkylabUser(userId, deviceId, amplitudeId, country, region, dma, city, language, platform, version, startVersion, os, deviceManufacturer, deviceBrand, deviceModel, deviceFamily, deviceType, carrier, library, cohortIds, userProperties) {
    Keys_getInstance();
    this.da_1 = userId;
    this.ea_1 = deviceId;
    this.fa_1 = amplitudeId;
    this.ga_1 = country;
    this.ha_1 = region;
    this.ia_1 = dma;
    this.ja_1 = city;
    this.ka_1 = language;
    this.la_1 = platform;
    this.ma_1 = version;
    this.na_1 = startVersion;
    this.oa_1 = os;
    this.pa_1 = deviceManufacturer;
    this.qa_1 = deviceBrand;
    this.ra_1 = deviceModel;
    this.sa_1 = deviceFamily;
    this.ta_1 = deviceType;
    this.ua_1 = carrier;
    this.va_1 = library;
    this.wa_1 = cohortIds;
    this.xa_1 = userProperties;
  }
  SkylabUser.prototype.toString = function () {
    return 'SkylabUser(userId=' + this.da_1 + ', deviceId=' + this.ea_1 + ', amplitudeId=' + toString(this.fa_1) + ', country=' + this.ga_1 + ', region=' + this.ha_1 + ', dma=' + this.ia_1 + ', city=' + this.ja_1 + ', language=' + this.ka_1 + ', platform=' + this.la_1 + ', version=' + this.ma_1 + ', startVersion=' + this.na_1 + ', os=' + this.oa_1 + ', deviceManufacturer=' + this.pa_1 + ', deviceBrand=' + this.qa_1 + ', deviceModel=' + this.ra_1 + ', deviceFamily=' + this.sa_1 + ', deviceType=' + this.ta_1 + ', carrier=' + this.ua_1 + ', library=' + this.va_1 + ', cohortIds=' + this.wa_1 + ', userProperties=' + this.xa_1 + ')';
  };
  SkylabUser.prototype.hashCode = function () {
    var result = this.da_1 == null ? 0 : getStringHashCode(this.da_1);
    result = imul(result, 31) + (this.ea_1 == null ? 0 : getStringHashCode(this.ea_1)) | 0;
    result = imul(result, 31) + (this.fa_1 == null ? 0 : this.fa_1.hashCode()) | 0;
    result = imul(result, 31) + (this.ga_1 == null ? 0 : getStringHashCode(this.ga_1)) | 0;
    result = imul(result, 31) + (this.ha_1 == null ? 0 : getStringHashCode(this.ha_1)) | 0;
    result = imul(result, 31) + (this.ia_1 == null ? 0 : getStringHashCode(this.ia_1)) | 0;
    result = imul(result, 31) + (this.ja_1 == null ? 0 : getStringHashCode(this.ja_1)) | 0;
    result = imul(result, 31) + (this.ka_1 == null ? 0 : getStringHashCode(this.ka_1)) | 0;
    result = imul(result, 31) + (this.la_1 == null ? 0 : getStringHashCode(this.la_1)) | 0;
    result = imul(result, 31) + (this.ma_1 == null ? 0 : getStringHashCode(this.ma_1)) | 0;
    result = imul(result, 31) + (this.na_1 == null ? 0 : getStringHashCode(this.na_1)) | 0;
    result = imul(result, 31) + (this.oa_1 == null ? 0 : getStringHashCode(this.oa_1)) | 0;
    result = imul(result, 31) + (this.pa_1 == null ? 0 : getStringHashCode(this.pa_1)) | 0;
    result = imul(result, 31) + (this.qa_1 == null ? 0 : getStringHashCode(this.qa_1)) | 0;
    result = imul(result, 31) + (this.ra_1 == null ? 0 : getStringHashCode(this.ra_1)) | 0;
    result = imul(result, 31) + (this.sa_1 == null ? 0 : getStringHashCode(this.sa_1)) | 0;
    result = imul(result, 31) + (this.ta_1 == null ? 0 : getStringHashCode(this.ta_1)) | 0;
    result = imul(result, 31) + (this.ua_1 == null ? 0 : getStringHashCode(this.ua_1)) | 0;
    result = imul(result, 31) + (this.va_1 == null ? 0 : getStringHashCode(this.va_1)) | 0;
    result = imul(result, 31) + (this.wa_1 == null ? 0 : hashCode(this.wa_1)) | 0;
    result = imul(result, 31) + (this.xa_1 == null ? 0 : hashCode(this.xa_1)) | 0;
    return result;
  };
  SkylabUser.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof SkylabUser))
      return false;
    var tmp0_other_with_cast = other instanceof SkylabUser ? other : THROW_CCE();
    if (!(this.da_1 == tmp0_other_with_cast.da_1))
      return false;
    if (!(this.ea_1 == tmp0_other_with_cast.ea_1))
      return false;
    if (!equals(this.fa_1, tmp0_other_with_cast.fa_1))
      return false;
    if (!(this.ga_1 == tmp0_other_with_cast.ga_1))
      return false;
    if (!(this.ha_1 == tmp0_other_with_cast.ha_1))
      return false;
    if (!(this.ia_1 == tmp0_other_with_cast.ia_1))
      return false;
    if (!(this.ja_1 == tmp0_other_with_cast.ja_1))
      return false;
    if (!(this.ka_1 == tmp0_other_with_cast.ka_1))
      return false;
    if (!(this.la_1 == tmp0_other_with_cast.la_1))
      return false;
    if (!(this.ma_1 == tmp0_other_with_cast.ma_1))
      return false;
    if (!(this.na_1 == tmp0_other_with_cast.na_1))
      return false;
    if (!(this.oa_1 == tmp0_other_with_cast.oa_1))
      return false;
    if (!(this.pa_1 == tmp0_other_with_cast.pa_1))
      return false;
    if (!(this.qa_1 == tmp0_other_with_cast.qa_1))
      return false;
    if (!(this.ra_1 == tmp0_other_with_cast.ra_1))
      return false;
    if (!(this.sa_1 == tmp0_other_with_cast.sa_1))
      return false;
    if (!(this.ta_1 == tmp0_other_with_cast.ta_1))
      return false;
    if (!(this.ua_1 == tmp0_other_with_cast.ua_1))
      return false;
    if (!(this.va_1 == tmp0_other_with_cast.va_1))
      return false;
    if (!equals(this.wa_1, tmp0_other_with_cast.wa_1))
      return false;
    if (!equals(this.xa_1, tmp0_other_with_cast.xa_1))
      return false;
    return true;
  };
  SkylabUser.$metadata$ = classMeta('SkylabUser');
  function getBucketingValue(_this__u8e3s4, bucketingKey) {
    var tmp0_subject = bucketingKey;
    var tmp;
    Keys_getInstance();
    if (tmp0_subject === 'id') {
      tmp = _this__u8e3s4.ea_1;
    } else {
      Keys_getInstance();
      if (tmp0_subject === 'amplitude_id') {
        var tmp_0;
        if (equals(_this__u8e3s4.fa_1, new Long(0, 0))) {
          Logger_getInstance().dc('AmpId is 0 for amplitudeId bucketing; Skylab User is ' + _this__u8e3s4);
          tmp_0 = null;
        } else {
          var amplitudeId = toString(_this__u8e3s4.fa_1);
          Logger_getInstance().dc('AmplitudeID bucketing key is ' + amplitudeId);
          tmp_0 = amplitudeId;
        }
        tmp = tmp_0;
      } else {
        tmp = getProperty(_this__u8e3s4, bucketingKey);
      }
    }
    return tmp;
  }
  function getProperty(_this__u8e3s4, key) {
    if (isCustomUserProperty(key)) {
      var sanitizedKey = sanitizeCustomUserPropKey(key);
      var tmp;
      var tmp_0;
      if (_this__u8e3s4.xa_1 == null) {
        tmp_0 = true;
      } else {
        var tmp$ret$0;
        {
          var tmp0_containsKey = _this__u8e3s4.xa_1;
          tmp$ret$0 = ((!(tmp0_containsKey == null) ? isInterface(tmp0_containsKey, Map) : false) ? tmp0_containsKey : THROW_CCE()).a1(sanitizedKey);
        }
        tmp_0 = !tmp$ret$0;
      }
      if (tmp_0) {
        tmp = null;
      } else {
        var tmp$ret$1;
        {
          var tmp1_get = _this__u8e3s4.xa_1;
          tmp$ret$1 = ((!(tmp1_get == null) ? isInterface(tmp1_get, Map) : false) ? tmp1_get : THROW_CCE()).c1(sanitizedKey);
        }
        var tmp0_safe_receiver = tmp$ret$1;
        var tmp1_safe_receiver = tmp0_safe_receiver == null ? null : toString_0(tmp0_safe_receiver);
        tmp = tmp1_safe_receiver == null ? null : removeSurrounding(tmp1_safe_receiver, '"');
      }
      return tmp;
    }
    var tmp2_subject = key;
    var tmp_1;
    Keys_getInstance();
    if (tmp2_subject === 'amplitude_id') {
      tmp_1 = toString(_this__u8e3s4.fa_1);
    } else {
      Keys_getInstance();
      if (tmp2_subject === 'user_id') {
        tmp_1 = _this__u8e3s4.da_1;
      } else {
        Keys_getInstance();
        if (tmp2_subject === 'device_id') {
          tmp_1 = _this__u8e3s4.ea_1;
        } else {
          Keys_getInstance();
          if (tmp2_subject === 'country') {
            tmp_1 = _this__u8e3s4.ga_1;
          } else {
            Keys_getInstance();
            if (tmp2_subject === 'region') {
              tmp_1 = _this__u8e3s4.ha_1;
            } else {
              Keys_getInstance();
              if (tmp2_subject === 'dma') {
                tmp_1 = _this__u8e3s4.ia_1;
              } else {
                Keys_getInstance();
                if (tmp2_subject === 'city') {
                  tmp_1 = _this__u8e3s4.ja_1;
                } else {
                  Keys_getInstance();
                  if (tmp2_subject === 'language') {
                    tmp_1 = _this__u8e3s4.ka_1;
                  } else {
                    Keys_getInstance();
                    if (tmp2_subject === 'platform') {
                      tmp_1 = _this__u8e3s4.la_1;
                    } else {
                      Keys_getInstance();
                      if (tmp2_subject === 'version') {
                        tmp_1 = _this__u8e3s4.ma_1;
                      } else {
                        Keys_getInstance();
                        if (tmp2_subject === 'start_version') {
                          tmp_1 = _this__u8e3s4.na_1;
                        } else {
                          Keys_getInstance();
                          if (tmp2_subject === 'os') {
                            tmp_1 = _this__u8e3s4.oa_1;
                          } else {
                            Keys_getInstance();
                            if (tmp2_subject === 'device_family') {
                              tmp_1 = _this__u8e3s4.sa_1;
                            } else {
                              Keys_getInstance();
                              if (tmp2_subject === 'device_type') {
                                tmp_1 = _this__u8e3s4.ta_1;
                              } else {
                                Keys_getInstance();
                                if (tmp2_subject === 'carrier') {
                                  tmp_1 = _this__u8e3s4.ua_1;
                                } else {
                                  Logger_getInstance().dc('Property key ' + key + ' not found on SkylabUser');
                                  tmp_1 = null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return tmp_1;
  }
  function isCustomUserProperty(_this__u8e3s4) {
    return startsWith$default(_this__u8e3s4, 'gp:', false, 2, null);
  }
  function sanitizeCustomUserPropKey(_this__u8e3s4) {
    var tmp$ret$1;
    {
      var tmp$ret$0;
      {
        tmp$ret$0 = _this__u8e3s4;
      }
      tmp$ret$1 = tmp$ret$0.substring(3);
    }
    return tmp$ret$1;
  }
  function StringMatchColumnFilter(columnName, operator, values) {
    this.hd_1 = columnName;
    this.id_1 = operator;
    this.jd_1 = values;
    this.kd_1 = containsNone(this.jd_1);
    this.ld_1 = containsBooleans(this.jd_1);
  }
  StringMatchColumnFilter.prototype.toString = function () {
    return 'StringMatchColumnFilter(columnName=' + this.hd_1 + ', operator=' + this.id_1 + ', values=' + this.jd_1 + ')';
  };
  StringMatchColumnFilter.prototype.hashCode = function () {
    var result = getStringHashCode(this.hd_1);
    result = imul(result, 31) + this.id_1.hashCode() | 0;
    result = imul(result, 31) + hashCode(this.jd_1) | 0;
    return result;
  };
  StringMatchColumnFilter.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof StringMatchColumnFilter))
      return false;
    var tmp0_other_with_cast = other instanceof StringMatchColumnFilter ? other : THROW_CCE();
    if (!(this.hd_1 === tmp0_other_with_cast.hd_1))
      return false;
    if (!this.id_1.equals(tmp0_other_with_cast.id_1))
      return false;
    if (!equals(this.jd_1, tmp0_other_with_cast.jd_1))
      return false;
    return true;
  };
  StringMatchColumnFilter.$metadata$ = classMeta('StringMatchColumnFilter');
  function matchesNull(_this__u8e3s4) {
    var tmp0_subject = _this__u8e3s4.id_1;
    var tmp0 = tmp0_subject.q8();
    var tmp;
    switch (tmp0) {
      case 0:
      case 2:
      case 4:
      case 5:
      case 6:
      case 7:
      case 15:
      case 16:
      case 17:
      case 18:
      case 8:
      case 12:
        tmp = _this__u8e3s4.kd_1;
        break;
      case 1:
      case 3:
        tmp = !_this__u8e3s4.kd_1;
        break;
      case 9:
      case 13:
      case 14:
        tmp = true;
        break;
      case 10:
      case 11:
        tmp = false;
        break;
      default:
        throw IllegalArgumentException_init_$Create$('Unexpected operator ' + _this__u8e3s4.id_1);
    }
    return tmp;
  }
  function matches(_this__u8e3s4, value) {
    var tmp0_subject = _this__u8e3s4.id_1;
    var tmp0 = tmp0_subject.q8();
    var tmp;
    switch (tmp0) {
      case 0:
        tmp = matchesIs(value, _this__u8e3s4.jd_1, _this__u8e3s4.ld_1);
        break;
      case 1:
        tmp = !matchesIs(value, _this__u8e3s4.jd_1, _this__u8e3s4.ld_1);
        break;
      case 2:
        tmp = matchesContains(value, _this__u8e3s4.jd_1);
        break;
      case 3:
        tmp = !matchesContains(value, _this__u8e3s4.jd_1);
        break;
      case 4:
      case 5:
      case 6:
      case 7:
        tmp = matchesCompare(value, _this__u8e3s4.jd_1, _this__u8e3s4.id_1);
        break;
      default:
        throw IllegalArgumentException_init_$Create$('Unexpected or unsupported operator ' + _this__u8e3s4.id_1);
    }
    return tmp;
  }
  function containsNone(_this__u8e3s4) {
    return _this__u8e3s4.h('(none)');
  }
  function containsBooleans(_this__u8e3s4) {
    var tmp$ret$0;
    $l$block_0: {
      var tmp;
      if (isInterface(_this__u8e3s4, Collection)) {
        tmp = _this__u8e3s4.i();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = false;
        break $l$block_0;
      }
      var tmp0_iterator = _this__u8e3s4.d();
      while (tmp0_iterator.g()) {
        var element = tmp0_iterator.e();
        var tmp$ret$1;
        {
          tmp$ret$1 = element === 'true' ? true : element === 'false';
        }
        if (tmp$ret$1) {
          tmp$ret$0 = true;
          break $l$block_0;
        }
      }
      tmp$ret$0 = false;
    }
    return tmp$ret$0;
  }
  function matchesIs(_this__u8e3s4, values, hasBooleans) {
    var value = _this__u8e3s4;
    if (hasBooleans) {
      var tmp0_safe_receiver = _this__u8e3s4;
      var tmp;
      if (tmp0_safe_receiver == null) {
        tmp = null;
      } else {
        var tmp$ret$1;
        {
          var tmp$ret$0;
          {
            tmp$ret$0 = tmp0_safe_receiver;
          }
          tmp$ret$1 = tmp$ret$0.toLowerCase();
        }
        tmp = tmp$ret$1;
      }
      var lower = tmp;
      if (lower === 'true' ? true : lower === 'false') {
        value = lower;
      }
    }
    return values.h(value);
  }
  function matchesContains(_this__u8e3s4, values) {
    if (_this__u8e3s4 == null) {
      return false;
    }
    var tmp0_iterator = values.d();
    $l$loop: while (tmp0_iterator.g()) {
      var filterValue = tmp0_iterator.e();
      var tmp1_elvis_lhs = filterValue;
      var tmp;
      if (tmp1_elvis_lhs == null) {
        continue $l$loop;
      } else {
        tmp = tmp1_elvis_lhs;
      }
      var filter = tmp;
      if (contains_0(_this__u8e3s4, filter, true)) {
        return true;
      }
    }
    return false;
  }
  function matchesCompare(_this__u8e3s4, values, operator) {
    var tmp$ret$0;
    $l$block_0: {
      var tmp;
      if (isInterface(values, Collection)) {
        tmp = values.i();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = false;
        break $l$block_0;
      }
      var tmp0_iterator = values.d();
      while (tmp0_iterator.g()) {
        var element = tmp0_iterator.e();
        var tmp$ret$1;
        {
          tmp$ret$1 = compareStrings(_this__u8e3s4, operator, element);
        }
        if (tmp$ret$1) {
          tmp$ret$0 = true;
          break $l$block_0;
        }
      }
      tmp$ret$0 = false;
    }
    return tmp$ret$0;
  }
  function compareStrings(_this__u8e3s4, operator, filterValue) {
    if (_this__u8e3s4 == null ? true : filterValue == null) {
      return false;
    }
    var compareTo_0 = compareTo(_this__u8e3s4, filterValue);
    var tmp0_subject = operator;
    var tmp0 = tmp0_subject.q8();
    var tmp;
    switch (tmp0) {
      case 4:
        tmp = compareTo_0 < 0;
        break;
      case 5:
        tmp = compareTo_0 <= 0;
        break;
      case 6:
        tmp = compareTo_0 > 0;
        break;
      case 7:
        tmp = compareTo_0 >= 0;
        break;
      default:
        throw IllegalArgumentException_init_$Create$('Unexpected operator ' + operator);
    }
    return tmp;
  }
  function UserPropertyFilter(prop, op, values) {
    this.ic_1 = prop;
    this.jc_1 = op;
    this.kc_1 = values;
  }
  UserPropertyFilter.prototype.toString = function () {
    return 'UserPropertyFilter(prop=' + this.ic_1 + ', op=' + this.jc_1 + ', values=' + this.kc_1 + ')';
  };
  UserPropertyFilter.prototype.hashCode = function () {
    var result = getStringHashCode(this.ic_1);
    result = imul(result, 31) + this.jc_1.hashCode() | 0;
    result = imul(result, 31) + hashCode(this.kc_1) | 0;
    return result;
  };
  UserPropertyFilter.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof UserPropertyFilter))
      return false;
    var tmp0_other_with_cast = other instanceof UserPropertyFilter ? other : THROW_CCE();
    if (!(this.ic_1 === tmp0_other_with_cast.ic_1))
      return false;
    if (!this.jc_1.equals(tmp0_other_with_cast.jc_1))
      return false;
    if (!equals(this.kc_1, tmp0_other_with_cast.kc_1))
      return false;
    return true;
  };
  UserPropertyFilter.$metadata$ = classMeta('UserPropertyFilter');
  function isCohortFilter(_this__u8e3s4) {
    return _this__u8e3s4.ic_1 === 'userdata_cohort';
  }
  function Variant_init_$Init$(key, payload, $mask0, $marker, $this) {
    if (!(($mask0 & 1) === 0))
      key = null;
    if (!(($mask0 & 2) === 0))
      payload = null;
    Variant.call($this, key, payload);
    return $this;
  }
  function Variant_init_$Create$(key, payload, $mask0, $marker) {
    return Variant_init_$Init$(key, payload, $mask0, $marker, Object.create(Variant.prototype));
  }
  function Variant(key, payload) {
    this.l9_1 = key;
    this.m9_1 = payload;
  }
  Variant.prototype.s = function () {
    return this.l9_1;
  };
  Variant.prototype.md = function () {
    return this.m9_1;
  };
  Variant.prototype.toString = function () {
    return 'Variant(key=' + this.l9_1 + ', payload=' + toString(this.m9_1) + ')';
  };
  Variant.prototype.hashCode = function () {
    var result = this.l9_1 == null ? 0 : getStringHashCode(this.l9_1);
    result = imul(result, 31) + (this.m9_1 == null ? 0 : hashCode(this.m9_1)) | 0;
    return result;
  };
  Variant.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof Variant))
      return false;
    var tmp0_other_with_cast = other instanceof Variant ? other : THROW_CCE();
    if (!(this.l9_1 == tmp0_other_with_cast.l9_1))
      return false;
    if (!equals(this.m9_1, tmp0_other_with_cast.m9_1))
      return false;
    return true;
  };
  Variant.$metadata$ = classMeta('Variant');
  function VariantDistribution(variant, pct, cumulativePct) {
    this.ib_1 = variant;
    this.jb_1 = pct;
    this.kb_1 = cumulativePct;
  }
  VariantDistribution.prototype.toString = function () {
    return 'VariantDistribution(variant=' + this.ib_1 + ', pct=' + this.jb_1 + ', cumulativePct=' + this.kb_1 + ')';
  };
  VariantDistribution.prototype.hashCode = function () {
    var result = this.ib_1.hashCode();
    result = imul(result, 31) + getNumberHashCode(this.jb_1) | 0;
    result = imul(result, 31) + getNumberHashCode(this.kb_1) | 0;
    return result;
  };
  VariantDistribution.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof VariantDistribution))
      return false;
    var tmp0_other_with_cast = other instanceof VariantDistribution ? other : THROW_CCE();
    if (!this.ib_1.equals(tmp0_other_with_cast.ib_1))
      return false;
    if (!equals(this.jb_1, tmp0_other_with_cast.jb_1))
      return false;
    if (!equals(this.kb_1, tmp0_other_with_cast.kb_1))
      return false;
    return true;
  };
  VariantDistribution.$metadata$ = classMeta('VariantDistribution');
  //region block: init
  DEFAULT_BUCKETING_KEY = 'amplitude_id';
  //endregion
  //region block: exports
  _.$_$ = _.$_$ || {};
  _.$_$.a = Allocation;
  _.$_$.b = get_DEFAULT_BUCKETING_KEY;
  _.$_$.c = EvaluationEngineImpl;
  _.$_$.d = FlagConfig;
  _.$_$.e = SegmentTargetingConfig;
  _.$_$.f = UserPropertyFilter;
  _.$_$.g = Variant;
  _.$_$.h = EvaluationMode_LOCAL_getInstance;
  _.$_$.i = EvaluationMode_REMOTE_getInstance;
  _.$_$.j = Operator_CONTAINS_getInstance;
  _.$_$.k = Operator_CSS_MATCH_getInstance;
  _.$_$.l = Operator_DOES_NOT_CONTAIN_getInstance;
  _.$_$.m = Operator_GLOB_DOES_NOT_MATCH_getInstance;
  _.$_$.n = Operator_GLOB_MATCH_getInstance;
  _.$_$.o = Operator_GREATER_THAN_EQUALS_getInstance;
  _.$_$.p = Operator_GREATER_THAN_getInstance;
  _.$_$.q = Operator_HAS_PREFIX_getInstance;
  _.$_$.r = Operator_IS_NOT_getInstance;
  _.$_$.s = Operator_IS_getInstance;
  _.$_$.t = Operator_LESS_THAN_EQUALS_getInstance;
  _.$_$.u = Operator_LESS_THAN_getInstance;
  _.$_$.v = Operator_SET_CONTAINS_getInstance;
  _.$_$.w = Operator_SET_DOES_NOT_CONTAIN_getInstance;
  _.$_$.x = Operator_SET_IS_NOT_getInstance;
  _.$_$.y = Operator_SET_IS_getInstance;
  _.$_$.z = Operator_VERSION_GREATER_THAN_EQUALS_getInstance;
  _.$_$.a1 = Operator_VERSION_GREATER_THAN_getInstance;
  _.$_$.b1 = Operator_VERSION_LESS_THAN_EQUALS_getInstance;
  _.$_$.c1 = Operator_VERSION_LESS_THAN_getInstance;
  _.$_$.d1 = SkylabUser_init_$Create$;
  _.$_$.e1 = Keys_getInstance;
  //endregion
  return _;
}));

//# sourceMappingURL=experiment-evaluation-evaluation-core.js.map