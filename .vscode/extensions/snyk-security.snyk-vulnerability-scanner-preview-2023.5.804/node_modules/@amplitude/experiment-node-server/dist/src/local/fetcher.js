"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlagConfigFetcher = void 0;
const version_1 = require("../../gen/version");
const config_1 = require("../types/config");
const logger_1 = require("../util/logger");
const FLAG_CONFIG_TIMEOUT = 5000;
class FlagConfigFetcher {
    constructor(apiKey, httpClient, serverUrl = config_1.LocalEvaluationDefaults.serverUrl, debug = false) {
        this.apiKey = apiKey;
        this.serverUrl = serverUrl;
        this.httpClient = httpClient;
        this.logger = new logger_1.ConsoleLogger(debug);
    }
    /**
     * Fetch local evaluation mode flag configs from the Experiment API server.
     * These flag configs can be used to perform local evaluation.
     *
     * @returns The local evaluation mode flag configs for the initialized
     * environment
     */
    fetch() {
        return __awaiter(this, void 0, void 0, function* () {
            const endpoint = `${this.serverUrl}/sdk/rules?eval_mode=local`;
            const headers = {
                Authorization: `Api-Key ${this.apiKey}`,
                Accept: 'application/json',
                'X-Amp-Exp-Library': `experiment-node-server/${version_1.version}`,
                'Content-Type': 'application/json;charset=utf-8',
            };
            const body = null;
            this.logger.debug('[Experiment] Get flag configs');
            const response = yield this.httpClient.request(endpoint, 'GET', headers, body, FLAG_CONFIG_TIMEOUT);
            if (response.status !== 200) {
                throw Error(`flagConfigs - received error response: ${response.status}: ${response.body}`);
            }
            this.logger.debug(`[Experiment] Got flag configs: ${response.body}`);
            return this.parse(response.body);
        });
    }
    parse(flagConfigs) {
        const flagConfigsArray = JSON.parse(flagConfigs);
        const flagConfigsRecord = {};
        for (let i = 0; i < flagConfigsArray.length; i++) {
            const flagConfig = flagConfigsArray[i];
            flagConfigsRecord[flagConfig.flagKey] = flagConfig;
        }
        return flagConfigsRecord;
    }
}
exports.FlagConfigFetcher = FlagConfigFetcher;
